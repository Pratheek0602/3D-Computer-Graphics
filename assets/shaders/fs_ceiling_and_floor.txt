#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform sampler2D second_texture;
uniform vec3 viewPos;
uniform float alpha;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct Spotlight {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
    float constant;
    float linear;
    float quadratic;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

#define MAX_POINT_LIGHTS 10
uniform Light lights[MAX_POINT_LIGHTS];
uniform int numLights;
uniform Spotlight spotlight;

uniform Material material;

vec3 CalcPointLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
    // Ambient component using material color
    vec3 ambient = light.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;

    // Diffuse component using material color
    vec3 lightDir = normalize(light.position - aPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * material.diffuse * diff * texture(first_texture, aTexCoord).rgb;

    // Specular component using material properties
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specMap = texture(second_texture, aTexCoord).rgb; // Use second texture for specular highlights if needed
    vec3 specular = light.specular * spec * specMap * material.specular;

    vec3 result = ambient + diffuse + specular;
    return result;
}

vec3 CalcSpotlight(Spotlight light, vec3 norm, vec3 fragPos, vec3 viewDir) {
    vec3 lightDir = normalize(light.position - fragPos);

    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

    if (intensity > 0.0) {
        // Attenuation
        float distance = length(light.position - fragPos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

        // Ambient component using material color
        vec3 ambient = light.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;

        // Diffuse component using material color
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = light.diffuse * material.diffuse * diff * texture(first_texture, aTexCoord).rgb;

        // Specular component using material properties
        vec3 reflectDir = reflect(-lightDir, norm);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
        vec3 specular = light.specular * spec * material.specular;

        // Apply attenuation and intensity to the results
        ambient *= attenuation;
        diffuse *= attenuation * intensity;
        specular *= attenuation * intensity;

        return ambient + diffuse + specular;
    } else {
        return vec3(0.0);
    }
}

void main() {
    vec3 norm = normalize(aNormal);
    vec3 viewDir = normalize(viewPos - aPos);

    // Calculate lighting from point lights
    vec3 result = vec3(0.0);
    for (int i = 0; i < numLights; i++) {
        result += CalcPointLight(lights[i], norm, aPos, viewDir);
    }

    // Add spotlight contribution
    result += CalcSpotlight(spotlight, norm, aPos, viewDir);

    fragColor = vec4(result, alpha);
}
