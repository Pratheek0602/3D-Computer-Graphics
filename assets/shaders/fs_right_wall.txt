#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform sampler2D second_texture;
uniform vec3 viewPos;
uniform float alpha; 

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

#define MAX_POINT_LIGHTS 10

uniform Light lights[MAX_POINT_LIGHTS];
uniform int numLights;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};

uniform Material material;

vec3 CalcPointLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
  // Scale texture coordinates for tiling effect
  vec2 tiledTexCoord = vec2(aTexCoord.x * 4.0, aTexCoord.y * 3.0);

  // ambient
  vec3 ambient = light.ambient * texture(first_texture, tiledTexCoord).rgb;
  
  // diffuse
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * texture(first_texture, tiledTexCoord).rgb;
  
  // specular 
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specMap = texture(second_texture, aTexCoord).rgb;
  vec3 specular = light.specular * spec * specMap * material.specular;
  
  vec3 result = ambient + diffuse + specular;
  return result;
}

void main() {
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);
  
  vec3 result = vec3(0.0);
  for(int i = 0; i < numLights; i++)
    result += CalcPointLight(lights[i], norm, aPos, viewDir);
    
  fragColor = vec4(result, alpha); // Use the alpha uniform for transparency
}
