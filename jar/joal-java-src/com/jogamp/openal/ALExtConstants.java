/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:49:23 CEST 2023 ----! */
/* !---- Java-Unit: [pkg com.jogamp.openal, cls ALExtConstants], ../build/gensrc/classes/com/jogamp/openal/ALExtConstants.java ----! */

package com.jogamp.openal;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;
import com.jogamp.common.util.*;
import java.util.Set;
import java.util.Map;
import java.util.HashMap;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

public interface ALExtConstants {

  /** Define "AL_FLANGER_MAX_FEEDBACK" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_FLANGER_MAX_FEEDBACK = ( 1.0f );
  /** Define "AL_7POINT1_8_SOFT" with expression '<code>0x1210</code>', CType: int */
  public static final int AL_7POINT1_8_SOFT = 0x1210;
  /** Define "AL_RING_MODULATOR_MAX_FREQUENCY" with expression '<code>(8000.0f)</code>', CType: float */
  public static final float AL_RING_MODULATOR_MAX_FREQUENCY = ( 8000.0f );
  /** Define "AL_FILTER_LAST_PARAMETER" with expression '<code>0x8000</code>', CType: int */
  public static final int AL_FILTER_LAST_PARAMETER = 0x8000;
  /** Define "AL_SAMPLE_RW_OFFSETS_SOFT" with expression '<code>0x1032</code>', CType: int */
  public static final int AL_SAMPLE_RW_OFFSETS_SOFT = 0x1032;
  /** Define "AL_EFFECT_FREQUENCY_SHIFTER" with expression '<code>0x0006</code>', CType: int */
  public static final int AL_EFFECT_FREQUENCY_SHIFTER = 0x6;
  /** Define "AL_REVERB_DIFFUSION" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_REVERB_DIFFUSION = 0x2;
  /** Define "AL_RING_MODULATOR_MIN_HIGHPASS_CUTOFF" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_RING_MODULATOR_MIN_HIGHPASS_CUTOFF = ( 0.0 );
  /** Define "AL_CHORUS_MAX_PHASE" with expression '<code>(180)</code>', CType: int */
  public static final int AL_CHORUS_MAX_PHASE = ( 0xb4 );
  /** Define "AL_EQUALIZER_MIN_MID1_WIDTH" with expression '<code>(0.01f)</code>', CType: float */
  public static final float AL_EQUALIZER_MIN_MID1_WIDTH = ( 0.01f );
  /** Define "AL_EFFECT_EQUALIZER" with expression '<code>0x000C</code>', CType: int */
  public static final int AL_EFFECT_EQUALIZER = 0xc;
  /** Define "AL_EXT_SOURCE_RADIUS" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_SOURCE_RADIUS = 0x1;
  /** Define "AL_EXT_double" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_double = 0x1;
  /** Define "AL_COMPRESSOR_DEFAULT_ONOFF" with expression '<code>(1)</code>', CType: int */
  public static final int AL_COMPRESSOR_DEFAULT_ONOFF = ( 0x1 );
  /** Define "AL_EAXREVERB_DEFAULT_GAIN" with expression '<code>(0.32f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_GAIN = ( 0.32f );
  /** Define "AL_RING_MODULATOR_SAWTOOTH" with expression '<code>(1)</code>', CType: int */
  public static final int AL_RING_MODULATOR_SAWTOOTH = ( 0x1 );
  /** Define "AL_REVERB_DEFAULT_LATE_REVERB_DELAY" with expression '<code>(0.011f)</code>', CType: float */
  public static final float AL_REVERB_DEFAULT_LATE_REVERB_DELAY = ( 0.011f );
  /** Define "AL_VOCAL_MORPHER_WAVEFORM" with expression '<code>0x0005</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_WAVEFORM = 0x5;
  /** Define "AL_VOCAL_MORPHER_MAX_PHONEMEA_COARSE_TUNING" with expression '<code>(24)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_MAX_PHONEMEA_COARSE_TUNING = ( 0x18 );
  /** Define "AL_MONO16_SOFT" with expression '<code>0x1101</code>', CType: int */
  public static final int AL_MONO16_SOFT = 0x1101;
  /** Define "AL_EAXREVERB_LATE_REVERB_GAIN" with expression '<code>0x000C</code>', CType: int */
  public static final int AL_EAXREVERB_LATE_REVERB_GAIN = 0xc;
  /** Define "AL_COMPRESSOR_ONOFF" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_COMPRESSOR_ONOFF = 0x1;
  /** Define "AL_EQUALIZER_MID2_CENTER" with expression '<code>0x0007</code>', CType: int */
  public static final int AL_EQUALIZER_MID2_CENTER = 0x7;
  /** Define "AL_EXT_float32" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_float32 = 0x1;
  /** Define "AL_HIGHPASS_GAIN" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_HIGHPASS_GAIN = 0x1;
  /** Define "AL_EAXREVERB_MAX_DECAY_TIME" with expression '<code>(20.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_DECAY_TIME = ( 20.0f );
  /** Define "AL_MAX_AIR_ABSORPTION_FACTOR" with expression '<code>(10.0f)</code>', CType: float */
  public static final float AL_MAX_AIR_ABSORPTION_FACTOR = ( 10.0f );
  /** Define "AL_EAXREVERB_DEFAULT_REFLECTIONS_DELAY" with expression '<code>(0.007f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_REFLECTIONS_DELAY = ( 0.007f );
  /** Define "AL_DEFAULT_METERS_PER_UNIT" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_DEFAULT_METERS_PER_UNIT = ( 1.0f );
  /** Define "AL_EAXREVERB_MODULATION_DEPTH" with expression '<code>0x0012</code>', CType: int */
  public static final int AL_EAXREVERB_MODULATION_DEPTH = 0x12;
  /** Define "AL_EFFECT_EAXREVERB" with expression '<code>0x8000</code>', CType: int */
  public static final int AL_EFFECT_EAXREVERB = 0x8000;
  /** Define "AL_REVERB_ROOM_ROLLOFF_FACTOR" with expression '<code>0x000C</code>', CType: int */
  public static final int AL_REVERB_ROOM_ROLLOFF_FACTOR = 0xc;
  /** Define "AL_EAXREVERB_MIN_GAINLF" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_GAINLF = ( 0.0 );
  /** Define "AL_FLANGER_MAX_RATE" with expression '<code>(10.0f)</code>', CType: float */
  public static final float AL_FLANGER_MAX_RATE = ( 10.0f );
  /** Define "AL_MAX_ROOM_ROLLOFF_FACTOR" with expression '<code>(10.0f)</code>', CType: float */
  public static final float AL_MAX_ROOM_ROLLOFF_FACTOR = ( 10.0f );
  /** Define "AL_SEC_LENGTH_SOFT" with expression '<code>0x200B</code>', CType: int */
  public static final int AL_SEC_LENGTH_SOFT = 0x200b;
  /** Define "AL_EAXREVERB_MAX_MODULATION_DEPTH" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_MODULATION_DEPTH = ( 1.0f );
  /** Define "AL_EAXREVERB_ECHO_TIME" with expression '<code>0x000F</code>', CType: int */
  public static final int AL_EAXREVERB_ECHO_TIME = 0xf;
  /** Define "AL_FREQUENCY_SHIFTER_MIN_RIGHT_DIRECTION" with expression '<code>(0)</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_MIN_RIGHT_DIRECTION = ( 0x0 );
  /** Define "AL_REVERB_MAX_GAINHF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_REVERB_MAX_GAINHF = ( 1.0f );
  /** Define "AL_FREQUENCY_SHIFTER_DEFAULT_RIGHT_DIRECTION" with expression '<code>(0)</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_DEFAULT_RIGHT_DIRECTION = ( 0x0 );
  /** Define "AL_EAXREVERB_DENSITY" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_EAXREVERB_DENSITY = 0x1;
  /** Define "AL_EFFECTSLOT_GAIN" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_EFFECTSLOT_GAIN = 0x2;
  /** Define "AL_MONO32F_SOFT" with expression '<code>0x10010</code>', CType: int */
  public static final int AL_MONO32F_SOFT = 0x10010;
  /** Define "AL_FORMAT_61CHN32" with expression '<code>0x120F</code>', CType: int */
  public static final int AL_FORMAT_61CHN32 = 0x120f;
  /** Define "AL_REVERB_DEFAULT_DECAY_HFRATIO" with expression '<code>(0.83f)</code>', CType: float */
  public static final float AL_REVERB_DEFAULT_DECAY_HFRATIO = ( 0.83f );
  /** Define "AL_EAXREVERB_DEFAULT_DECAY_HFLIMIT" with expression '<code>1</code>', CType: int */
  public static final int AL_EAXREVERB_DEFAULT_DECAY_HFLIMIT = 0x1;
  /** Define "AL_SOFT_loop_points" with expression '<code>1</code>', CType: int */
  public static final int AL_SOFT_loop_points = 0x1;
  /** Define "AL_CHORUS_WAVEFORM_TRIANGLE" with expression '<code>(1)</code>', CType: int */
  public static final int AL_CHORUS_WAVEFORM_TRIANGLE = ( 0x1 );
  /** Define "AL_EAXREVERB_MIN_AIR_ABSORPTION_GAINHF" with expression '<code>(0.892f)</code>', CType: float */
  public static final float AL_EAXREVERB_MIN_AIR_ABSORPTION_GAINHF = ( 0.892f );
  /** Define "AL_FORMAT_WAVE_EXT" with expression '<code>0x10002</code>', CType: int */
  public static final int AL_FORMAT_WAVE_EXT = 0x10002;
  /** Define "AL_EQUALIZER_MID2_GAIN" with expression '<code>0x0006</code>', CType: int */
  public static final int AL_EQUALIZER_MID2_GAIN = 0x6;
  /** Define "AL_EAXREVERB_MIN_LFREFERENCE" with expression '<code>(20.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MIN_LFREFERENCE = ( 20.0f );
  /** Define "AL_MONO_SOFT" with expression '<code>0x1500</code>', CType: int */
  public static final int AL_MONO_SOFT = 0x1500;
  /** Define "AL_AIR_ABSORPTION_FACTOR" with expression '<code>0x20007</code>', CType: int */
  public static final int AL_AIR_ABSORPTION_FACTOR = 0x20007;
  /** Define "AL_EAXREVERB_MAX_LATE_REVERB_GAIN" with expression '<code>(10.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_LATE_REVERB_GAIN = ( 10.0f );
  /** Define "AL_RING_MODULATOR_SINUSOID" with expression '<code>(0)</code>', CType: int */
  public static final int AL_RING_MODULATOR_SINUSOID = ( 0x0 );
  /** Define "AL_EFFECT_FIRST_PARAMETER" with expression '<code>0x0000</code>', CType: int */
  public static final int AL_EFFECT_FIRST_PARAMETER = 0x0;
  /** Define "ALC_SOFT_loopback" with expression '<code>1</code>', CType: int */
  public static final int ALC_SOFT_loopback = 0x1;
  /** Define "AL_PITCH_SHIFTER_DEFAULT_COARSE_TUNE" with expression '<code>(12)</code>', CType: int */
  public static final int AL_PITCH_SHIFTER_DEFAULT_COARSE_TUNE = ( 0xc );
  /** Define "AL_PITCH_SHIFTER_MAX_FINE_TUNE" with expression '<code>(50)</code>', CType: int */
  public static final int AL_PITCH_SHIFTER_MAX_FINE_TUNE = ( 0x32 );
  /** Define "AL_EAXREVERB_ECHO_DEPTH" with expression '<code>0x0010</code>', CType: int */
  public static final int AL_EAXREVERB_ECHO_DEPTH = 0x10;
  /** Define "AL_ECHO_MAX_DAMPING" with expression '<code>(0.99f)</code>', CType: float */
  public static final float AL_ECHO_MAX_DAMPING = ( 0.99f );
  /** Define "AL_MAX_CONE_OUTER_GAINHF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_MAX_CONE_OUTER_GAINHF = ( 1.0f );
  /** Define "AL_FORMAT_IMA_ADPCM_MONO16_EXT" with expression '<code>0x10000</code>', CType: int */
  public static final int AL_FORMAT_IMA_ADPCM_MONO16_EXT = 0x10000;
  /** Define "AL_EQUALIZER_MAX_HIGH_CUTOFF" with expression '<code>(16000.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_MAX_HIGH_CUTOFF = ( 16000.0f );
  /** Define "ALC_QUAD_SOFT" with expression '<code>0x1503</code>', CType: int */
  public static final int ALC_QUAD_SOFT = 0x1503;
  /** Define "AL_SEC_OFFSET_LATENCY_SOFT" with expression '<code>0x1201</code>', CType: int */
  public static final int AL_SEC_OFFSET_LATENCY_SOFT = 0x1201;
  /** Define "AL_REVERB_DENSITY" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_REVERB_DENSITY = 0x1;
  /** Define "AL_METERS_PER_UNIT" with expression '<code>0x20004</code>', CType: int */
  public static final int AL_METERS_PER_UNIT = 0x20004;
  /** Define "AL_EAXREVERB_MAX_LATE_REVERB_DELAY" with expression '<code>(0.1f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_LATE_REVERB_DELAY = ( 0.1f );
  /** Define "AL_MIN_ROOM_ROLLOFF_FACTOR" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_MIN_ROOM_ROLLOFF_FACTOR = ( 0.0 );
  /** Define "AL_BANDPASS_MAX_GAINLF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_BANDPASS_MAX_GAINLF = ( 1.0f );
  /** Define "AL_REVERB_MIN_DECAY_TIME" with expression '<code>(0.1f)</code>', CType: float */
  public static final float AL_REVERB_MIN_DECAY_TIME = ( 0.1f );
  /** Define "AL_DISTORTION_MAX_EQBANDWIDTH" with expression '<code>(24000.0f)</code>', CType: float */
  public static final float AL_DISTORTION_MAX_EQBANDWIDTH = ( 24000.0f );
  /** Define "AL_DEFAULT_DIRECT_FILTER_GAINHF_AUTO" with expression '<code>1</code>', CType: int */
  public static final int AL_DEFAULT_DIRECT_FILTER_GAINHF_AUTO = 0x1;
  /** Define "AL_EAXREVERB_AIR_ABSORPTION_GAINHF" with expression '<code>0x0013</code>', CType: int */
  public static final int AL_EAXREVERB_AIR_ABSORPTION_GAINHF = 0x13;
  /** Define "AL_FLANGER_MAX_DEPTH" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_FLANGER_MAX_DEPTH = ( 1.0f );
  /** Define "AL_EFFECT_DEDICATED_LOW_FREQUENCY_EFFECT" with expression '<code>0x9000</code>', CType: int */
  public static final int AL_EFFECT_DEDICATED_LOW_FREQUENCY_EFFECT = 0x9000;
  /** Define "AL_DISTORTION_MIN_LOWPASS_CUTOFF" with expression '<code>(80.0f)</code>', CType: float */
  public static final float AL_DISTORTION_MIN_LOWPASS_CUTOFF = ( 80.0f );
  /** Define "AL_REAR16_SOFT" with expression '<code>0x1208</code>', CType: int */
  public static final int AL_REAR16_SOFT = 0x1208;
  /** Define "AL_EFFECT_COMPRESSOR" with expression '<code>0x000B</code>', CType: int */
  public static final int AL_EFFECT_COMPRESSOR = 0xb;
  /** Define "AL_AUTOWAH_MAX_ATTACK_TIME" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_AUTOWAH_MAX_ATTACK_TIME = ( 1.0f );
  /** Define "AL_FORMAT_REAR8" with expression '<code>0x1207</code>', CType: int */
  public static final int AL_FORMAT_REAR8 = 0x1207;
  /** Define "AL_AUTOWAH_MIN_PEAK_GAIN" with expression '<code>(0.00003f)</code>', CType: float */
  public static final float AL_AUTOWAH_MIN_PEAK_GAIN = ( 3.0E-5f );
  /** Define "AL_FORMAT_STEREO_FLOAT32" with expression '<code>0x10011</code>', CType: int */
  public static final int AL_FORMAT_STEREO_FLOAT32 = 0x10011;
  /** Define "AL_REVERB_DEFAULT_GAINHF" with expression '<code>(0.89f)</code>', CType: float */
  public static final float AL_REVERB_DEFAULT_GAINHF = ( 0.89f );
  /** Define "AL_REVERB_GAINHF" with expression '<code>0x0004</code>', CType: int */
  public static final int AL_REVERB_GAINHF = 0x4;
  /** Define "AL_DISTORTION_MAX_EDGE" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_DISTORTION_MAX_EDGE = ( 1.0f );
  /** Define "AL_CHORUS_DEFAULT_RATE" with expression '<code>(1.1f)</code>', CType: float */
  public static final float AL_CHORUS_DEFAULT_RATE = ( 1.1f );
  /** Define "AL_DISTORTION_DEFAULT_GAIN" with expression '<code>(0.05f)</code>', CType: float */
  public static final float AL_DISTORTION_DEFAULT_GAIN = ( 0.05f );
  /** Define "AL_EAXREVERB_MIN_DIFFUSION" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_DIFFUSION = ( 0.0 );
  /** Define "AL_MAX_AUXILIARY_SEND_FILTER_GAINHF_AUTO" with expression '<code>1</code>', CType: int */
  public static final int AL_MAX_AUXILIARY_SEND_FILTER_GAINHF_AUTO = 0x1;
  /** Define "AL_EAXREVERB_DECAY_LFRATIO" with expression '<code>0x0008</code>', CType: int */
  public static final int AL_EAXREVERB_DECAY_LFRATIO = 0x8;
  /** Define "AL_HIGHPASS_MAX_GAINLF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_HIGHPASS_MAX_GAINLF = ( 1.0f );
  /** Define "AL_5POINT1_8_SOFT" with expression '<code>0x120A</code>', CType: int */
  public static final int AL_5POINT1_8_SOFT = 0x120a;
  /** Define "AL_VOCAL_MORPHER_DEFAULT_PHONEMEB" with expression '<code>(10)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_DEFAULT_PHONEMEB = ( 0xa );
  /** Define "AL_EQUALIZER_DEFAULT_MID1_WIDTH" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_DEFAULT_MID1_WIDTH = ( 1.0f );
  /** Define "AL_FLANGER_DEFAULT_FEEDBACK" with expression '<code>(-0.5f)</code>', CType: float */
  public static final float AL_FLANGER_DEFAULT_FEEDBACK = ( - 0.5f );
  /** Define "AL_VOCAL_MORPHER_DEFAULT_PHONEMEA" with expression '<code>(0)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_DEFAULT_PHONEMEA = ( 0x0 );
  /** Define "AL_FLANGER_MIN_DELAY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_FLANGER_MIN_DELAY = ( 0.0 );
  /** Define "AL_REVERB_MIN_REFLECTIONS_DELAY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_REVERB_MIN_REFLECTIONS_DELAY = ( 0.0 );
  /** Define "AL_EAXREVERB_MIN_MODULATION_TIME" with expression '<code>(0.04f)</code>', CType: float */
  public static final float AL_EAXREVERB_MIN_MODULATION_TIME = ( 0.04f );
  /** Define "AL_EQUALIZER_MID1_WIDTH" with expression '<code>0x0005</code>', CType: int */
  public static final int AL_EQUALIZER_MID1_WIDTH = 0x5;
  /** Define "AL_AUTOWAH_MAX_RESONANCE" with expression '<code>(1000.0f)</code>', CType: float */
  public static final float AL_AUTOWAH_MAX_RESONANCE = ( 1000.0f );
  /** Define "AL_FREQUENCY_SHIFTER_MIN_FREQUENCY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_FREQUENCY_SHIFTER_MIN_FREQUENCY = ( 0.0 );
  /** Define "AL_EQUALIZER_DEFAULT_MID1_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_DEFAULT_MID1_GAIN = ( 1.0f );
  /** Define "AL_UNSIGNED_INT_SOFT" with expression '<code>0x1405</code>', CType: int */
  public static final int AL_UNSIGNED_INT_SOFT = 0x1405;
  /** Define "AL_DEFAULT_AIR_ABSORPTION_FACTOR" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_DEFAULT_AIR_ABSORPTION_FACTOR = ( 0.0 );
  /** Define "AL_HIGHPASS_MIN_GAINLF" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_HIGHPASS_MIN_GAINLF = ( 0.0 );
  /** Define "AL_EQUALIZER_DEFAULT_HIGH_CUTOFF" with expression '<code>(6000.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_DEFAULT_HIGH_CUTOFF = ( 6000.0f );
  /** Define "AL_LOWPASS_DEFAULT_GAINHF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_LOWPASS_DEFAULT_GAINHF = ( 1.0f );
  /** Define "AL_REVERB_MAX_DECAY_HFLIMIT" with expression '<code>1</code>', CType: int */
  public static final int AL_REVERB_MAX_DECAY_HFLIMIT = 0x1;
  /** Define "AL_VOCAL_MORPHER_MAX_PHONEMEB_COARSE_TUNING" with expression '<code>(24)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_MAX_PHONEMEB_COARSE_TUNING = ( 0x18 );
  /** Define "AL_LOOP_POINTS_SOFT" with expression '<code>0x2015</code>', CType: int */
  public static final int AL_LOOP_POINTS_SOFT = 0x2015;
  /** Define "AL_EAXREVERB_MAX_DIFFUSION" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_DIFFUSION = ( 1.0f );
  /** Define "AL_MIN_AIR_ABSORPTION_FACTOR" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_MIN_AIR_ABSORPTION_FACTOR = ( 0.0 );
  /** Define "AL_EQUALIZER_HIGH_CUTOFF" with expression '<code>0x000A</code>', CType: int */
  public static final int AL_EQUALIZER_HIGH_CUTOFF = 0xa;
  /** Define "AL_FORMAT_STEREO_DOUBLE_EXT" with expression '<code>0x10013</code>', CType: int */
  public static final int AL_FORMAT_STEREO_DOUBLE_EXT = 0x10013;
  /** Define "AL_ECHO_MAX_SPREAD" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_ECHO_MAX_SPREAD = ( 1.0f );
  /** Define "AL_VOCAL_MORPHER_MIN_PHONEMEB" with expression '<code>(0)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_MIN_PHONEMEB = ( 0x0 );
  /** Define "AL_SAMPLE_OFFSET_LATENCY_SOFT" with expression '<code>0x1200</code>', CType: int */
  public static final int AL_SAMPLE_OFFSET_LATENCY_SOFT = 0x1200;
  /** Define "AL_VOCAL_MORPHER_MIN_PHONEMEA" with expression '<code>(0)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_MIN_PHONEMEA = ( 0x0 );
  /** Define "AL_CHORUS_MAX_DELAY" with expression '<code>(0.016f)</code>', CType: float */
  public static final float AL_CHORUS_MAX_DELAY = ( 0.016f );
  /** Define "AL_EAXREVERB_GAIN" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_EAXREVERB_GAIN = 0x3;
  /** Define "AL_DIRECT_FILTER_GAINHF_AUTO" with expression '<code>0x2000A</code>', CType: int */
  public static final int AL_DIRECT_FILTER_GAINHF_AUTO = 0x2000a;
  /** Define "AL_EAXREVERB_MAX_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_GAIN = ( 1.0f );
  /** Define "AL_HIGHPASS_MIN_GAIN" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_HIGHPASS_MIN_GAIN = ( 0.0 );
  /** Define "AL_MAX_AUXILIARY_SEND_FILTER_GAIN_AUTO" with expression '<code>1</code>', CType: int */
  public static final int AL_MAX_AUXILIARY_SEND_FILTER_GAIN_AUTO = 0x1;
  /** Define "AL_EAXREVERB_MAX_DECAY_LFRATIO" with expression '<code>(2.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_DECAY_LFRATIO = ( 2.0f );
  /** Define "AL_VOCAL_MORPHER_DEFAULT_PHONEMEB_COARSE_TUNING" with expression '<code>(0)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_DEFAULT_PHONEMEB_COARSE_TUNING = ( 0x0 );
  /** Define "AL_REVERB_LATE_REVERB_GAIN" with expression '<code>0x0009</code>', CType: int */
  public static final int AL_REVERB_LATE_REVERB_GAIN = 0x9;
  /** Define "AL_EFFECTSLOT_AUXILIARY_SEND_AUTO" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_EFFECTSLOT_AUXILIARY_SEND_AUTO = 0x3;
  /** Define "AL_UNSIGNED_BYTE_SOFT" with expression '<code>0x1401</code>', CType: int */
  public static final int AL_UNSIGNED_BYTE_SOFT = 0x1401;
  /** Define "AL_ECHO_MAX_LRDELAY" with expression '<code>(0.404f)</code>', CType: float */
  public static final float AL_ECHO_MAX_LRDELAY = ( 0.404f );
  /** Define "AL_FORMAT_MONO_ALAW_EXT" with expression '<code>0x10016</code>', CType: int */
  public static final int AL_FORMAT_MONO_ALAW_EXT = 0x10016;
  /** Define "AL_ECHO_MIN_DAMPING" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_ECHO_MIN_DAMPING = ( 0.0 );
  /** Define "AL_CHORUS_MAX_WAVEFORM" with expression '<code>(1)</code>', CType: int */
  public static final int AL_CHORUS_MAX_WAVEFORM = ( 0x1 );
  /** Define "AL_FREQUENCY_SHIFTER_DEFAULT_LEFT_DIRECTION" with expression '<code>(0)</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_DEFAULT_LEFT_DIRECTION = ( 0x0 );
  /** Define "AL_5POINT1_SOFT" with expression '<code>0x1504</code>', CType: int */
  public static final int AL_5POINT1_SOFT = 0x1504;
  /** Define "AL_DEFAULT_CONE_OUTER_GAINHF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_DEFAULT_CONE_OUTER_GAINHF = ( 1.0f );
  /** Define "AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION = 0x3;
  /** Define "AL_REVERB_DEFAULT_REFLECTIONS_GAIN" with expression '<code>(0.05f)</code>', CType: float */
  public static final float AL_REVERB_DEFAULT_REFLECTIONS_GAIN = ( 0.05f );
  /** Define "AL_FORMAT_51CHN8" with expression '<code>0x120A</code>', CType: int */
  public static final int AL_FORMAT_51CHN8 = 0x120a;
  /** Define "AL_EAXREVERB_MIN_REFLECTIONS_GAIN" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_REFLECTIONS_GAIN = ( 0.0 );
  /** Define "AL_BYTE_RW_OFFSETS_SOFT" with expression '<code>0x1031</code>', CType: int */
  public static final int AL_BYTE_RW_OFFSETS_SOFT = 0x1031;
  /** Define "AL_LOWPASS_MAX_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_LOWPASS_MAX_GAIN = ( 1.0f );
  /** Define "AL_CHORUS_FEEDBACK" with expression '<code>0x0005</code>', CType: int */
  public static final int AL_CHORUS_FEEDBACK = 0x5;
  /** Define "AL_REVERB_DEFAULT_GAIN" with expression '<code>(0.32f)</code>', CType: float */
  public static final float AL_REVERB_DEFAULT_GAIN = ( 0.32f );
  /** Define "AL_REVERB_LATE_REVERB_DELAY" with expression '<code>0x000A</code>', CType: int */
  public static final int AL_REVERB_LATE_REVERB_DELAY = 0xa;
  /** Define "ALC_LOKI_audio_channel" with expression '<code>1</code>', CType: int */
  public static final int ALC_LOKI_audio_channel = 0x1;
  /** Define "AL_BANDPASS_MAX_GAINHF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_BANDPASS_MAX_GAINHF = ( 1.0f );
  /** Define "AL_HIGHPASS_DEFAULT_GAINLF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_HIGHPASS_DEFAULT_GAINLF = ( 1.0f );
  /** Define "AL_VOCAL_MORPHER_DEFAULT_PHONEMEA_COARSE_TUNING" with expression '<code>(0)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_DEFAULT_PHONEMEA_COARSE_TUNING = ( 0x0 );
  /** Define "AL_AUTOWAH_DEFAULT_PEAK_GAIN" with expression '<code>(11.22f)</code>', CType: float */
  public static final float AL_AUTOWAH_DEFAULT_PEAK_GAIN = ( 11.22f );
  /** Define "AL_EXT_STEREO_ANGLES" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_STEREO_ANGLES = 0x1;
  /** Define "AL_EFFECT_REVERB" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_EFFECT_REVERB = 0x1;
  /** Define "AL_VOCAL_MORPHER_MAX_WAVEFORM" with expression '<code>(2)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_MAX_WAVEFORM = ( 0x2 );
  /** Define "AL_EQUALIZER_MAX_MID2_GAIN" with expression '<code>(7.943f)</code>', CType: float */
  public static final float AL_EQUALIZER_MAX_MID2_GAIN = ( 7.943f );
  /** Define "ALC_CHAN_MAIN_LOKI" with expression '<code>0x500001</code>', CType: int */
  public static final int ALC_CHAN_MAIN_LOKI = 0x500001;
  /** Define "AL_FORMAT_STEREO_MULAW" with expression '<code>0x10015</code>', CType: int */
  public static final int AL_FORMAT_STEREO_MULAW = 0x10015;
  /** Define "AL_FORMAT_STEREO_IMA4" with expression '<code>0x1301</code>', CType: int */
  public static final int AL_FORMAT_STEREO_IMA4 = 0x1301;
  /** Define "AL_EAXREVERB_MIN_GAIN" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_GAIN = ( 0.0 );
  /** Define "AL_INTERNAL_FORMAT_SOFT" with expression '<code>0x2008</code>', CType: int */
  public static final int AL_INTERNAL_FORMAT_SOFT = 0x2008;
  /** Define "AL_VOCAL_MORPHER_WAVEFORM_SAWTOOTH" with expression '<code>(2)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_WAVEFORM_SAWTOOTH = ( 0x2 );
  /** Define "AL_DOUBLE_SOFT" with expression '<code>0x1407</code>', CType: int */
  public static final int AL_DOUBLE_SOFT = 0x1407;
  /** Define "AL_FILTER_LOWPASS" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_FILTER_LOWPASS = 0x1;
  /** Define "AL_EXT_vorbis" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_vorbis = 0x1;
  /** Define "AL_FORMAT_61CHN8" with expression '<code>0x120D</code>', CType: int */
  public static final int AL_FORMAT_61CHN8 = 0x120d;
  /** Define "ALC_STEREO_SOFT" with expression '<code>0x1501</code>', CType: int */
  public static final int ALC_STEREO_SOFT = 0x1501;
  /** Define "AL_LOKI_quadriphonic" with expression '<code>1</code>', CType: int */
  public static final int AL_LOKI_quadriphonic = 0x1;
  /** Define "AL_AUTOWAH_MAX_RELEASE_TIME" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_AUTOWAH_MAX_RELEASE_TIME = ( 1.0f );
  /** Define "AL_REVERB_GAIN" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_REVERB_GAIN = 0x3;
  /** Define "AL_PITCH_SHIFTER_MAX_COARSE_TUNE" with expression '<code>(12)</code>', CType: int */
  public static final int AL_PITCH_SHIFTER_MAX_COARSE_TUNE = ( 0xc );
  /** Define "AL_EQUALIZER_DEFAULT_MID2_CENTER" with expression '<code>(3000.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_DEFAULT_MID2_CENTER = ( 3000.0f );
  /** Define "AL_EQUALIZER_MAX_MID1_WIDTH" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_MAX_MID1_WIDTH = ( 1.0f );
  /** Define "AL_EQUALIZER_MID1_GAIN" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_EQUALIZER_MID1_GAIN = 0x3;
  /** Define "AL_CHORUS_WAVEFORM" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_CHORUS_WAVEFORM = 0x1;
  /** Define "AL_REAR32F_SOFT" with expression '<code>0x1209</code>', CType: int */
  public static final int AL_REAR32F_SOFT = 0x1209;
  /** Define "AL_CHORUS_MIN_WAVEFORM" with expression '<code>(0)</code>', CType: int */
  public static final int AL_CHORUS_MIN_WAVEFORM = ( 0x0 );
  /** Define "AL_FORMAT_QUAD32" with expression '<code>0x1206</code>', CType: int */
  public static final int AL_FORMAT_QUAD32 = 0x1206;
  /** Define "AL_EAXREVERB_MIN_DECAY_TIME" with expression '<code>(0.1f)</code>', CType: float */
  public static final float AL_EAXREVERB_MIN_DECAY_TIME = ( 0.1f );
  /** Define "AL_EXT_MULAW" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_MULAW = 0x1;
  /** Define "AL_AUTOWAH_ATTACK_TIME" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_AUTOWAH_ATTACK_TIME = 0x1;
  /** Define "AL_STEREO_ANGLES" with expression '<code>0x1030</code>', CType: int */
  public static final int AL_STEREO_ANGLES = 0x1030;
  /** Define "AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO" with expression '<code>0x2000C</code>', CType: int */
  public static final int AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO = 0x2000c;
  /** Define "AL_BYTE_SOFT" with expression '<code>0x1400</code>', CType: int */
  public static final int AL_BYTE_SOFT = 0x1400;
  /** Define "AL_VOCAL_MORPHER_PHONEME_UW" with expression '<code>(14)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_UW = ( 0xe );
  /** Define "AL_FLANGER_MIN_PHASE" with expression '<code>(-180)</code>', CType: int */
  public static final int AL_FLANGER_MIN_PHASE = ( - 0xb4 );
  /** Define "AL_FREQUENCY_SHIFTER_MIN_LEFT_DIRECTION" with expression '<code>(0)</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_MIN_LEFT_DIRECTION = ( 0x0 );
  /** Define "AL_EAXREVERB_MAX_ECHO_TIME" with expression '<code>(0.25f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_ECHO_TIME = ( 0.25f );
  /** Define "AL_EAXREVERB_DEFAULT_MODULATION_DEPTH" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_DEFAULT_MODULATION_DEPTH = ( 0.0 );
  /** Define "AL_CHORUS_DEFAULT_FEEDBACK" with expression '<code>(0.25f)</code>', CType: float */
  public static final float AL_CHORUS_DEFAULT_FEEDBACK = ( 0.25f );
  /** Define "AL_VOCAL_MORPHER_PHONEME_UH" with expression '<code>(13)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_UH = ( 0xd );
  /** Define "AL_EAXREVERB_DEFAULT_DECAY_LFRATIO" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_DECAY_LFRATIO = ( 1.0f );
  /** Define "AL_EQUALIZER_MAX_MID2_WIDTH" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_MAX_MID2_WIDTH = ( 1.0f );
  /** Define "AL_7POINT1_16_SOFT" with expression '<code>0x1211</code>', CType: int */
  public static final int AL_7POINT1_16_SOFT = 0x1211;
  /** Define "ALC_6POINT1_SOFT" with expression '<code>0x1505</code>', CType: int */
  public static final int ALC_6POINT1_SOFT = 0x1505;
  /** Define "AL_AUTOWAH_MAX_PEAK_GAIN" with expression '<code>(31621.0f)</code>', CType: float */
  public static final float AL_AUTOWAH_MAX_PEAK_GAIN = ( 31621.0f );
  /** Define "AL_HIGHPASS_GAINLF" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_HIGHPASS_GAINLF = 0x2;
  /** Define "AL_EFFECT_DEDICATED_DIALOGUE" with expression '<code>0x9001</code>', CType: int */
  public static final int AL_EFFECT_DEDICATED_DIALOGUE = 0x9001;
  /** Define "AL_AUTOWAH_RELEASE_TIME" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_AUTOWAH_RELEASE_TIME = 0x2;
  /** Define "AL_EAXREVERB_DEFAULT_ECHO_TIME" with expression '<code>(0.25f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_ECHO_TIME = ( 0.25f );
  /** Define "AL_ECHO_MIN_SPREAD" with expression '<code>(-1.0f)</code>', CType: float */
  public static final float AL_ECHO_MIN_SPREAD = ( - 1.0f );
  /** Define "AL_FILTER_HIGHPASS" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_FILTER_HIGHPASS = 0x2;
  /** Define "AL_FLANGER_DEPTH" with expression '<code>0x0004</code>', CType: int */
  public static final int AL_FLANGER_DEPTH = 0x4;
  /** Define "AL_EAXREVERB_MODULATION_TIME" with expression '<code>0x0011</code>', CType: int */
  public static final int AL_EAXREVERB_MODULATION_TIME = 0x11;
  /** Define "AL_EAXREVERB_DEFAULT_LFREFERENCE" with expression '<code>(250.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_LFREFERENCE = ( 250.0f );
  /** Define "AL_RING_MODULATOR_DEFAULT_HIGHPASS_CUTOFF" with expression '<code>(800.0f)</code>', CType: float */
  public static final float AL_RING_MODULATOR_DEFAULT_HIGHPASS_CUTOFF = ( 800.0f );
  /** Define "AL_AUXILIARY_SEND_FILTER_GAIN_AUTO" with expression '<code>0x2000B</code>', CType: int */
  public static final int AL_AUXILIARY_SEND_FILTER_GAIN_AUTO = 0x2000b;
  /** Define "AL_EFFECT_NULL" with expression '<code>0x0000</code>', CType: int */
  public static final int AL_EFFECT_NULL = 0x0;
  /** Define "AL_BANDPASS_MAX_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_BANDPASS_MAX_GAIN = ( 1.0f );
  /** Define "AL_DISTORTION_MIN_EQCENTER" with expression '<code>(80.0f)</code>', CType: float */
  public static final float AL_DISTORTION_MIN_EQCENTER = ( 80.0f );
  /** Define "ALC_EXT_thread_local_context" with expression '<code>1</code>', CType: int */
  public static final int ALC_EXT_thread_local_context = 0x1;
  /** Define "AL_FLANGER_DEFAULT_DEPTH" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_FLANGER_DEFAULT_DEPTH = ( 1.0f );
  /** Define "AL_EFFECT_CHORUS" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_EFFECT_CHORUS = 0x2;
  /** Define "AL_FORMAT_IMA_ADPCM_STEREO16_EXT" with expression '<code>0x10001</code>', CType: int */
  public static final int AL_FORMAT_IMA_ADPCM_STEREO16_EXT = 0x10001;
  /** Define "AL_EAXREVERB_MAX_GAINHF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_GAINHF = ( 1.0f );
  /** Define "AL_FLANGER_DEFAULT_RATE" with expression '<code>(0.27f)</code>', CType: float */
  public static final float AL_FLANGER_DEFAULT_RATE = ( 0.27f );
  /** Define "AL_EAXREVERB_DEFAULT_REFLECTIONS_GAIN" with expression '<code>(0.05f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_REFLECTIONS_GAIN = ( 0.05f );
  /** Define "AL_SOURCE_DISTANCE_MODEL" with expression '<code>0x200</code>', CType: int */
  public static final int AL_SOURCE_DISTANCE_MODEL = 0x200;
  /** Define "AL_BANDPASS_DEFAULT_GAINHF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_BANDPASS_DEFAULT_GAINHF = ( 1.0f );
  /** Define "AL_REVERB_MAX_DIFFUSION" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_REVERB_MAX_DIFFUSION = ( 1.0f );
  /** Define "AL_CHORUS_MIN_DELAY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_CHORUS_MIN_DELAY = ( 0.0 );
  /** Define "AL_LOWPASS_GAIN" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_LOWPASS_GAIN = 0x1;
  /** Define "AL_STEREO8_SOFT" with expression '<code>0x1102</code>', CType: int */
  public static final int AL_STEREO8_SOFT = 0x1102;
  /** Define "AL_EQUALIZER_LOW_GAIN" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_EQUALIZER_LOW_GAIN = 0x1;
  /** Define "AL_5POINT1_32F_SOFT" with expression '<code>0x120C</code>', CType: int */
  public static final int AL_5POINT1_32F_SOFT = 0x120c;
  /** Define "AL_FREQUENCY_SHIFTER_DIRECTION_DOWN" with expression '<code>(0)</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_DIRECTION_DOWN = ( 0x0 );
  /** Define "ALC_UNSIGNED_INT_SOFT" with expression '<code>0x1405</code>', CType: int */
  public static final int ALC_UNSIGNED_INT_SOFT = 0x1405;
  /** Define "AL_FLANGER_MIN_RATE" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_FLANGER_MIN_RATE = ( 0.0 );
  /** Define "AL_ECHO_LRDELAY" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_ECHO_LRDELAY = 0x2;
  /** Define "AL_EAXREVERB_MIN_DENSITY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_DENSITY = ( 0.0 );
  /** Define "AL_QUAD8_SOFT" with expression '<code>0x1204</code>', CType: int */
  public static final int AL_QUAD8_SOFT = 0x1204;
  /** Define "ALC_7POINT1_SOFT" with expression '<code>0x1506</code>', CType: int */
  public static final int ALC_7POINT1_SOFT = 0x1506;
  /** Define "AL_DISTORTION_MIN_GAIN" with expression '<code>(0.01f)</code>', CType: float */
  public static final float AL_DISTORTION_MIN_GAIN = ( 0.01f );
  /** Define "AL_EAXREVERB_MAX_MODULATION_TIME" with expression '<code>(4.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_MODULATION_TIME = ( 4.0f );
  /** Define "AL_6POINT1_16_SOFT" with expression '<code>0x120E</code>', CType: int */
  public static final int AL_6POINT1_16_SOFT = 0x120e;
  /** Define "ALC_MONO_SOFT" with expression '<code>0x1500</code>', CType: int */
  public static final int ALC_MONO_SOFT = 0x1500;
  /** Define "AL_REVERB_AIR_ABSORPTION_GAINHF" with expression '<code>0x000B</code>', CType: int */
  public static final int AL_REVERB_AIR_ABSORPTION_GAINHF = 0xb;
  /** Define "AL_REVERB_DECAY_HFRATIO" with expression '<code>0x0006</code>', CType: int */
  public static final int AL_REVERB_DECAY_HFRATIO = 0x6;
  /** Define "AL_FREQUENCY_SHIFTER_DIRECTION_OFF" with expression '<code>(2)</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_DIRECTION_OFF = ( 0x2 );
  /** Define "AL_DISTORTION_DEFAULT_LOWPASS_CUTOFF" with expression '<code>(8000.0f)</code>', CType: float */
  public static final float AL_DISTORTION_DEFAULT_LOWPASS_CUTOFF = ( 8000.0f );
  /** Define "AL_EXT_IMA4" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_IMA4 = 0x1;
  /** Define "AL_BANDPASS_GAIN" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_BANDPASS_GAIN = 0x1;
  /** Define "AL_EXT_MULAW_MCFORMATS" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_MULAW_MCFORMATS = 0x1;
  /** Define "AL_REVERB_DECAY_TIME" with expression '<code>0x0005</code>', CType: int */
  public static final int AL_REVERB_DECAY_TIME = 0x5;
  /** Define "AL_REVERB_MAX_ROOM_ROLLOFF_FACTOR" with expression '<code>(10.0f)</code>', CType: float */
  public static final float AL_REVERB_MAX_ROOM_ROLLOFF_FACTOR = ( 10.0f );
  /** Define "AL_LOWPASS_MAX_GAINHF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_LOWPASS_MAX_GAINHF = ( 1.0f );
  /** Define "AL_CHORUS_MIN_RATE" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_CHORUS_MIN_RATE = ( 0.0 );
  /** Define "AL_AUTOWAH_DEFAULT_ATTACK_TIME" with expression '<code>(0.06f)</code>', CType: float */
  public static final float AL_AUTOWAH_DEFAULT_ATTACK_TIME = ( 0.06f );
  /** Define "ALC_UNSIGNED_SHORT_SOFT" with expression '<code>0x1403</code>', CType: int */
  public static final int ALC_UNSIGNED_SHORT_SOFT = 0x1403;
  /** Define "AL_FORMAT_61CHN16" with expression '<code>0x120E</code>', CType: int */
  public static final int AL_FORMAT_61CHN16 = 0x120e;
  /** Define "AL_EAXREVERB_DEFAULT_DIFFUSION" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_DIFFUSION = ( 1.0f );
  /** Define "AL_MIN_AUXILIARY_SEND_FILTER_GAINHF_AUTO" with expression '<code>0</code>', CType: int */
  public static final int AL_MIN_AUXILIARY_SEND_FILTER_GAINHF_AUTO = 0x0;
  /** Define "AL_EQUALIZER_DEFAULT_MID2_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_DEFAULT_MID2_GAIN = ( 1.0f );
  /** Define "AL_REVERB_MAX_DECAY_HFRATIO" with expression '<code>(2.0f)</code>', CType: float */
  public static final float AL_REVERB_MAX_DECAY_HFRATIO = ( 2.0f );
  /** Define "AL_REVERB_MIN_DENSITY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_REVERB_MIN_DENSITY = ( 0.0 );
  /** Define "AL_EAXREVERB_DEFAULT_GAINLF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_GAINLF = ( 1.0f );
  /** Define "AL_FILTER_TYPE" with expression '<code>0x8001</code>', CType: int */
  public static final int AL_FILTER_TYPE = 0x8001;
  /** Define "AL_EAXREVERB_MAX_DECAY_HFRATIO" with expression '<code>(2.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_DECAY_HFRATIO = ( 2.0f );
  /** Define "AL_EAXREVERB_DEFAULT_REFLECTIONS_PAN_XYZ" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_DEFAULT_REFLECTIONS_PAN_XYZ = ( 0.0 );
  /** Define "AL_EQUALIZER_DEFAULT_LOW_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_DEFAULT_LOW_GAIN = ( 1.0f );
  /** Define "AL_CHORUS_MIN_PHASE" with expression '<code>(-180)</code>', CType: int */
  public static final int AL_CHORUS_MIN_PHASE = ( - 0xb4 );
  /** Define "AL_VOCAL_MORPHER_MAX_RATE" with expression '<code>(10.0f)</code>', CType: float */
  public static final float AL_VOCAL_MORPHER_MAX_RATE = ( 10.0f );
  /** Define "AL_RING_MODULATOR_MIN_WAVEFORM" with expression '<code>(0)</code>', CType: int */
  public static final int AL_RING_MODULATOR_MIN_WAVEFORM = ( 0x0 );
  /** Define "AL_CHORUS_DEPTH" with expression '<code>0x0004</code>', CType: int */
  public static final int AL_CHORUS_DEPTH = 0x4;
  /** Define "AL_FLANGER_WAVEFORM_SINUSOID" with expression '<code>(0)</code>', CType: int */
  public static final int AL_FLANGER_WAVEFORM_SINUSOID = ( 0x0 );
  /** Define "AL_ECHO_DELAY" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_ECHO_DELAY = 0x1;
  /** Define "AL_DIRECT_FILTER" with expression '<code>0x20005</code>', CType: int */
  public static final int AL_DIRECT_FILTER = 0x20005;
  /** Define "AL_QUAD32F_SOFT" with expression '<code>0x1206</code>', CType: int */
  public static final int AL_QUAD32F_SOFT = 0x1206;
  /** Define "AL_EQUALIZER_MIN_HIGH_CUTOFF" with expression '<code>(4000.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_MIN_HIGH_CUTOFF = ( 4000.0f );
  /** Define "AL_REVERB_DEFAULT_DECAY_HFLIMIT" with expression '<code>1</code>', CType: int */
  public static final int AL_REVERB_DEFAULT_DECAY_HFLIMIT = 0x1;
  /** Define "AL_ECHO_MIN_DELAY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_ECHO_MIN_DELAY = ( 0.0 );
  /** Define "AL_SAMPLE_LENGTH_SOFT" with expression '<code>0x200A</code>', CType: int */
  public static final int AL_SAMPLE_LENGTH_SOFT = 0x200a;
  /** Define "AL_CHORUS_PHASE" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_CHORUS_PHASE = 0x2;
  /** Define "AL_SOFT_events" with expression '<code>1</code>', CType: int */
  public static final int AL_SOFT_events = 0x1;
  /** Define "AL_FORMAT_51CHN32" with expression '<code>0x120C</code>', CType: int */
  public static final int AL_FORMAT_51CHN32 = 0x120c;
  /** Define "AL_FORMAT_MONO_MULAW" with expression '<code>0x10014</code>', CType: int */
  public static final int AL_FORMAT_MONO_MULAW = 0x10014;
  /** Define "AL_EAXREVERB_GAINLF" with expression '<code>0x0005</code>', CType: int */
  public static final int AL_EAXREVERB_GAINLF = 0x5;
  /** Define "AL_EVENT_TYPE_BUFFER_COMPLETED_SOFT" with expression '<code>0x19A4</code>', CType: int */
  public static final int AL_EVENT_TYPE_BUFFER_COMPLETED_SOFT = 0x19a4;
  /** Define "AL_6POINT1_8_SOFT" with expression '<code>0x120D</code>', CType: int */
  public static final int AL_6POINT1_8_SOFT = 0x120d;
  /** Define "AL_FLANGER_WAVEFORM_TRIANGLE" with expression '<code>(1)</code>', CType: int */
  public static final int AL_FLANGER_WAVEFORM_TRIANGLE = ( 0x1 );
  /** Define "AL_EFFECT_ECHO" with expression '<code>0x0004</code>', CType: int */
  public static final int AL_EFFECT_ECHO = 0x4;
  /** Define "AL_EAXREVERB_DEFAULT_LATE_REVERB_DELAY" with expression '<code>(0.011f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_LATE_REVERB_DELAY = ( 0.011f );
  /** Define "AL_FORMAT_VORBIS_EXT" with expression '<code>0x10003</code>', CType: int */
  public static final int AL_FORMAT_VORBIS_EXT = 0x10003;
  /** Define "AL_EAXREVERB_MAX_HFREFERENCE" with expression '<code>(20000.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_HFREFERENCE = ( 20000.0f );
  /** Define "AL_REVERB_MIN_GAINHF" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_REVERB_MIN_GAINHF = ( 0.0 );
  /** Define "AL_DIRECT_CHANNELS_SOFT" with expression '<code>0x1033</code>', CType: int */
  public static final int AL_DIRECT_CHANNELS_SOFT = 0x1033;
  /** Define "AL_STEREO_SOFT" with expression '<code>0x1501</code>', CType: int */
  public static final int AL_STEREO_SOFT = 0x1501;
  /** Define "AL_EXT_source_distance_model" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_source_distance_model = 0x1;
  /** Define "AL_RING_MODULATOR_HIGHPASS_CUTOFF" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_RING_MODULATOR_HIGHPASS_CUTOFF = 0x2;
  /** Define "AL_VOCAL_MORPHER_WAVEFORM_SINUSOID" with expression '<code>(0)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_WAVEFORM_SINUSOID = ( 0x0 );
  /** Define "AL_EAXREVERB_LFREFERENCE" with expression '<code>0x0015</code>', CType: int */
  public static final int AL_EAXREVERB_LFREFERENCE = 0x15;
  /** Define "AL_BANDPASS_DEFAULT_GAINLF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_BANDPASS_DEFAULT_GAINLF = ( 1.0f );
  /** Define "AL_EAXREVERB_MAX_AIR_ABSORPTION_GAINHF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_AIR_ABSORPTION_GAINHF = ( 1.0f );
  /** Define "AL_MAX_DIRECT_FILTER_GAINHF_AUTO" with expression '<code>1</code>', CType: int */
  public static final int AL_MAX_DIRECT_FILTER_GAINHF_AUTO = 0x1;
  /** Define "AL_EAXREVERB_MIN_ECHO_DEPTH" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_ECHO_DEPTH = ( 0.0 );
  /** Define "AL_REVERB_DECAY_HFLIMIT" with expression '<code>0x000D</code>', CType: int */
  public static final int AL_REVERB_DECAY_HFLIMIT = 0xd;
  /** Define "AL_AUTOWAH_PEAK_GAIN" with expression '<code>0x0004</code>', CType: int */
  public static final int AL_AUTOWAH_PEAK_GAIN = 0x4;
  /** Define "AL_REVERB_MIN_GAIN" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_REVERB_MIN_GAIN = ( 0.0 );
  /** Define "AL_EAXREVERB_DEFAULT_GAINHF" with expression '<code>(0.89f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_GAINHF = ( 0.89f );
  /** Define "AL_FLANGER_PHASE" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_FLANGER_PHASE = 0x2;
  /** Define "AL_FLANGER_MIN_DEPTH" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_FLANGER_MIN_DEPTH = ( 0.0 );
  /** Define "AL_EAXREVERB_MAX_GAINLF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_GAINLF = ( 1.0f );
  /** Define "AL_VOCAL_MORPHER_MIN_PHONEMEB_COARSE_TUNING" with expression '<code>(-24)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_MIN_PHONEMEB_COARSE_TUNING = ( - 0x18 );
  /** Define "AL_EQUALIZER_DEFAULT_MID1_CENTER" with expression '<code>(500.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_DEFAULT_MID1_CENTER = ( 500.0f );
  /** Define "ALC_CHAN_PCM_LOKI" with expression '<code>0x500002</code>', CType: int */
  public static final int ALC_CHAN_PCM_LOKI = 0x500002;
  /** Define "AL_VOCAL_MORPHER_PHONEMEA" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEMEA = 0x1;
  /** Define "AL_FORMAT_QUAD8_LOKI" with expression '<code>0x10004</code>', CType: int */
  public static final int AL_FORMAT_QUAD8_LOKI = 0x10004;
  /** Define "AL_REVERB_DEFAULT_DENSITY" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_REVERB_DEFAULT_DENSITY = ( 1.0f );
  /** Define "AL_CONE_OUTER_GAINHF" with expression '<code>0x20009</code>', CType: int */
  public static final int AL_CONE_OUTER_GAINHF = 0x20009;
  /** Define "AL_VOCAL_MORPHER_PHONEMEB" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEMEB = 0x3;
  /** Define "AL_FLANGER_DEFAULT_WAVEFORM" with expression '<code>(1)</code>', CType: int */
  public static final int AL_FLANGER_DEFAULT_WAVEFORM = ( 0x1 );
  /** Define "AL_VOCAL_MORPHER_WAVEFORM_TRIANGLE" with expression '<code>(1)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_WAVEFORM_TRIANGLE = ( 0x1 );
  /** Define "AL_REVERB_MIN_REFLECTIONS_GAIN" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_REVERB_MIN_REFLECTIONS_GAIN = ( 0.0 );
  /** Define "AL_SOFT_buffer_samples" with expression '<code>1</code>', CType: int */
  public static final int AL_SOFT_buffer_samples = 0x1;
  /** Define "AL_EQUALIZER_MIN_MID2_GAIN" with expression '<code>(0.126f)</code>', CType: float */
  public static final float AL_EQUALIZER_MIN_MID2_GAIN = ( 0.126f );
  /** Define "AL_EAXREVERB_DEFAULT_DECAY_HFRATIO" with expression '<code>(0.83f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_DECAY_HFRATIO = ( 0.83f );
  /** Define "AL_AUTOWAH_RESONANCE" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_AUTOWAH_RESONANCE = 0x3;
  /** Define "AL_FORMAT_51CHN16" with expression '<code>0x120B</code>', CType: int */
  public static final int AL_FORMAT_51CHN16 = 0x120b;
  /** Define "AL_FORMAT_QUAD8" with expression '<code>0x1204</code>', CType: int */
  public static final int AL_FORMAT_QUAD8 = 0x1204;
  /** Define "AL_AUTOWAH_DEFAULT_RELEASE_TIME" with expression '<code>(0.06f)</code>', CType: float */
  public static final float AL_AUTOWAH_DEFAULT_RELEASE_TIME = ( 0.06f );
  /** Define "AL_VOCAL_MORPHER_MIN_PHONEMEA_COARSE_TUNING" with expression '<code>(-24)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_MIN_PHONEMEA_COARSE_TUNING = ( - 0x18 );
  /** Define "AL_EAXREVERB_LATE_REVERB_DELAY" with expression '<code>0x000D</code>', CType: int */
  public static final int AL_EAXREVERB_LATE_REVERB_DELAY = 0xd;
  /** Define "AL_EAXREVERB_GAINHF" with expression '<code>0x0004</code>', CType: int */
  public static final int AL_EAXREVERB_GAINHF = 0x4;
  /** Define "AL_PITCH_SHIFTER_FINE_TUNE" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_PITCH_SHIFTER_FINE_TUNE = 0x2;
  /** Define "AL_FORMAT_71CHN8" with expression '<code>0x1210</code>', CType: int */
  public static final int AL_FORMAT_71CHN8 = 0x1210;
  /** Define "AL_REVERB_MIN_DECAY_HFRATIO" with expression '<code>(0.1f)</code>', CType: float */
  public static final float AL_REVERB_MIN_DECAY_HFRATIO = ( 0.1f );
  /** Define "AL_CHORUS_MAX_DEPTH" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_CHORUS_MAX_DEPTH = ( 1.0f );
  /** Define "AL_EAXREVERB_DEFAULT_DECAY_TIME" with expression '<code>(1.49f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_DECAY_TIME = ( 1.49f );
  /** Define "AL_REVERB_MIN_DECAY_HFLIMIT" with expression '<code>0</code>', CType: int */
  public static final int AL_REVERB_MIN_DECAY_HFLIMIT = 0x0;
  /** Define "AL_FORMAT_71CHN16" with expression '<code>0x1211</code>', CType: int */
  public static final int AL_FORMAT_71CHN16 = 0x1211;
  /** Define "AL_EAXREVERB_DEFAULT_AIR_ABSORPTION_GAINHF" with expression '<code>(0.994f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_AIR_ABSORPTION_GAINHF = ( 0.994f );
  /** Define "AL_VOCAL_MORPHER_DEFAULT_WAVEFORM" with expression '<code>(0)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_DEFAULT_WAVEFORM = ( 0x0 );
  /** Define "AL_EQUALIZER_MIN_LOW_CUTOFF" with expression '<code>(50.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_MIN_LOW_CUTOFF = ( 50.0f );
  /** Define "AL_FLOAT_SOFT" with expression '<code>0x1406</code>', CType: int */
  public static final int AL_FLOAT_SOFT = 0x1406;
  /** Define "AL_HIGHPASS_MAX_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_HIGHPASS_MAX_GAIN = ( 1.0f );
  /** Define "AL_CHORUS_DEFAULT_DELAY" with expression '<code>(0.016f)</code>', CType: float */
  public static final float AL_CHORUS_DEFAULT_DELAY = ( 0.016f );
  /** Define "AL_EVENT_CALLBACK_FUNCTION_SOFT" with expression '<code>0x19A2</code>', CType: int */
  public static final int AL_EVENT_CALLBACK_FUNCTION_SOFT = 0x19a2;
  /** Define "AL_EQUALIZER_MAX_MID1_GAIN" with expression '<code>(7.943f)</code>', CType: float */
  public static final float AL_EQUALIZER_MAX_MID1_GAIN = ( 7.943f );
  /** Define "AL_DISTORTION_DEFAULT_EQBANDWIDTH" with expression '<code>(3600.0f)</code>', CType: float */
  public static final float AL_DISTORTION_DEFAULT_EQBANDWIDTH = ( 3600.0f );
  /** Define "AL_SHORT_SOFT" with expression '<code>0x1402</code>', CType: int */
  public static final int AL_SHORT_SOFT = 0x1402;
  /** Define "AL_REVERB_REFLECTIONS_GAIN" with expression '<code>0x0007</code>', CType: int */
  public static final int AL_REVERB_REFLECTIONS_GAIN = 0x7;
  /** Define "AL_EAXREVERB_REFLECTIONS_GAIN" with expression '<code>0x0009</code>', CType: int */
  public static final int AL_EAXREVERB_REFLECTIONS_GAIN = 0x9;
  /** Define "AL_FORMAT_MONO_IMA4" with expression '<code>0x1300</code>', CType: int */
  public static final int AL_FORMAT_MONO_IMA4 = 0x1300;
  /** Define "AL_EAXREVERB_ROOM_ROLLOFF_FACTOR" with expression '<code>0x0016</code>', CType: int */
  public static final int AL_EAXREVERB_ROOM_ROLLOFF_FACTOR = 0x16;
  /** Define "AL_EAXREVERB_MIN_ECHO_TIME" with expression '<code>(0.075f)</code>', CType: float */
  public static final float AL_EAXREVERB_MIN_ECHO_TIME = ( 0.075f );
  /** Define "AL_ECHO_DEFAULT_DAMPING" with expression '<code>(0.5f)</code>', CType: float */
  public static final float AL_ECHO_DEFAULT_DAMPING = ( 0.5f );
  /** Define "AL_FLANGER_WAVEFORM" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_FLANGER_WAVEFORM = 0x1;
  /** Define "AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING = 0x2;
  /** Define "AL_EFFECT_DISTORTION" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_EFFECT_DISTORTION = 0x3;
  /** Define "AL_VOCAL_MORPHER_DEFAULT_RATE" with expression '<code>(1.41f)</code>', CType: float */
  public static final float AL_VOCAL_MORPHER_DEFAULT_RATE = ( 1.41f );
  /** Define "ALC_EFX_MINOR_VERSION" with expression '<code>0x20002</code>', CType: int */
  public static final int ALC_EFX_MINOR_VERSION = 0x20002;
  /** Define "AL_REVERB_MIN_LATE_REVERB_DELAY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_REVERB_MIN_LATE_REVERB_DELAY = ( 0.0 );
  /** Define "AL_EAXREVERB_MIN_DECAY_LFRATIO" with expression '<code>(0.1f)</code>', CType: float */
  public static final float AL_EAXREVERB_MIN_DECAY_LFRATIO = ( 0.1f );
  /** Define "AL_ECHO_MAX_DELAY" with expression '<code>(0.207f)</code>', CType: float */
  public static final float AL_ECHO_MAX_DELAY = ( 0.207f );
  /** Define "AL_EAXREVERB_DEFAULT_DENSITY" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_DENSITY = ( 1.0f );
  /** Define "AL_AUTOWAH_MIN_RESONANCE" with expression '<code>(2.0f)</code>', CType: float */
  public static final float AL_AUTOWAH_MIN_RESONANCE = ( 2.0f );
  /** Define "AL_RING_MODULATOR_WAVEFORM" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_RING_MODULATOR_WAVEFORM = 0x3;
  /** Define "AL_LOKI_IMA_ADPCM_format" with expression '<code>1</code>', CType: int */
  public static final int AL_LOKI_IMA_ADPCM_format = 0x1;
  /** Define "AL_EAXREVERB_MAX_LFREFERENCE" with expression '<code>(1000.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_LFREFERENCE = ( 1000.0f );
  /** Define "AL_EQUALIZER_MIN_MID2_CENTER" with expression '<code>(1000.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_MIN_MID2_CENTER = ( 1000.0f );
  /** Define "AL_DEFAULT_AUXILIARY_SEND_FILTER_GAINHF_AUTO" with expression '<code>1</code>', CType: int */
  public static final int AL_DEFAULT_AUXILIARY_SEND_FILTER_GAINHF_AUTO = 0x1;
  /** Define "AL_ECHO_DEFAULT_SPREAD" with expression '<code>(-1.0f)</code>', CType: float */
  public static final float AL_ECHO_DEFAULT_SPREAD = ( - 1.0f );
  /** Define "ALC_BYTE_SOFT" with expression '<code>0x1400</code>', CType: int */
  public static final int ALC_BYTE_SOFT = 0x1400;
  /** Define "ALC_CONNECTED" with expression '<code>0x313</code>', CType: int */
  public static final int ALC_CONNECTED = 0x313;
  /** Define "AL_REVERB_MIN_ROOM_ROLLOFF_FACTOR" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_REVERB_MIN_ROOM_ROLLOFF_FACTOR = ( 0.0 );
  /** Define "AL_EVENT_TYPE_DISCONNECTED_SOFT" with expression '<code>0x19A6</code>', CType: int */
  public static final int AL_EVENT_TYPE_DISCONNECTED_SOFT = 0x19a6;
  /** Define "AL_FLANGER_FEEDBACK" with expression '<code>0x0005</code>', CType: int */
  public static final int AL_FLANGER_FEEDBACK = 0x5;
  /** Define "AL_EFFECTSLOT_EFFECT" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_EFFECTSLOT_EFFECT = 0x1;
  /** Define "AL_REVERB_MAX_REFLECTIONS_GAIN" with expression '<code>(3.16f)</code>', CType: float */
  public static final float AL_REVERB_MAX_REFLECTIONS_GAIN = ( 3.16f );
  /** Define "AL_ECHO_DEFAULT_DELAY" with expression '<code>(0.1f)</code>', CType: float */
  public static final float AL_ECHO_DEFAULT_DELAY = ( 0.1f );
  /** Define "AL_EAXREVERB_LATE_REVERB_PAN" with expression '<code>0x000E</code>', CType: int */
  public static final int AL_EAXREVERB_LATE_REVERB_PAN = 0xe;
  /** Define "AL_EAXREVERB_MAX_DECAY_HFLIMIT" with expression '<code>1</code>', CType: int */
  public static final int AL_EAXREVERB_MAX_DECAY_HFLIMIT = 0x1;
  /** Define "AL_QUAD16_SOFT" with expression '<code>0x1205</code>', CType: int */
  public static final int AL_QUAD16_SOFT = 0x1205;
  /** Define "AL_REVERB_DEFAULT_DECAY_TIME" with expression '<code>(1.49f)</code>', CType: float */
  public static final float AL_REVERB_DEFAULT_DECAY_TIME = ( 1.49f );
  /** Define "AL_SOFT_source_latency" with expression '<code>1</code>', CType: int */
  public static final int AL_SOFT_source_latency = 0x1;
  /** Define "AL_MIN_AUXILIARY_SEND_FILTER_GAIN_AUTO" with expression '<code>0</code>', CType: int */
  public static final int AL_MIN_AUXILIARY_SEND_FILTER_GAIN_AUTO = 0x0;
  /** Define "AL_SOFT_buffer_sub_data" with expression '<code>1</code>', CType: int */
  public static final int AL_SOFT_buffer_sub_data = 0x1;
  /** Define "AL_FORMAT_71CHN32" with expression '<code>0x1212</code>', CType: int */
  public static final int AL_FORMAT_71CHN32 = 0x1212;
  /** Define "AL_REVERB_MIN_DIFFUSION" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_REVERB_MIN_DIFFUSION = ( 0.0 );
  /** Define "AL_EFFECT_RING_MODULATOR" with expression '<code>0x0009</code>', CType: int */
  public static final int AL_EFFECT_RING_MODULATOR = 0x9;
  /** Define "AL_REAR_SOFT" with expression '<code>0x1502</code>', CType: int */
  public static final int AL_REAR_SOFT = 0x1502;
  /** Define "AL_DISTORTION_MAX_EQCENTER" with expression '<code>(24000.0f)</code>', CType: float */
  public static final float AL_DISTORTION_MAX_EQCENTER = ( 24000.0f );
  /** Define "AL_EFFECTSLOT_NULL" with expression '<code>0x0000</code>', CType: int */
  public static final int AL_EFFECTSLOT_NULL = 0x0;
  /** Define "AL_CHORUS_DEFAULT_WAVEFORM" with expression '<code>(1)</code>', CType: int */
  public static final int AL_CHORUS_DEFAULT_WAVEFORM = ( 0x1 );
  /** Define "AL_EXT_ALAW" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_ALAW = 0x1;
  /** Define "AL_EAXREVERB_MAX_REFLECTIONS_DELAY" with expression '<code>(0.3f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_REFLECTIONS_DELAY = ( 0.3f );
  /** Define "AL_EFFECT_FLANGER" with expression '<code>0x0005</code>', CType: int */
  public static final int AL_EFFECT_FLANGER = 0x5;
  /** Define "AL_EQUALIZER_MAX_HIGH_GAIN" with expression '<code>(7.943f)</code>', CType: float */
  public static final float AL_EQUALIZER_MAX_HIGH_GAIN = ( 7.943f );
  /** Define "AL_LOWPASS_MIN_GAIN" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_LOWPASS_MIN_GAIN = ( 0.0 );
  /** Define "AL_DISTORTION_EQCENTER" with expression '<code>0x0004</code>', CType: int */
  public static final int AL_DISTORTION_EQCENTER = 0x4;
  /** Define "AL_BYTE_LENGTH_SOFT" with expression '<code>0x2009</code>', CType: int */
  public static final int AL_BYTE_LENGTH_SOFT = 0x2009;
  /** Define "AL_RING_MODULATOR_SQUARE" with expression '<code>(2)</code>', CType: int */
  public static final int AL_RING_MODULATOR_SQUARE = ( 0x2 );
  /** Define "AL_FILTER_BANDPASS" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_FILTER_BANDPASS = 0x3;
  /** Define "AL_REVERB_MIN_AIR_ABSORPTION_GAINHF" with expression '<code>(0.892f)</code>', CType: float */
  public static final float AL_REVERB_MIN_AIR_ABSORPTION_GAINHF = ( 0.892f );
  /** Define "AL_EQUALIZER_MIN_LOW_GAIN" with expression '<code>(0.126f)</code>', CType: float */
  public static final float AL_EQUALIZER_MIN_LOW_GAIN = ( 0.126f );
  /** Define "AL_FLANGER_DELAY" with expression '<code>0x0006</code>', CType: int */
  public static final int AL_FLANGER_DELAY = 0x6;
  /** Define "AL_5POINT1_16_SOFT" with expression '<code>0x120B</code>', CType: int */
  public static final int AL_5POINT1_16_SOFT = 0x120b;
  /** Define "AL_LOWPASS_GAINHF" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_LOWPASS_GAINHF = 0x2;
  /** Define "AL_VOCAL_MORPHER_MIN_WAVEFORM" with expression '<code>(0)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_MIN_WAVEFORM = ( 0x0 );
  /** Define "AL_SOFT_direct_channels" with expression '<code>1</code>', CType: int */
  public static final int AL_SOFT_direct_channels = 0x1;
  /** Define "AL_DISTORTION_LOWPASS_CUTOFF" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_DISTORTION_LOWPASS_CUTOFF = 0x3;
  /** Define "AL_AUTOWAH_MIN_ATTACK_TIME" with expression '<code>(0.0001f)</code>', CType: float */
  public static final float AL_AUTOWAH_MIN_ATTACK_TIME = ( 1.0E-4f );
  /** Define "AL_EAXREVERB_MIN_LATE_REVERB_DELAY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_LATE_REVERB_DELAY = ( 0.0 );
  /** Define "AL_EFFECT_AUTOWAH" with expression '<code>0x000A</code>', CType: int */
  public static final int AL_EFFECT_AUTOWAH = 0xa;
  /** Define "AL_FORMAT_REAR_MULAW" with expression '<code>0x10022</code>', CType: int */
  public static final int AL_FORMAT_REAR_MULAW = 0x10022;
  /** Define "AL_CHORUS_MIN_DEPTH" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_CHORUS_MIN_DEPTH = ( 0.0 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_IY" with expression '<code>(12)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_IY = ( 0xc );
  /** Define "AL_EQUALIZER_MIN_HIGH_GAIN" with expression '<code>(0.126f)</code>', CType: float */
  public static final float AL_EQUALIZER_MIN_HIGH_GAIN = ( 0.126f );
  /** Define "AL_FLANGER_MAX_PHASE" with expression '<code>(180)</code>', CType: int */
  public static final int AL_FLANGER_MAX_PHASE = ( 0xb4 );
  /** Define "AL_REVERB_DEFAULT_DIFFUSION" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_REVERB_DEFAULT_DIFFUSION = ( 1.0f );
  /** Define "ALC_EXT_DEDICATED" with expression '<code>1</code>', CType: int */
  public static final int ALC_EXT_DEDICATED = 0x1;
  /** Define "AL_VOCAL_MORPHER_PHONEME_IH" with expression '<code>(11)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_IH = ( 0xb );
  /** Define "AL_DISTORTION_MIN_EQBANDWIDTH" with expression '<code>(80.0f)</code>', CType: float */
  public static final float AL_DISTORTION_MIN_EQBANDWIDTH = ( 80.0f );
  /** Define "AL_EVENT_CALLBACK_USER_PARAM_SOFT" with expression '<code>0x19A3</code>', CType: int */
  public static final int AL_EVENT_CALLBACK_USER_PARAM_SOFT = 0x19a3;
  /** Define "AL_REAR8_SOFT" with expression '<code>0x1207</code>', CType: int */
  public static final int AL_REAR8_SOFT = 0x1207;
  /** Define "AL_EAXREVERB_DEFAULT_HFREFERENCE" with expression '<code>(5000.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_HFREFERENCE = ( 5000.0f );
  /** Define "AL_PITCH_SHIFTER_MIN_COARSE_TUNE" with expression '<code>(-12)</code>', CType: int */
  public static final int AL_PITCH_SHIFTER_MIN_COARSE_TUNE = ( - 0xc );
  /** Define "AL_FORMAT_QUAD16_LOKI" with expression '<code>0x10005</code>', CType: int */
  public static final int AL_FORMAT_QUAD16_LOKI = 0x10005;
  /** Define "AL_EQUALIZER_MIN_MID1_CENTER" with expression '<code>(200.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_MIN_MID1_CENTER = ( 200.0f );
  /** Define "AL_EQUALIZER_DEFAULT_MID2_WIDTH" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_DEFAULT_MID2_WIDTH = ( 1.0f );
  /** Define "AL_7POINT1_SOFT" with expression '<code>0x1506</code>', CType: int */
  public static final int AL_7POINT1_SOFT = 0x1506;
  /** Define "AL_UNSIGNED_BYTE3_SOFT" with expression '<code>0x1409</code>', CType: int */
  public static final int AL_UNSIGNED_BYTE3_SOFT = 0x1409;
  /** Define "AL_SOURCE_RADIUS" with expression '<code>0x1031</code>', CType: int */
  public static final int AL_SOURCE_RADIUS = 0x1031;
  /** Define "AL_FORMAT_QUAD16" with expression '<code>0x1205</code>', CType: int */
  public static final int AL_FORMAT_QUAD16 = 0x1205;
  /** Define "AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING" with expression '<code>0x0004</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING = 0x4;
  /** Define "AL_FREQUENCY_SHIFTER_MAX_FREQUENCY" with expression '<code>(24000.0f)</code>', CType: float */
  public static final float AL_FREQUENCY_SHIFTER_MAX_FREQUENCY = ( 24000.0f );
  /** Define "AL_FREQUENCY_SHIFTER_FREQUENCY" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_FREQUENCY = 0x1;
  /** Define "AL_DISTORTION_DEFAULT_EDGE" with expression '<code>(0.2f)</code>', CType: float */
  public static final float AL_DISTORTION_DEFAULT_EDGE = ( 0.2f );
  /** Define "AL_MIN_DIRECT_FILTER_GAINHF_AUTO" with expression '<code>0</code>', CType: int */
  public static final int AL_MIN_DIRECT_FILTER_GAINHF_AUTO = 0x0;
  /** Define "AL_REVERB_DEFAULT_LATE_REVERB_GAIN" with expression '<code>(1.26f)</code>', CType: float */
  public static final float AL_REVERB_DEFAULT_LATE_REVERB_GAIN = ( 1.26f );
  /** Define "ALC_CHAN_CD_LOKI" with expression '<code>0x500003</code>', CType: int */
  public static final int ALC_CHAN_CD_LOKI = 0x500003;
  /** Define "AL_FLANGER_MIN_WAVEFORM" with expression '<code>(0)</code>', CType: int */
  public static final int AL_FLANGER_MIN_WAVEFORM = ( 0x0 );
  /** Define "AL_EQUALIZER_MAX_LOW_CUTOFF" with expression '<code>(800.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_MAX_LOW_CUTOFF = ( 800.0f );
  /** Define "AL_REVERB_MAX_REFLECTIONS_DELAY" with expression '<code>(0.3f)</code>', CType: float */
  public static final float AL_REVERB_MAX_REFLECTIONS_DELAY = ( 0.3f );
  /** Define "AL_FORMAT_STEREO_MULAW_EXT" with expression '<code>0x10015</code>', CType: int */
  public static final int AL_FORMAT_STEREO_MULAW_EXT = 0x10015;
  /** Define "AL_FORMAT_MONO_DOUBLE_EXT" with expression '<code>0x10012</code>', CType: int */
  public static final int AL_FORMAT_MONO_DOUBLE_EXT = 0x10012;
  /** Define "AL_REVERB_MAX_AIR_ABSORPTION_GAINHF" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_REVERB_MAX_AIR_ABSORPTION_GAINHF = ( 1.0f );
  /** Define "AL_DISTORTION_GAIN" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_DISTORTION_GAIN = 0x2;
  /** Define "AL_FLANGER_RATE" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_FLANGER_RATE = 0x3;
  /** Define "AL_COMPRESSOR_MAX_ONOFF" with expression '<code>(1)</code>', CType: int */
  public static final int AL_COMPRESSOR_MAX_ONOFF = ( 0x1 );
  /** Define "AL_ECHO_DAMPING" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_ECHO_DAMPING = 0x3;
  /** Define "ALC_EXT_disconnect" with expression '<code>1</code>', CType: int */
  public static final int ALC_EXT_disconnect = 0x1;
  /** Define "AL_CHORUS_DELAY" with expression '<code>0x0006</code>', CType: int */
  public static final int AL_CHORUS_DELAY = 0x6;
  /** Define "AL_FORMAT_MONO_FLOAT32" with expression '<code>0x10010</code>', CType: int */
  public static final int AL_FORMAT_MONO_FLOAT32 = 0x10010;
  /** Define "AL_AUTOWAH_DEFAULT_RESONANCE" with expression '<code>(1000.0f)</code>', CType: float */
  public static final float AL_AUTOWAH_DEFAULT_RESONANCE = ( 1000.0f );
  /** Define "AL_CHORUS_MIN_FEEDBACK" with expression '<code>(-1.0f)</code>', CType: float */
  public static final float AL_CHORUS_MIN_FEEDBACK = ( - 1.0f );
  /** Define "AL_EQUALIZER_MID2_WIDTH" with expression '<code>0x0008</code>', CType: int */
  public static final int AL_EQUALIZER_MID2_WIDTH = 0x8;
  /** Define "AL_EAXREVERB_MIN_LATE_REVERB_GAIN" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_LATE_REVERB_GAIN = ( 0.0 );
  /** Define "AL_VOCAL_MORPHER_RATE" with expression '<code>0x0006</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_RATE = 0x6;
  /** Define "AL_REVERB_MAX_DECAY_TIME" with expression '<code>(20.0f)</code>', CType: float */
  public static final float AL_REVERB_MAX_DECAY_TIME = ( 20.0f );
  /** Define "AL_6POINT1_32F_SOFT" with expression '<code>0x120F</code>', CType: int */
  public static final int AL_6POINT1_32F_SOFT = 0x120f;
  /** Define "AL_FORMAT_REAR16" with expression '<code>0x1208</code>', CType: int */
  public static final int AL_FORMAT_REAR16 = 0x1208;
  /** Define "AL_LOWPASS_MIN_GAINHF" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_LOWPASS_MIN_GAINHF = ( 0.0 );
  /** Define "AL_DISTORTION_DEFAULT_EQCENTER" with expression '<code>(3600.0f)</code>', CType: float */
  public static final float AL_DISTORTION_DEFAULT_EQCENTER = ( 3600.0f );
  /** Define "AL_FORMAT_MONO_MULAW_EXT" with expression '<code>0x10014</code>', CType: int */
  public static final int AL_FORMAT_MONO_MULAW_EXT = 0x10014;
  /** Define "AL_EAXREVERB_MAX_ROOM_ROLLOFF_FACTOR" with expression '<code>(10.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_ROOM_ROLLOFF_FACTOR = ( 10.0f );
  /** Define "AL_EXT_MCFORMATS" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_MCFORMATS = 0x1;
  /** Define "AL_EFFECT_LAST_PARAMETER" with expression '<code>0x8000</code>', CType: int */
  public static final int AL_EFFECT_LAST_PARAMETER = 0x8000;
  /** Define "AL_RING_MODULATOR_DEFAULT_FREQUENCY" with expression '<code>(440.0f)</code>', CType: float */
  public static final float AL_RING_MODULATOR_DEFAULT_FREQUENCY = ( 440.0f );
  /** Define "AL_EQUALIZER_MAX_LOW_GAIN" with expression '<code>(7.943f)</code>', CType: float */
  public static final float AL_EQUALIZER_MAX_LOW_GAIN = ( 7.943f );
  /** Define "AL_EAXREVERB_DECAY_HFRATIO" with expression '<code>0x0007</code>', CType: int */
  public static final int AL_EAXREVERB_DECAY_HFRATIO = 0x7;
  /** Define "AL_EAXREVERB_DECAY_HFLIMIT" with expression '<code>0x0017</code>', CType: int */
  public static final int AL_EAXREVERB_DECAY_HFLIMIT = 0x17;
  /** Define "AL_EQUALIZER_DEFAULT_HIGH_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_DEFAULT_HIGH_GAIN = ( 1.0f );
  /** Define "AL_STEREO16_SOFT" with expression '<code>0x1103</code>', CType: int */
  public static final int AL_STEREO16_SOFT = 0x1103;
  /** Define "AL_ECHO_MAX_FEEDBACK" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_ECHO_MAX_FEEDBACK = ( 1.0f );
  /** Define "AL_LOWPASS_DEFAULT_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_LOWPASS_DEFAULT_GAIN = ( 1.0f );
  /** Define "AL_EXT_STATIC_BUFFER" with expression '<code>1</code>', CType: int */
  public static final int AL_EXT_STATIC_BUFFER = 0x1;
  /** Define "AL_BANDPASS_MIN_GAIN" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_BANDPASS_MIN_GAIN = ( 0.0 );
  /** Define "AL_DEFAULT_ROOM_ROLLOFF_FACTOR" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_DEFAULT_ROOM_ROLLOFF_FACTOR = ( 0.0 );
  /** Define "AL_FORMAT_61CHN_MULAW" with expression '<code>0x10024</code>', CType: int */
  public static final int AL_FORMAT_61CHN_MULAW = 0x10024;
  /** Define "AL_ECHO_DEFAULT_FEEDBACK" with expression '<code>(0.5f)</code>', CType: float */
  public static final float AL_ECHO_DEFAULT_FEEDBACK = ( 0.5f );
  /** Define "AL_FREQUENCY_SHIFTER_LEFT_DIRECTION" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_LEFT_DIRECTION = 0x2;
  /** Define "AL_DISTORTION_EDGE" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_DISTORTION_EDGE = 0x1;
  /** Define "AL_FORMAT_71CHN_MULAW" with expression '<code>0x10025</code>', CType: int */
  public static final int AL_FORMAT_71CHN_MULAW = 0x10025;
  /** Define "ALC_FORMAT_CHANNELS_SOFT" with expression '<code>0x1990</code>', CType: int */
  public static final int ALC_FORMAT_CHANNELS_SOFT = 0x1990;
  /** Define "AL_EAXREVERB_MIN_REFLECTIONS_DELAY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_REFLECTIONS_DELAY = ( 0.0 );
  /** Define "ALC_EFX_MAJOR_VERSION" with expression '<code>0x20001</code>', CType: int */
  public static final int ALC_EFX_MAJOR_VERSION = 0x20001;
  /** Define "AL_EQUALIZER_MIN_MID1_GAIN" with expression '<code>(0.126f)</code>', CType: float */
  public static final float AL_EQUALIZER_MIN_MID1_GAIN = ( 0.126f );
  /** Define "AL_EQUALIZER_MAX_MID1_CENTER" with expression '<code>(3000.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_MAX_MID1_CENTER = ( 3000.0f );
  /** Define "AL_EFFECT_TYPE" with expression '<code>0x8001</code>', CType: int */
  public static final int AL_EFFECT_TYPE = 0x8001;
  /** Define "AL_REVERB_MAX_DENSITY" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_REVERB_MAX_DENSITY = ( 1.0f );
  /** Define "AL_ROOM_ROLLOFF_FACTOR" with expression '<code>0x20008</code>', CType: int */
  public static final int AL_ROOM_ROLLOFF_FACTOR = 0x20008;
  /** Define "AL_EAXREVERB_DEFAULT_LATE_REVERB_PAN_XYZ" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_DEFAULT_LATE_REVERB_PAN_XYZ = ( 0.0 );
  /** Define "AL_RING_MODULATOR_MIN_FREQUENCY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_RING_MODULATOR_MIN_FREQUENCY = ( 0.0 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_EH" with expression '<code>(9)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_EH = ( 0x9 );
  /** Define "AL_RING_MODULATOR_MAX_HIGHPASS_CUTOFF" with expression '<code>(24000.0f)</code>', CType: float */
  public static final float AL_RING_MODULATOR_MAX_HIGHPASS_CUTOFF = ( 24000.0f );
  /** Define "AL_FORMAT_REAR32" with expression '<code>0x1209</code>', CType: int */
  public static final int AL_FORMAT_REAR32 = 0x1209;
  /** Define "ALC_INT_SOFT" with expression '<code>0x1404</code>', CType: int */
  public static final int ALC_INT_SOFT = 0x1404;
  /** Define "AL_DISTORTION_MIN_EDGE" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_DISTORTION_MIN_EDGE = ( 0.0 );
  /** Define "AL_RING_MODULATOR_MAX_WAVEFORM" with expression '<code>(2)</code>', CType: int */
  public static final int AL_RING_MODULATOR_MAX_WAVEFORM = ( 0x2 );
  /** Define "AL_FORMAT_STEREO_ALAW_EXT" with expression '<code>0x10017</code>', CType: int */
  public static final int AL_FORMAT_STEREO_ALAW_EXT = 0x10017;
  /** Define "AL_VOCAL_MORPHER_PHONEME_ER" with expression '<code>(10)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_ER = ( 0xa );
  /** Define "AL_CHORUS_DEFAULT_PHASE" with expression '<code>(90)</code>', CType: int */
  public static final int AL_CHORUS_DEFAULT_PHASE = ( 0x5a );
  /** Define "AL_FLANGER_DEFAULT_PHASE" with expression '<code>(0)</code>', CType: int */
  public static final int AL_FLANGER_DEFAULT_PHASE = ( 0x0 );
  /** Define "AL_EAXREVERB_DECAY_TIME" with expression '<code>0x0006</code>', CType: int */
  public static final int AL_EAXREVERB_DECAY_TIME = 0x6;
  /** Define "AL_EQUALIZER_DEFAULT_LOW_CUTOFF" with expression '<code>(200.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_DEFAULT_LOW_CUTOFF = ( 200.0f );
  /** Define "AL_DISTORTION_MAX_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_DISTORTION_MAX_GAIN = ( 1.0f );
  /** Define "AL_7POINT1_32F_SOFT" with expression '<code>0x1212</code>', CType: int */
  public static final int AL_7POINT1_32F_SOFT = 0x1212;
  /** Define "AL_ECHO_DEFAULT_LRDELAY" with expression '<code>(0.1f)</code>', CType: float */
  public static final float AL_ECHO_DEFAULT_LRDELAY = ( 0.1f );
  /** Define "AL_EFFECT_VOCAL_MORPHER" with expression '<code>0x0007</code>', CType: int */
  public static final int AL_EFFECT_VOCAL_MORPHER = 0x7;
  /** Define "AL_REVERB_DEFAULT_AIR_ABSORPTION_GAINHF" with expression '<code>(0.994f)</code>', CType: float */
  public static final float AL_REVERB_DEFAULT_AIR_ABSORPTION_GAINHF = ( 0.994f );
  /** Define "AL_RING_MODULATOR_DEFAULT_WAVEFORM" with expression '<code>(0)</code>', CType: int */
  public static final int AL_RING_MODULATOR_DEFAULT_WAVEFORM = ( 0x0 );
  /** Define "AL_COMPRESSOR_MIN_ONOFF" with expression '<code>(0)</code>', CType: int */
  public static final int AL_COMPRESSOR_MIN_ONOFF = ( 0x0 );
  /** Define "AL_EAXREVERB_HFREFERENCE" with expression '<code>0x0014</code>', CType: int */
  public static final int AL_EAXREVERB_HFREFERENCE = 0x14;
  /** Define "AL_EAXREVERB_REFLECTIONS_PAN" with expression '<code>0x000B</code>', CType: int */
  public static final int AL_EAXREVERB_REFLECTIONS_PAN = 0xb;
  /** Define "AL_REVERB_DEFAULT_ROOM_ROLLOFF_FACTOR" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_REVERB_DEFAULT_ROOM_ROLLOFF_FACTOR = ( 0.0 );
  /** Define "AL_EAXREVERB_DEFAULT_MODULATION_TIME" with expression '<code>(0.25f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_MODULATION_TIME = ( 0.25f );
  /** Define "AL_UNSIGNED_SHORT_SOFT" with expression '<code>0x1403</code>', CType: int */
  public static final int AL_UNSIGNED_SHORT_SOFT = 0x1403;
  /** Define "AL_EAXREVERB_MAX_ECHO_DEPTH" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_ECHO_DEPTH = ( 1.0f );
  /** Define "AL_EAXREVERB_MIN_DECAY_HFRATIO" with expression '<code>(0.1f)</code>', CType: float */
  public static final float AL_EAXREVERB_MIN_DECAY_HFRATIO = ( 0.1f );
  /** Define "AL_EAXREVERB_DEFAULT_ROOM_ROLLOFF_FACTOR" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_DEFAULT_ROOM_ROLLOFF_FACTOR = ( 0.0 );
  /** Define "AL_BANDPASS_MIN_GAINHF" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_BANDPASS_MIN_GAINHF = ( 0.0 );
  /** Define "AL_ECHO_MIN_LRDELAY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_ECHO_MIN_LRDELAY = ( 0.0 );
  /** Define "AL_EAXREVERB_DEFAULT_ECHO_DEPTH" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_DEFAULT_ECHO_DEPTH = ( 0.0 );
  /** Define "AL_VOCAL_MORPHER_MIN_RATE" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_VOCAL_MORPHER_MIN_RATE = ( 0.0 );
  /** Define "AL_CHORUS_DEFAULT_DEPTH" with expression '<code>(0.1f)</code>', CType: float */
  public static final float AL_CHORUS_DEFAULT_DEPTH = ( 0.1f );
  /** Define "AL_STEREO32F_SOFT" with expression '<code>0x10011</code>', CType: int */
  public static final int AL_STEREO32F_SOFT = 0x10011;
  /** Define "AL_EAXREVERB_MIN_ROOM_ROLLOFF_FACTOR" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_ROOM_ROLLOFF_FACTOR = ( 0.0 );
  /** Define "AL_PITCH_SHIFTER_MIN_FINE_TUNE" with expression '<code>(-50)</code>', CType: int */
  public static final int AL_PITCH_SHIFTER_MIN_FINE_TUNE = ( - 0x32 );
  /** Define "AL_EAXREVERB_DEFAULT_LATE_REVERB_GAIN" with expression '<code>(1.26f)</code>', CType: float */
  public static final float AL_EAXREVERB_DEFAULT_LATE_REVERB_GAIN = ( 1.26f );
  /** Define "AL_EFFECT_PITCH_SHIFTER" with expression '<code>0x0008</code>', CType: int */
  public static final int AL_EFFECT_PITCH_SHIFTER = 0x8;
  /** Define "AL_EVENT_TYPE_SOURCE_STATE_CHANGED_SOFT" with expression '<code>0x19A5</code>', CType: int */
  public static final int AL_EVENT_TYPE_SOURCE_STATE_CHANGED_SOFT = 0x19a5;
  /** Define "AL_CHORUS_WAVEFORM_SINUSOID" with expression '<code>(0)</code>', CType: int */
  public static final int AL_CHORUS_WAVEFORM_SINUSOID = ( 0x0 );
  /** Define "AL_FORMAT_QUAD_MULAW" with expression '<code>0x10021</code>', CType: int */
  public static final int AL_FORMAT_QUAD_MULAW = 0x10021;
  /** Define "AL_EAXREVERB_MAX_REFLECTIONS_GAIN" with expression '<code>(3.16f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_REFLECTIONS_GAIN = ( 3.16f );
  /** Define "AL_BANDPASS_DEFAULT_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_BANDPASS_DEFAULT_GAIN = ( 1.0f );
  /** Define "AL_EQUALIZER_MID1_CENTER" with expression '<code>0x0004</code>', CType: int */
  public static final int AL_EQUALIZER_MID1_CENTER = 0x4;
  /** Define "AL_BANDPASS_GAINHF" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_BANDPASS_GAINHF = 0x3;
  /** Define "AL_INT_SOFT" with expression '<code>0x1404</code>', CType: int */
  public static final int AL_INT_SOFT = 0x1404;
  /** Define "AL_FREQUENCY_SHIFTER_MAX_RIGHT_DIRECTION" with expression '<code>(2)</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_MAX_RIGHT_DIRECTION = ( 0x2 );
  /** Define "AL_FORMAT_51CHN_MULAW" with expression '<code>0x10023</code>', CType: int */
  public static final int AL_FORMAT_51CHN_MULAW = 0x10023;
  /** Define "AL_AUXILIARY_SEND_FILTER" with expression '<code>0x20006</code>', CType: int */
  public static final int AL_AUXILIARY_SEND_FILTER = 0x20006;
  /** Define "AL_FREQUENCY_SHIFTER_MAX_LEFT_DIRECTION" with expression '<code>(2)</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_MAX_LEFT_DIRECTION = ( 0x2 );
  /** Define "AL_QUAD_SOFT" with expression '<code>0x1503</code>', CType: int */
  public static final int AL_QUAD_SOFT = 0x1503;
  /** Define "AL_EAXREVERB_REFLECTIONS_DELAY" with expression '<code>0x000A</code>', CType: int */
  public static final int AL_EAXREVERB_REFLECTIONS_DELAY = 0xa;
  /** Define "AL_VOCAL_MORPHER_PHONEME_Z" with expression '<code>(29)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_Z = ( 0x1d );
  /** Define "AL_VOCAL_MORPHER_PHONEME_U" with expression '<code>(4)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_U = ( 0x4 );
  /** Define "ALC_FORMAT_TYPE_SOFT" with expression '<code>0x1991</code>', CType: int */
  public static final int ALC_FORMAT_TYPE_SOFT = 0x1991;
  /** Define "AL_REVERB_MAX_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_REVERB_MAX_GAIN = ( 1.0f );
  /** Define "AL_REVERB_MAX_LATE_REVERB_GAIN" with expression '<code>(10.0f)</code>', CType: float */
  public static final float AL_REVERB_MAX_LATE_REVERB_GAIN = ( 10.0f );
  /** Define "AL_VOCAL_MORPHER_PHONEME_V" with expression '<code>(28)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_V = ( 0x1c );
  /** Define "AL_BANDPASS_GAINLF" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_BANDPASS_GAINLF = 0x2;
  /** Define "AL_ECHO_MIN_FEEDBACK" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_ECHO_MIN_FEEDBACK = ( 0.0 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_R" with expression '<code>(25)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_R = ( 0x19 );
  /** Define "ALC_EXT_EFX" with expression '<code>1</code>', CType: int */
  public static final int ALC_EXT_EFX = 0x1;
  /** Define "AL_VOCAL_MORPHER_PHONEME_S" with expression '<code>(26)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_S = ( 0x1a );
  /** Define "AL_VOCAL_MORPHER_PHONEME_T" with expression '<code>(27)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_T = ( 0x1b );
  /** Define "AL_VOCAL_MORPHER_PHONEME_M" with expression '<code>(22)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_M = ( 0x16 );
  /** Define "ALC_5POINT1_SOFT" with expression '<code>0x1504</code>', CType: int */
  public static final int ALC_5POINT1_SOFT = 0x1504;
  /** Define "AL_VOCAL_MORPHER_PHONEME_N" with expression '<code>(23)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_N = ( 0x17 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_O" with expression '<code>(3)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_O = ( 0x3 );
  /** Define "AL_EAXREVERB_DIFFUSION" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_EAXREVERB_DIFFUSION = 0x2;
  /** Define "AL_VOCAL_MORPHER_PHONEME_P" with expression '<code>(24)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_P = ( 0x18 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_I" with expression '<code>(2)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_I = ( 0x2 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_J" with expression '<code>(19)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_J = ( 0x13 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_K" with expression '<code>(20)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_K = ( 0x14 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_L" with expression '<code>(21)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_L = ( 0x15 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_E" with expression '<code>(1)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_E = ( 0x1 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_F" with expression '<code>(17)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_F = ( 0x11 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_G" with expression '<code>(18)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_G = ( 0x12 );
  /** Define "AL_AUTOWAH_MIN_RELEASE_TIME" with expression '<code>(0.0001f)</code>', CType: float */
  public static final float AL_AUTOWAH_MIN_RELEASE_TIME = ( 1.0E-4f );
  /** Define "AL_VOCAL_MORPHER_PHONEME_A" with expression '<code>(0)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_A = ( 0x0 );
  /** Define "AL_CHORUS_RATE" with expression '<code>0x0003</code>', CType: int */
  public static final int AL_CHORUS_RATE = 0x3;
  /** Define "AL_VOCAL_MORPHER_PHONEME_B" with expression '<code>(15)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_B = ( 0xf );
  /** Define "AL_PITCH_SHIFTER_COARSE_TUNE" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_PITCH_SHIFTER_COARSE_TUNE = 0x1;
  /** Define "AL_FLANGER_DEFAULT_DELAY" with expression '<code>(0.002f)</code>', CType: float */
  public static final float AL_FLANGER_DEFAULT_DELAY = ( 0.002f );
  /** Define "AL_VOCAL_MORPHER_PHONEME_D" with expression '<code>(16)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_D = ( 0x10 );
  /** Define "AL_BYTE3_SOFT" with expression '<code>0x1408</code>', CType: int */
  public static final int AL_BYTE3_SOFT = 0x1408;
  /** Define "AL_MONO8_SOFT" with expression '<code>0x1100</code>', CType: int */
  public static final int AL_MONO8_SOFT = 0x1100;
  /** Define "AL_REVERB_DEFAULT_REFLECTIONS_DELAY" with expression '<code>(0.007f)</code>', CType: float */
  public static final float AL_REVERB_DEFAULT_REFLECTIONS_DELAY = ( 0.007f );
  /** Define "AL_EAXREVERB_MIN_HFREFERENCE" with expression '<code>(1000.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MIN_HFREFERENCE = ( 1000.0f );
  /** Define "AL_EQUALIZER_MIN_MID2_WIDTH" with expression '<code>(0.01f)</code>', CType: float */
  public static final float AL_EQUALIZER_MIN_MID2_WIDTH = ( 0.01f );
  /** Define "AL_ECHO_FEEDBACK" with expression '<code>0x0004</code>', CType: int */
  public static final int AL_ECHO_FEEDBACK = 0x4;
  /** Define "AL_PITCH_SHIFTER_DEFAULT_FINE_TUNE" with expression '<code>(0)</code>', CType: int */
  public static final int AL_PITCH_SHIFTER_DEFAULT_FINE_TUNE = ( 0x0 );
  /** Define "AL_VOCAL_MORPHER_PHONEME_AE" with expression '<code>(6)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_AE = ( 0x6 );
  /** Define "AL_MIN_CONE_OUTER_GAINHF" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_MIN_CONE_OUTER_GAINHF = ( 0.0 );
  /** Define "ALC_UNSIGNED_BYTE_SOFT" with expression '<code>0x1401</code>', CType: int */
  public static final int ALC_UNSIGNED_BYTE_SOFT = 0x1401;
  /** Define "AL_FLANGER_MAX_WAVEFORM" with expression '<code>(1)</code>', CType: int */
  public static final int AL_FLANGER_MAX_WAVEFORM = ( 0x1 );
  /** Define "AL_FILTER_FIRST_PARAMETER" with expression '<code>0x0000</code>', CType: int */
  public static final int AL_FILTER_FIRST_PARAMETER = 0x0;
  /** Define "AL_VOCAL_MORPHER_PHONEME_AA" with expression '<code>(5)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_AA = ( 0x5 );
  /** Define "AL_EQUALIZER_LOW_CUTOFF" with expression '<code>0x0002</code>', CType: int */
  public static final int AL_EQUALIZER_LOW_CUTOFF = 0x2;
  /** Define "AL_RING_MODULATOR_FREQUENCY" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_RING_MODULATOR_FREQUENCY = 0x1;
  /** Define "AL_VOCAL_MORPHER_PHONEME_AO" with expression '<code>(8)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_AO = ( 0x8 );
  /** Define "AL_EAXREVERB_MIN_GAINHF" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_GAINHF = ( 0.0 );
  /** Define "AL_FLANGER_MIN_FEEDBACK" with expression '<code>(-1.0f)</code>', CType: float */
  public static final float AL_FLANGER_MIN_FEEDBACK = ( - 1.0f );
  /** Define "AL_VOCAL_MORPHER_PHONEME_AH" with expression '<code>(7)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_PHONEME_AH = ( 0x7 );
  /** Define "ALC_SHORT_SOFT" with expression '<code>0x1402</code>', CType: int */
  public static final int ALC_SHORT_SOFT = 0x1402;
  /** Define "AL_HIGHPASS_DEFAULT_GAIN" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_HIGHPASS_DEFAULT_GAIN = ( 1.0f );
  /** Define "AL_FLANGER_MAX_DELAY" with expression '<code>(0.004f)</code>', CType: float */
  public static final float AL_FLANGER_MAX_DELAY = ( 0.004f );
  /** Define "AL_FREQUENCY_SHIFTER_DEFAULT_FREQUENCY" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_FREQUENCY_SHIFTER_DEFAULT_FREQUENCY = ( 0.0 );
  /** Define "AL_LOKI_WAVE_format" with expression '<code>1</code>', CType: int */
  public static final int AL_LOKI_WAVE_format = 0x1;
  /** Define "AL_FREQUENCY_SHIFTER_DIRECTION_UP" with expression '<code>(1)</code>', CType: int */
  public static final int AL_FREQUENCY_SHIFTER_DIRECTION_UP = ( 0x1 );
  /** Define "AL_DISTORTION_EQBANDWIDTH" with expression '<code>0x0005</code>', CType: int */
  public static final int AL_DISTORTION_EQBANDWIDTH = 0x5;
  /** Define "AL_EQUALIZER_HIGH_GAIN" with expression '<code>0x0009</code>', CType: int */
  public static final int AL_EQUALIZER_HIGH_GAIN = 0x9;
  /** Define "AL_BANDPASS_MIN_GAINLF" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_BANDPASS_MIN_GAINLF = ( 0.0 );
  /** Define "AL_REVERB_MAX_LATE_REVERB_DELAY" with expression '<code>(0.1f)</code>', CType: float */
  public static final float AL_REVERB_MAX_LATE_REVERB_DELAY = ( 0.1f );
  /** Define "ALC_FLOAT_SOFT" with expression '<code>0x1406</code>', CType: int */
  public static final int ALC_FLOAT_SOFT = 0x1406;
  /** Define "AL_DISTORTION_MAX_LOWPASS_CUTOFF" with expression '<code>(24000.0f)</code>', CType: float */
  public static final float AL_DISTORTION_MAX_LOWPASS_CUTOFF = ( 24000.0f );
  /** Define "AL_DEFAULT_AUXILIARY_SEND_FILTER_GAIN_AUTO" with expression '<code>1</code>', CType: int */
  public static final int AL_DEFAULT_AUXILIARY_SEND_FILTER_GAIN_AUTO = 0x1;
  /** Define "ALC_MAX_AUXILIARY_SENDS" with expression '<code>0x20003</code>', CType: int */
  public static final int ALC_MAX_AUXILIARY_SENDS = 0x20003;
  /** Define "AL_ECHO_SPREAD" with expression '<code>0x0005</code>', CType: int */
  public static final int AL_ECHO_SPREAD = 0x5;
  /** Define "AL_EQUALIZER_MAX_MID2_CENTER" with expression '<code>(8000.0f)</code>', CType: float */
  public static final float AL_EQUALIZER_MAX_MID2_CENTER = ( 8000.0f );
  /** Define "AL_DEDICATED_GAIN" with expression '<code>0x0001</code>', CType: int */
  public static final int AL_DEDICATED_GAIN = 0x1;
  /** Define "AL_EAXREVERB_MAX_DENSITY" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_EAXREVERB_MAX_DENSITY = ( 1.0f );
  /** Define "AL_EAXREVERB_MIN_DECAY_HFLIMIT" with expression '<code>0</code>', CType: int */
  public static final int AL_EAXREVERB_MIN_DECAY_HFLIMIT = 0x0;
  /** Define "AL_VOCAL_MORPHER_MAX_PHONEMEB" with expression '<code>(29)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_MAX_PHONEMEB = ( 0x1d );
  /** Define "AL_FILTER_NULL" with expression '<code>0x0000</code>', CType: int */
  public static final int AL_FILTER_NULL = 0x0;
  /** Define "AL_EAXREVERB_MIN_MODULATION_DEPTH" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_EAXREVERB_MIN_MODULATION_DEPTH = ( 0.0 );
  /** Define "AL_VOCAL_MORPHER_MAX_PHONEMEA" with expression '<code>(29)</code>', CType: int */
  public static final int AL_VOCAL_MORPHER_MAX_PHONEMEA = ( 0x1d );
  /** Define "AL_CHORUS_MAX_FEEDBACK" with expression '<code>(1.0f)</code>', CType: float */
  public static final float AL_CHORUS_MAX_FEEDBACK = ( 1.0f );
  /** Define "AL_REVERB_MIN_LATE_REVERB_GAIN" with expression '<code>(0.0f)</code>', CType: double */
  public static final double AL_REVERB_MIN_LATE_REVERB_GAIN = ( 0.0 );
  /** Define "AL_6POINT1_SOFT" with expression '<code>0x1505</code>', CType: int */
  public static final int AL_6POINT1_SOFT = 0x1505;
  /** Define "AL_REVERB_REFLECTIONS_DELAY" with expression '<code>0x0008</code>', CType: int */
  public static final int AL_REVERB_REFLECTIONS_DELAY = 0x8;
  /** Define "AL_CHORUS_MAX_RATE" with expression '<code>(10.0f)</code>', CType: float */
  public static final float AL_CHORUS_MAX_RATE = ( 10.0f );

} // end of class ALExtConstants
