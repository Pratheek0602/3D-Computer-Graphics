/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:49:19 CEST 2023 ----! */
/* !---- Java-Unit: [pkg com.jogamp.openal, cls ALConstants], ../build/gensrc/classes/com/jogamp/openal/ALConstants.java ----! */

package com.jogamp.openal;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;
import com.jogamp.common.util.*;
import java.util.Set;
import java.util.Map;
import java.util.HashMap;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

public interface ALConstants {

  /** Define "AL_ILLEGAL_COMMAND" with expression '<code>0xA004</code>', CType: int */
  public static final int AL_ILLEGAL_COMMAND = 0xa004;
  /** Define "AL_PROCESSED" with expression '<code>0x2012</code>', CType: int */
  public static final int AL_PROCESSED = 0x2012;
  /** Define "AL_FREQUENCY" with expression '<code>0x2001</code>', CType: int */
  public static final int AL_FREQUENCY = 0x2001;
  /** Define "AL_NO_ERROR" with expression '<code>0</code>', CType: int */
  public static final int AL_NO_ERROR = 0x0;
  /** Define "AL_VENDOR" with expression '<code>0xB001</code>', CType: int */
  public static final int AL_VENDOR = 0xb001;
  /** Define "AL_STATIC" with expression '<code>0x1028</code>', CType: int */
  public static final int AL_STATIC = 0x1028;
  /** Define "AL_INVALID_ENUM" with expression '<code>0xA002</code>', CType: int */
  public static final int AL_INVALID_ENUM = 0xa002;
  /** Define "AL_MAX_DISTANCE" with expression '<code>0x1023</code>', CType: int */
  public static final int AL_MAX_DISTANCE = 0x1023;
  /** Define "AL_ROLLOFF_FACTOR" with expression '<code>0x1021</code>', CType: int */
  public static final int AL_ROLLOFF_FACTOR = 0x1021;
  /** Define "AL_GAIN" with expression '<code>0x100A</code>', CType: int */
  public static final int AL_GAIN = 0x100a;
  /** Define "AL_SIZE" with expression '<code>0x2004</code>', CType: int */
  public static final int AL_SIZE = 0x2004;
  /** Define "AL_DISTANCE_MODEL" with expression '<code>0xD000</code>', CType: int */
  public static final int AL_DISTANCE_MODEL = 0xd000;
  /** Define "AL_BYTE_OFFSET" with expression '<code>0x1026</code>', CType: int */
  public static final int AL_BYTE_OFFSET = 0x1026;
  /** Define "AL_SOURCE_STATE" with expression '<code>0x1010</code>', CType: int */
  public static final int AL_SOURCE_STATE = 0x1010;
  /** Define "AL_STOPPED" with expression '<code>0x1014</code>', CType: int */
  public static final int AL_STOPPED = 0x1014;
  /** Define "AL_REFERENCE_DISTANCE" with expression '<code>0x1020</code>', CType: int */
  public static final int AL_REFERENCE_DISTANCE = 0x1020;
  /** Define "AL_MIN_GAIN" with expression '<code>0x100D</code>', CType: int */
  public static final int AL_MIN_GAIN = 0x100d;
  /** Define "AL_PLAYING" with expression '<code>0x1012</code>', CType: int */
  public static final int AL_PLAYING = 0x1012;
  /** Define "AL_INVERSE_DISTANCE_CLAMPED" with expression '<code>0xD002</code>', CType: int */
  public static final int AL_INVERSE_DISTANCE_CLAMPED = 0xd002;
  /** Define "AL_PITCH" with expression '<code>0x1003</code>', CType: int */
  public static final int AL_PITCH = 0x1003;
  /** Define "AL_OUT_OF_MEMORY" with expression '<code>0xA005</code>', CType: int */
  public static final int AL_OUT_OF_MEMORY = 0xa005;
  /** Define "AL_FORMAT_MONO8" with expression '<code>0x1100</code>', CType: int */
  public static final int AL_FORMAT_MONO8 = 0x1100;
  /** Define "AL_TRUE" with expression '<code>1</code>', CType: int */
  public static final int AL_TRUE = 0x1;
  /** Define "AL_LINEAR_DISTANCE" with expression '<code>0xD003</code>', CType: int */
  public static final int AL_LINEAR_DISTANCE = 0xd003;
  /** Define "AL_LOOPING" with expression '<code>0x1007</code>', CType: int */
  public static final int AL_LOOPING = 0x1007;
  /** Define "AL_STREAMING" with expression '<code>0x1029</code>', CType: int */
  public static final int AL_STREAMING = 0x1029;
  /** Define "AL_EXPONENT_DISTANCE_CLAMPED" with expression '<code>0xD006</code>', CType: int */
  public static final int AL_EXPONENT_DISTANCE_CLAMPED = 0xd006;
  /** Define "AL_CHANNELS" with expression '<code>0x2003</code>', CType: int */
  public static final int AL_CHANNELS = 0x2003;
  /** Define "AL_PAUSED" with expression '<code>0x1013</code>', CType: int */
  public static final int AL_PAUSED = 0x1013;
  /** Define "AL_CONE_OUTER_GAIN" with expression '<code>0x1022</code>', CType: int */
  public static final int AL_CONE_OUTER_GAIN = 0x1022;
  /** Define "AL_INVERSE_DISTANCE" with expression '<code>0xD001</code>', CType: int */
  public static final int AL_INVERSE_DISTANCE = 0xd001;
  /** Define "AL_ILLEGAL_ENUM" with expression '<code>0xA002</code>', CType: int */
  public static final int AL_ILLEGAL_ENUM = 0xa002;
  /** Define "AL_DIRECTION" with expression '<code>0x1005</code>', CType: int */
  public static final int AL_DIRECTION = 0x1005;
  /** Define "AL_INVALID_OPERATION" with expression '<code>0xA004</code>', CType: int */
  public static final int AL_INVALID_OPERATION = 0xa004;
  /** Define "AL_ORIENTATION" with expression '<code>0x100F</code>', CType: int */
  public static final int AL_ORIENTATION = 0x100f;
  /** Define "AL_FORMAT_STEREO8" with expression '<code>0x1102</code>', CType: int */
  public static final int AL_FORMAT_STEREO8 = 0x1102;
  /** Define "AL_CONE_OUTER_ANGLE" with expression '<code>0x1002</code>', CType: int */
  public static final int AL_CONE_OUTER_ANGLE = 0x1002;
  /** Define "AL_DOPPLER_VELOCITY" with expression '<code>0xC001</code>', CType: int */
  public static final int AL_DOPPLER_VELOCITY = 0xc001;
  /** Define "AL_RENDERER" with expression '<code>0xB003</code>', CType: int */
  public static final int AL_RENDERER = 0xb003;
  /** Define "AL_SAMPLE_OFFSET" with expression '<code>0x1025</code>', CType: int */
  public static final int AL_SAMPLE_OFFSET = 0x1025;
  /** Define "AL_FORMAT_STEREO16" with expression '<code>0x1103</code>', CType: int */
  public static final int AL_FORMAT_STEREO16 = 0x1103;
  /** Define "AL_SEC_OFFSET" with expression '<code>0x1024</code>', CType: int */
  public static final int AL_SEC_OFFSET = 0x1024;
  /** Define "AL_POSITION" with expression '<code>0x1004</code>', CType: int */
  public static final int AL_POSITION = 0x1004;
  /** Define "AL_PENDING" with expression '<code>0x2011</code>', CType: int */
  public static final int AL_PENDING = 0x2011;
  /** Define "AL_UNUSED" with expression '<code>0x2010</code>', CType: int */
  public static final int AL_UNUSED = 0x2010;
  /** Define "AL_INVALID_VALUE" with expression '<code>0xA003</code>', CType: int */
  public static final int AL_INVALID_VALUE = 0xa003;
  /** Define "AL_NONE" with expression '<code>0</code>', CType: int */
  public static final int AL_NONE = 0x0;
  /** Define "AL_BUFFER" with expression '<code>0x1009</code>', CType: int */
  public static final int AL_BUFFER = 0x1009;
  /** Define "AL_BUFFERS_PROCESSED" with expression '<code>0x1016</code>', CType: int */
  public static final int AL_BUFFERS_PROCESSED = 0x1016;
  /** Define "AL_VELOCITY" with expression '<code>0x1006</code>', CType: int */
  public static final int AL_VELOCITY = 0x1006;
  /** Define "AL_DOPPLER_FACTOR" with expression '<code>0xC000</code>', CType: int */
  public static final int AL_DOPPLER_FACTOR = 0xc000;
  /** Define "AL_MAX_GAIN" with expression '<code>0x100E</code>', CType: int */
  public static final int AL_MAX_GAIN = 0x100e;
  /** Define "AL_SPEED_OF_SOUND" with expression '<code>0xC003</code>', CType: int */
  public static final int AL_SPEED_OF_SOUND = 0xc003;
  /** Define "AL_UNDETERMINED" with expression '<code>0x1030</code>', CType: int */
  public static final int AL_UNDETERMINED = 0x1030;
  /** Define "AL_EXTENSIONS" with expression '<code>0xB004</code>', CType: int */
  public static final int AL_EXTENSIONS = 0xb004;
  /** Define "AL_EXPONENT_DISTANCE" with expression '<code>0xD005</code>', CType: int */
  public static final int AL_EXPONENT_DISTANCE = 0xd005;
  /** Define "AL_INVALID" with expression '<code>(-1)</code>', CType: int */
  public static final int AL_INVALID = ( - 0x1 );
  /** Define "AL_VERSION" with expression '<code>0xB002</code>', CType: int */
  public static final int AL_VERSION = 0xb002;
  /** Define "AL_INITIAL" with expression '<code>0x1011</code>', CType: int */
  public static final int AL_INITIAL = 0x1011;
  /** Define "AL_BUFFERS_QUEUED" with expression '<code>0x1015</code>', CType: int */
  public static final int AL_BUFFERS_QUEUED = 0x1015;
  /** Define "AL_BITS" with expression '<code>0x2002</code>', CType: int */
  public static final int AL_BITS = 0x2002;
  /** Define "AL_CONE_INNER_ANGLE" with expression '<code>0x1001</code>', CType: int */
  public static final int AL_CONE_INNER_ANGLE = 0x1001;
  /** Define "AL_SOURCE_RELATIVE" with expression '<code>0x202</code>', CType: int */
  public static final int AL_SOURCE_RELATIVE = 0x202;
  /** Define "AL_SOURCE_TYPE" with expression '<code>0x1027</code>', CType: int */
  public static final int AL_SOURCE_TYPE = 0x1027;
  /** Define "AL_LINEAR_DISTANCE_CLAMPED" with expression '<code>0xD004</code>', CType: int */
  public static final int AL_LINEAR_DISTANCE_CLAMPED = 0xd004;
  /** Define "AL_FORMAT_MONO16" with expression '<code>0x1101</code>', CType: int */
  public static final int AL_FORMAT_MONO16 = 0x1101;
  /** Define "AL_FALSE" with expression '<code>0</code>', CType: int */
  public static final int AL_FALSE = 0x0;
  /** Define "AL_INVALID_NAME" with expression '<code>0xA001</code>', CType: int */
  public static final int AL_INVALID_NAME = 0xa001;

} // end of class ALConstants
