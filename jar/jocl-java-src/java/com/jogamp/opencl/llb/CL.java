/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 15:56:02 CEST 2023 ----! */
/* !---- Java-Unit: [pkg com.jogamp.opencl.llb, cls CL], ../build/gensrc/java/com/jogamp/opencl/llb/CL.java ----! */

package com.jogamp.opencl.llb;

import com.jogamp.opencl.llb.impl.CLImageFormatImpl;
import com.jogamp.opencl.CLErrorHandler;
import com.jogamp.opencl.llb.impl.BuildProgramCallback;
import com.jogamp.opencl.llb.impl.CLMemObjectDestructorCallback;
import com.jogamp.opencl.llb.impl.CLEventCallback;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;
import com.jogamp.common.util.*;
import java.util.Set;
import java.util.Map;
import java.util.HashMap;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

 /**
  * Java bindings to OpenCL, the Open Computing Language.
  * @author Michael Bien, GlueGen, et al.
  */
public interface CL {

  /** Defined as part of enum type "khronos_boolean_enum_t" with expression '<code>0</code>', CType: int */
  public static final int KHRONOS_FALSE = 0x0;
  /** Defined as part of enum type "khronos_boolean_enum_t" with expression '<code>1</code>', CType: int */
  public static final int KHRONOS_TRUE = 0x1;
  /** Defined as part of enum type "khronos_boolean_enum_t" with expression '<code>0x7FFFFFFF</code>', CType: int */
  public static final int KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 0x7fffffff;
  /** Define "CL_INVALID_WORK_ITEM_SIZE" with expression '<code>-55</code>', CType: int */
  public static final int CL_INVALID_WORK_ITEM_SIZE = -55;
  /** Define "CL_INVALID_GLOBAL_WORK_SIZE" with expression '<code>-63</code>', CType: int */
  public static final int CL_INVALID_GLOBAL_WORK_SIZE = -63;
  /** Define "CL_BGRA" with expression '<code>0x10B6</code>', CType: int */
  public static final int CL_BGRA = 0x10b6;
  /** Define "CL_SNORM_INT8" with expression '<code>0x10D0</code>', CType: int */
  public static final int CL_SNORM_INT8 = 0x10d0;
  /** Define "CL_MEM_OBJECT_ALLOCATION_FAILURE" with expression '<code>-4</code>', CType: int */
  public static final int CL_MEM_OBJECT_ALLOCATION_FAILURE = -4;
  /** Define "CL_PROGRAM_BUILD_STATUS" with expression '<code>0x1181</code>', CType: int */
  public static final int CL_PROGRAM_BUILD_STATUS = 0x1181;
  /** Define "CL_SAMPLER_ADDRESSING_MODE" with expression '<code>0x1153</code>', CType: int */
  public static final int CL_SAMPLER_ADDRESSING_MODE = 0x1153;
  /** Define "CL_DEVICE_IMAGE2D_MAX_HEIGHT" with expression '<code>0x1012</code>', CType: int */
  public static final int CL_DEVICE_IMAGE2D_MAX_HEIGHT = 0x1012;
  /** Define "CL_DEVICE_TYPE_GPU" with expression '<code>(1 << 2)</code>', CType: int */
  public static final int CL_DEVICE_TYPE_GPU = ( 0x1 << 0x2 );
  /** Define "CL_RGBA" with expression '<code>0x10B5</code>', CType: int */
  public static final int CL_RGBA = 0x10b5;
  /** Define "CL_KERNEL_CONTEXT" with expression '<code>0x1193</code>', CType: int */
  public static final int CL_KERNEL_CONTEXT = 0x1193;
  /** Define "CL_SAMPLER_FILTER_MODE" with expression '<code>0x1154</code>', CType: int */
  public static final int CL_SAMPLER_FILTER_MODE = 0x1154;
  /** Define "CL_DEVICE_IMAGE3D_MAX_HEIGHT" with expression '<code>0x1014</code>', CType: int */
  public static final int CL_DEVICE_IMAGE3D_MAX_HEIGHT = 0x1014;
  /** Define "CL_IMAGE_HEIGHT" with expression '<code>0x1115</code>', CType: int */
  public static final int CL_IMAGE_HEIGHT = 0x1115;
  /** Define "CL_DBL_MAX_10_EXP" with expression '<code>+308</code>', CType: int */
  public static final int CL_DBL_MAX_10_EXP = 0x134;
  /** Define "CL_FLT_MIN_EXP" with expression '<code>-125</code>', CType: int */
  public static final int CL_FLT_MIN_EXP = -125;
  /** Define "CL_FP_INF_NAN" with expression '<code>(1 << 1)</code>', CType: int */
  public static final int CL_FP_INF_NAN = ( 0x1 << 0x1 );
  /** Define "CL_M_2_SQRTPI_F" with expression '<code>1.12837922573090f</code>', CType: float */
  public static final float CL_M_2_SQRTPI_F = 1.1283792257309f;
  /** Define "CL_PROFILING_INFO_NOT_AVAILABLE" with expression '<code>-7</code>', CType: int */
  public static final int CL_PROFILING_INFO_NOT_AVAILABLE = -7;
  /** Define "CL_MEM_READ_ONLY" with expression '<code>(1 << 2)</code>', CType: int */
  public static final int CL_MEM_READ_ONLY = ( 0x1 << 0x2 );
  /** Define "CL_BUILD_PROGRAM_FAILURE" with expression '<code>-11</code>', CType: int */
  public static final int CL_BUILD_PROGRAM_FAILURE = -11;
  /** Define "CL_INVALID_KERNEL_ARGS" with expression '<code>-52</code>', CType: int */
  public static final int CL_INVALID_KERNEL_ARGS = -52;
  /** Define "CL_SAMPLER_NORMALIZED_COORDS" with expression '<code>0x1152</code>', CType: int */
  public static final int CL_SAMPLER_NORMALIZED_COORDS = 0x1152;
  /** Define "CL_DEVICE_IMAGE3D_MAX_DEPTH" with expression '<code>0x1015</code>', CType: int */
  public static final int CL_DEVICE_IMAGE3D_MAX_DEPTH = 0x1015;
  /** Define "CL_DEVICE_REFERENCE_COUNT_EXT" with expression '<code>0x4057</code>', CType: int */
  public static final int CL_DEVICE_REFERENCE_COUNT_EXT = 0x4057;
  /** Define "CL_INT_MIN" with expression '<code>(-2147483647-1)</code>', CType: int */
  public static final int CL_INT_MIN = ( - 0x7fffffff - 0x1 );
  /** Define "CL_IMAGE_SLICE_PITCH" with expression '<code>0x1113</code>', CType: int */
  public static final int CL_IMAGE_SLICE_PITCH = 0x1113;
  /** Define "CL_DEVICES_FOR_GL_CONTEXT_KHR" with expression '<code>0x2007</code>', CType: int */
  public static final int CL_DEVICES_FOR_GL_CONTEXT_KHR = 0x2007;
  /** Define "CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE" with expression '<code>0x100B</code>', CType: int */
  public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE = 0x100b;
  /** Define "CL_DEVICE_TYPE" with expression '<code>0x1000</code>', CType: int */
  public static final int CL_DEVICE_TYPE = 0x1000;
  /** Define "CL_MEM_HOST_PTR" with expression '<code>0x1103</code>', CType: int */
  public static final int CL_MEM_HOST_PTR = 0x1103;
  /** Define "CL_AFFINITY_DOMAIN_NUMA_EXT" with expression '<code>0x10</code>', CType: int */
  public static final int CL_AFFINITY_DOMAIN_NUMA_EXT = 0x10;
  /** Define "CL_DEVICE_PROFILING_TIMER_RESOLUTION" with expression '<code>0x1025</code>', CType: int */
  public static final int CL_DEVICE_PROFILING_TIMER_RESOLUTION = 0x1025;
  /** Define "CL_ADDRESS_NONE" with expression '<code>0x1130</code>', CType: int */
  public static final int CL_ADDRESS_NONE = 0x1130;
  /** Define "CL_INVALID_PARTITION_NAME_EXT" with expression '<code>-1059</code>', CType: int */
  public static final int CL_INVALID_PARTITION_NAME_EXT = -1059;
  /** Define "CL_DBL_DIG" with expression '<code>15</code>', CType: int */
  public static final int CL_DBL_DIG = 0xf;
  /** Define "CL_PROGRAM_BINARIES" with expression '<code>0x1166</code>', CType: int */
  public static final int CL_PROGRAM_BINARIES = 0x1166;
  /** Define "CL_INVALID_MIP_LEVEL" with expression '<code>-62</code>', CType: int */
  public static final int CL_INVALID_MIP_LEVEL = -62;
  /** Define "CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV" with expression '<code>0x4001</code>', CType: int */
  public static final int CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV = 0x4001;
  /** Define "CL_DBL_RADIX" with expression '<code>2</code>', CType: int */
  public static final int CL_DBL_RADIX = 0x2;
  /** Define "CL_DEVICE_MAX_COMPUTE_UNITS" with expression '<code>0x1002</code>', CType: int */
  public static final int CL_DEVICE_MAX_COMPUTE_UNITS = 0x1002;
  /** Define "CL_UNORM_INT_101010" with expression '<code>0x10D6</code>', CType: int */
  public static final int CL_UNORM_INT_101010 = 0x10d6;
  /** Define "CL_ADDRESS_CLAMP" with expression '<code>0x1132</code>', CType: int */
  public static final int CL_ADDRESS_CLAMP = 0x1132;
  /** Define "CL_COMMAND_COPY_BUFFER" with expression '<code>0x11F5</code>', CType: int */
  public static final int CL_COMMAND_COPY_BUFFER = 0x11f5;
  /** Define "CL_INVALID_ARG_INDEX" with expression '<code>-49</code>', CType: int */
  public static final int CL_INVALID_ARG_INDEX = -49;
  /** Define "CL_FILTER_LINEAR" with expression '<code>0x1141</code>', CType: int */
  public static final int CL_FILTER_LINEAR = 0x1141;
  /** Define "CL_PROGRAM_REFERENCE_COUNT" with expression '<code>0x1160</code>', CType: int */
  public static final int CL_PROGRAM_REFERENCE_COUNT = 0x1160;
  /** Define "CL_M_2_PI" with expression '<code>0.636619772367581382433</code>', CType: float */
  public static final float CL_M_2_PI = 0.6366197723675814f;
  /** Define "CL_FLOAT" with expression '<code>0x10DE</code>', CType: int */
  public static final int CL_FLOAT = 0x10de;
  /** Define "CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV" with expression '<code>0x4005</code>', CType: int */
  public static final int CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV = 0x4005;
  /** Define "CL_KERNEL_NUM_ARGS" with expression '<code>0x1191</code>', CType: int */
  public static final int CL_KERNEL_NUM_ARGS = 0x1191;
  /** Define "CL_PLATFORM_VERSION" with expression '<code>0x0901</code>', CType: int */
  public static final int CL_PLATFORM_VERSION = 0x901;
  /** Define "CL_OUT_OF_RESOURCES" with expression '<code>-5</code>', CType: int */
  public static final int CL_OUT_OF_RESOURCES = -5;
  /** Define "CL_VERSION_1_1" with expression '<code>1</code>', CType: int */
  public static final int CL_VERSION_1_1 = 0x1;
  /** Define "CL_VERSION_1_0" with expression '<code>1</code>', CType: int */
  public static final int CL_VERSION_1_0 = 0x1;
  /** Define "CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT" with expression '<code>0x100A</code>', CType: int */
  public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT = 0x100a;
  /** Define "CL_INVALID_PLATFORM" with expression '<code>-32</code>', CType: int */
  public static final int CL_INVALID_PLATFORM = -32;
  /** Define "CL_M_PI_2_F" with expression '<code>1.57079637050629f</code>', CType: float */
  public static final float CL_M_PI_2_F = 1.57079637050629f;
  /** Define "CL_PROGRAM_BUILD_OPTIONS" with expression '<code>0x1182</code>', CType: int */
  public static final int CL_PROGRAM_BUILD_OPTIONS = 0x1182;
  /** Define "CL_BUILD_NONE" with expression '<code>-1</code>', CType: int */
  public static final int CL_BUILD_NONE = -1;
  /** Define "CL_RUNNING" with expression '<code>0x1</code>', CType: int */
  public static final int CL_RUNNING = 0x1;
  /** Define "CL_INVALID_KERNEL" with expression '<code>-48</code>', CType: int */
  public static final int CL_INVALID_KERNEL = -48;
  /** Define "CL_IMAGE_FORMAT_NOT_SUPPORTED" with expression '<code>-10</code>', CType: int */
  public static final int CL_IMAGE_FORMAT_NOT_SUPPORTED = -10;
  /** Define "CL_CHAR_MAX" with expression '<code>127</code>', CType: int */
  public static final int CL_CHAR_MAX = 0x7f;
  /** Define "CL_QUEUE_PROFILING_ENABLE" with expression '<code>(1 << 1)</code>', CType: int */
  public static final int CL_QUEUE_PROFILING_ENABLE = ( 0x1 << 0x1 );
  /** Define "CL_M_LN10_F" with expression '<code>2.30258512496948f</code>', CType: float */
  public static final float CL_M_LN10_F = 2.30258512496948f;
  /** Define "CL_IMAGE_DEPTH" with expression '<code>0x1116</code>', CType: int */
  public static final int CL_IMAGE_DEPTH = 0x1116;
  /** Define "CL_UNORM_INT16" with expression '<code>0x10D3</code>', CType: int */
  public static final int CL_UNORM_INT16 = 0x10d3;
  /** Define "CL_MAP_WRITE" with expression '<code>(1 << 1)</code>', CType: int */
  public static final int CL_MAP_WRITE = ( 0x1 << 0x1 );
  /** Define "CL_SCHAR_MAX" with expression '<code>127</code>', CType: int */
  public static final int CL_SCHAR_MAX = 0x7f;
  /** Define "GLEXT_64_TYPES_DEFINED" with expression '<code>1</code>', CType: int */
  public static final int GLEXT_64_TYPES_DEFINED = 0x1;
  /** Define "CL_PROFILING_COMMAND_END" with expression '<code>0x1283</code>', CType: int */
  public static final int CL_PROFILING_COMMAND_END = 0x1283;
  /** Define "CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG" with expression '<code>0x1009</code>', CType: int */
  public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG = 0x1009;
  /** Define "CL_CHAR_BIT" with expression '<code>8</code>', CType: int */
  public static final int CL_CHAR_BIT = 0x8;
  /** Define "CL_MEM_WRITE_ONLY" with expression '<code>(1 << 1)</code>', CType: int */
  public static final int CL_MEM_WRITE_ONLY = ( 0x1 << 0x1 );
  /** Define "CL_RGBx" with expression '<code>0x10BC</code>', CType: int */
  public static final int CL_RGBx = 0x10bc;
  /** Define "CL_MAP_FAILURE" with expression '<code>-12</code>', CType: int */
  public static final int CL_MAP_FAILURE = -12;
  /** Define "CL_MEM_COPY_OVERLAP" with expression '<code>-8</code>', CType: int */
  public static final int CL_MEM_COPY_OVERLAP = -8;
  /** Define "CL_DBL_MIN_10_EXP" with expression '<code>-307</code>', CType: int */
  public static final int CL_DBL_MIN_10_EXP = -307;
  /** Define "CL_PROFILING_COMMAND_SUBMIT" with expression '<code>0x1281</code>', CType: int */
  public static final int CL_PROFILING_COMMAND_SUBMIT = 0x1281;
  /** Define "CL_M_1_PI" with expression '<code>0.318309886183790691216</code>', CType: float */
  public static final float CL_M_1_PI = 0.3183098861837907f;
  /** Define "CL_QUEUE_PROPERTIES" with expression '<code>0x1093</code>', CType: int */
  public static final int CL_QUEUE_PROPERTIES = 0x1093;
  /** Define "CL_PROFILING_COMMAND_QUEUED" with expression '<code>0x1280</code>', CType: int */
  public static final int CL_PROFILING_COMMAND_QUEUED = 0x1280;
  /** Define "CL_INVALID_PROGRAM_EXECUTABLE" with expression '<code>-45</code>', CType: int */
  public static final int CL_INVALID_PROGRAM_EXECUTABLE = -45;
  /** Define "KHRONOS_MAX_ENUM" with expression '<code>0x7FFFFFFF</code>', CType: int */
  public static final int KHRONOS_MAX_ENUM = 0x7fffffff;
  /** Define "CL_MAXFLOAT" with expression '<code>0x1.fffffep127f</code>', CType: float */
  public static final float CL_MAXFLOAT = 3.4028234663852886E38f;
  /** Define "CL_COMMAND_NATIVE_KERNEL" with expression '<code>0x11F2</code>', CType: int */
  public static final int CL_COMMAND_NATIVE_KERNEL = 0x11f2;
  /** Define "CL_ADDRESS_REPEAT" with expression '<code>0x1133</code>', CType: int */
  public static final int CL_ADDRESS_REPEAT = 0x1133;
  /** Define "CL_TRUE" with expression '<code>1</code>', CType: int */
  public static final int CL_TRUE = 0x1;
  /** Define "CL_KERNEL_LOCAL_MEM_SIZE" with expression '<code>0x11B2</code>', CType: int */
  public static final int CL_KERNEL_LOCAL_MEM_SIZE = 0x11b2;
  /** Define "CL_FLT_EPSILON" with expression '<code>0x1.0p-23f</code>', CType: float */
  public static final float CL_FLT_EPSILON = 1.1920928955078125E-7f;
  /** Define "CL_DEVICE_GPU_OVERLAP_NV" with expression '<code>0x4004</code>', CType: int */
  public static final int CL_DEVICE_GPU_OVERLAP_NV = 0x4004;
  /** Define "CL_DEVICE_PARTITION_TYPES_EXT" with expression '<code>0x4055</code>', CType: int */
  public static final int CL_DEVICE_PARTITION_TYPES_EXT = 0x4055;
  /** Define "CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT" with expression '<code>0x1037</code>', CType: int */
  public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT = 0x1037;
  /** Define "CL_AFFINITY_DOMAIN_L3_CACHE_EXT" with expression '<code>0x3</code>', CType: int */
  public static final int CL_AFFINITY_DOMAIN_L3_CACHE_EXT = 0x3;
  /** Define "CL_DBL_MAX" with expression '<code>0x1.fffffffffffffp1023</code>', CType: double */
  public static final double CL_DBL_MAX = 1.7976931348623157E308;
  /** Define "CL_SUBMITTED" with expression '<code>0x2</code>', CType: int */
  public static final int CL_SUBMITTED = 0x2;
  /** Define "CL_PROGRAM_SOURCE" with expression '<code>0x1164</code>', CType: int */
  public static final int CL_PROGRAM_SOURCE = 0x1164;
  /** Define "CL_DEVICE_LOCAL_MEM_TYPE" with expression '<code>0x1022</code>', CType: int */
  public static final int CL_DEVICE_LOCAL_MEM_TYPE = 0x1022;
  /** Define "CL_M_PI_4_F" with expression '<code>0.78539818525314f</code>', CType: float */
  public static final float CL_M_PI_4_F = 0.78539818525314f;
  /** Define "CL_PLATFORM_VENDOR" with expression '<code>0x0903</code>', CType: int */
  public static final int CL_PLATFORM_VENDOR = 0x903;
  /** Define "CL_COMMAND_USER" with expression '<code>0x1204</code>', CType: int */
  public static final int CL_COMMAND_USER = 0x1204;
  /** Define "CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST" with expression '<code>-14</code>', CType: int */
  public static final int CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST = -14;
  /** Define "CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG" with expression '<code>0x1039</code>', CType: int */
  public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG = 0x1039;
  /** Define "CL_DEVICE_PARTITION_BY_NAMES_EXT" with expression '<code>0x4052</code>', CType: int */
  public static final int CL_DEVICE_PARTITION_BY_NAMES_EXT = 0x4052;
  /** Define "CL_COMMAND_COPY_BUFFER_TO_IMAGE" with expression '<code>0x11FA</code>', CType: int */
  public static final int CL_COMMAND_COPY_BUFFER_TO_IMAGE = 0x11fa;
  /** Define "CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE" with expression '<code>0x103B</code>', CType: int */
  public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE = 0x103b;
  /** Define "CL_BUILD_IN_PROGRESS" with expression '<code>-3</code>', CType: int */
  public static final int CL_BUILD_IN_PROGRESS = -3;
  /** Define "CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE" with expression '<code>0x11B3</code>', CType: int */
  public static final int CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE = 0x11b3;
  /** Define "KHRONOS_SUPPORT_FLOAT" with expression '<code>1</code>', CType: int */
  public static final int KHRONOS_SUPPORT_FLOAT = 0x1;
  /** Define "CL_INVALID_SAMPLER" with expression '<code>-41</code>', CType: int */
  public static final int CL_INVALID_SAMPLER = -41;
  /** Define "CL_DEVICE_VENDOR" with expression '<code>0x102C</code>', CType: int */
  public static final int CL_DEVICE_VENDOR = 0x102c;
  /** Define "CL_COMMAND_WRITE_BUFFER" with expression '<code>0x11F4</code>', CType: int */
  public static final int CL_COMMAND_WRITE_BUFFER = 0x11f4;
  /** Define "CL_BUILD_SUCCESS" with expression '<code>0</code>', CType: int */
  public static final int CL_BUILD_SUCCESS = 0x0;
  /** Define "CL_COMMAND_UNMAP_MEM_OBJECT" with expression '<code>0x11FD</code>', CType: int */
  public static final int CL_COMMAND_UNMAP_MEM_OBJECT = 0x11fd;
  /** Define "CL_M_SQRT2_F" with expression '<code>1.41421353816986f</code>', CType: float */
  public static final float CL_M_SQRT2_F = 1.41421353816986f;
  /** Define "CL_MEM_FLAGS" with expression '<code>0x1101</code>', CType: int */
  public static final int CL_MEM_FLAGS = 0x1101;
  /** Define "CL_FLT_MIN_10_EXP" with expression '<code>-37</code>', CType: int */
  public static final int CL_FLT_MIN_10_EXP = -37;
  /** Define "CL_INVALID_CONTEXT" with expression '<code>-34</code>', CType: int */
  public static final int CL_INVALID_CONTEXT = -34;
  /** Define "CL_DEVICE_MAX_WRITE_IMAGE_ARGS" with expression '<code>0x100F</code>', CType: int */
  public static final int CL_DEVICE_MAX_WRITE_IMAGE_ARGS = 0x100f;
  /** Define "CL_M_E" with expression '<code>2.718281828459045090796</code>', CType: float */
  public static final float CL_M_E = 2.718281828459045f;
  /** Define "CL_LOCAL" with expression '<code>0x1</code>', CType: int */
  public static final int CL_LOCAL = 0x1;
  /** Define "CL_DEVICE_EXECUTION_CAPABILITIES" with expression '<code>0x1029</code>', CType: int */
  public static final int CL_DEVICE_EXECUTION_CAPABILITIES = 0x1029;
  /** Define "CL_EXEC_KERNEL" with expression '<code>(1 << 0)</code>', CType: int */
  public static final int CL_EXEC_KERNEL = ( 0x1 << 0x0 );
  /** Define "CL_INT_MAX" with expression '<code>2147483647</code>', CType: int */
  public static final int CL_INT_MAX = 0x7fffffff;
  /** Define "CL_FP_DENORM" with expression '<code>(1 << 0)</code>', CType: int */
  public static final int CL_FP_DENORM = ( 0x1 << 0x0 );
  /** Define "CL_FLT_MIN" with expression '<code>0x1.0p-126f</code>', CType: float */
  public static final float CL_FLT_MIN = 1.1754943508222875E-38f;
  /** Define "CL_DBL_MAX_EXP" with expression '<code>+1024</code>', CType: int */
  public static final int CL_DBL_MAX_EXP = 0x400;
  /** Define "CL_RGB" with expression '<code>0x10B4</code>', CType: int */
  public static final int CL_RGB = 0x10b4;
  /** Define "CL_DEVICE_GLOBAL_MEM_CACHE_TYPE" with expression '<code>0x101C</code>', CType: int */
  public static final int CL_DEVICE_GLOBAL_MEM_CACHE_TYPE = 0x101c;
  /** Define "CL_DEVICE_MAX_SAMPLERS" with expression '<code>0x1018</code>', CType: int */
  public static final int CL_DEVICE_MAX_SAMPLERS = 0x1018;
  /** Define "CL_AFFINITY_DOMAIN_L4_CACHE_EXT" with expression '<code>0x4</code>', CType: int */
  public static final int CL_AFFINITY_DOMAIN_L4_CACHE_EXT = 0x4;
  /** Define "CL_M_SQRT1_2" with expression '<code>0.707106781186547572737</code>', CType: float */
  public static final float CL_M_SQRT1_2 = 0.7071067811865476f;
  /** Define "CL_DEVICE_HALF_FP_CONFIG" with expression '<code>0x1033</code>', CType: int */
  public static final int CL_DEVICE_HALF_FP_CONFIG = 0x1033;
  /** Define "CL_DEVICE_TYPE_ACCELERATOR" with expression '<code>(1 << 3)</code>', CType: int */
  public static final int CL_DEVICE_TYPE_ACCELERATOR = ( 0x1 << 0x3 );
  /** Define "CL_DEVICE_COMPILER_AVAILABLE" with expression '<code>0x1028</code>', CType: int */
  public static final int CL_DEVICE_COMPILER_AVAILABLE = 0x1028;
  /** Define "CL_COMMAND_ACQUIRE_GL_OBJECTS" with expression '<code>0x11FF</code>', CType: int */
  public static final int CL_COMMAND_ACQUIRE_GL_OBJECTS = 0x11ff;
  /** Define "CL_INVALID_PARTITION_COUNT_EXT" with expression '<code>-1058</code>', CType: int */
  public static final int CL_INVALID_PARTITION_COUNT_EXT = -1058;
  /** Define "CL_MEM_USE_HOST_PTR" with expression '<code>(1 << 3)</code>', CType: int */
  public static final int CL_MEM_USE_HOST_PTR = ( 0x1 << 0x3 );
  /** Define "CL_DEVICE_IMAGE2D_MAX_WIDTH" with expression '<code>0x1011</code>', CType: int */
  public static final int CL_DEVICE_IMAGE2D_MAX_WIDTH = 0x1011;
  /** Define "CL_EVENT_COMMAND_EXECUTION_STATUS" with expression '<code>0x11D3</code>', CType: int */
  public static final int CL_EVENT_COMMAND_EXECUTION_STATUS = 0x11d3;
  /** Define "CL_DEVICE_PLATFORM" with expression '<code>0x1031</code>', CType: int */
  public static final int CL_DEVICE_PLATFORM = 0x1031;
  /** Define "CL_INVALID_ARG_VALUE" with expression '<code>-50</code>', CType: int */
  public static final int CL_INVALID_ARG_VALUE = -50;
  /** Define "CL_DEVICE_MAX_MEM_ALLOC_SIZE" with expression '<code>0x1010</code>', CType: int */
  public static final int CL_DEVICE_MAX_MEM_ALLOC_SIZE = 0x1010;
  /** Define "CL_INVALID_DEVICE_TYPE" with expression '<code>-31</code>', CType: int */
  public static final int CL_INVALID_DEVICE_TYPE = -31;
  /** Define "CL_SUCCESS" with expression '<code>0</code>', CType: int */
  public static final int CL_SUCCESS = 0x0;
  /** Define "CL_UNORM_SHORT_565" with expression '<code>0x10D4</code>', CType: int */
  public static final int CL_UNORM_SHORT_565 = 0x10d4;
  /** Define "CL_DEVICE_PARTITION_EQUALLY_EXT" with expression '<code>0x4050</code>', CType: int */
  public static final int CL_DEVICE_PARTITION_EQUALLY_EXT = 0x4050;
  /** Define "CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT" with expression '<code>0x103A</code>', CType: int */
  public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT = 0x103a;
  /** Define "CL_IMAGE_FORMAT" with expression '<code>0x1110</code>', CType: int */
  public static final int CL_IMAGE_FORMAT = 0x1110;
  /** Define "CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR" with expression '<code>0x1006</code>', CType: int */
  public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR = 0x1006;
  /** Define "CL_IMAGE_ELEMENT_SIZE" with expression '<code>0x1111</code>', CType: int */
  public static final int CL_IMAGE_ELEMENT_SIZE = 0x1111;
  /** Define "CL_PROFILING_COMMAND_START" with expression '<code>0x1282</code>', CType: int */
  public static final int CL_PROFILING_COMMAND_START = 0x1282;
  /** Define "CL_INVALID_BUILD_OPTIONS" with expression '<code>-43</code>', CType: int */
  public static final int CL_INVALID_BUILD_OPTIONS = -43;
  /** Define "CL_COMMAND_WRITE_BUFFER_RECT" with expression '<code>0x1202</code>', CType: int */
  public static final int CL_COMMAND_WRITE_BUFFER_RECT = 0x1202;
  /** Define "CL_M_LN2_F" with expression '<code>0.69314718246460f</code>', CType: float */
  public static final float CL_M_LN2_F = 0.6931471824646f;
  /** Define "CL_INVALID_VALUE" with expression '<code>-30</code>', CType: int */
  public static final int CL_INVALID_VALUE = -30;
  /** Define "CL_CONTEXT_NUM_DEVICES" with expression '<code>0x1083</code>', CType: int */
  public static final int CL_CONTEXT_NUM_DEVICES = 0x1083;
  /** Define "CL_ARGB" with expression '<code>0x10B7</code>', CType: int */
  public static final int CL_ARGB = 0x10b7;
  /** Define "CL_DEVICE_MAX_CLOCK_FREQUENCY" with expression '<code>0x100C</code>', CType: int */
  public static final int CL_DEVICE_MAX_CLOCK_FREQUENCY = 0x100c;
  /** Define "CL_SIGNED_INT8" with expression '<code>0x10D7</code>', CType: int */
  public static final int CL_SIGNED_INT8 = 0x10d7;
  /** Define "CL_COMPLETE" with expression '<code>0x0</code>', CType: int */
  public static final int CL_COMPLETE = 0x0;
  /** Define "CL_FP_FMA" with expression '<code>(1 << 5)</code>', CType: int */
  public static final int CL_FP_FMA = ( 0x1 << 0x5 );
  /** Define "CL_INTENSITY" with expression '<code>0x10B8</code>', CType: int */
  public static final int CL_INTENSITY = 0x10b8;
  /** Define "CL_DEVICE_PARTITION_STYLE_EXT" with expression '<code>0x4058</code>', CType: int */
  public static final int CL_DEVICE_PARTITION_STYLE_EXT = 0x4058;
  /** Define "CL_DEVICE_NOT_AVAILABLE" with expression '<code>-2</code>', CType: int */
  public static final int CL_DEVICE_NOT_AVAILABLE = -2;
  /** Define "CL_DEVICE_MAX_PARAMETER_SIZE" with expression '<code>0x1017</code>', CType: int */
  public static final int CL_DEVICE_MAX_PARAMETER_SIZE = 0x1017;
  /** Define "CL_IMAGE_FORMAT_MISMATCH" with expression '<code>-9</code>', CType: int */
  public static final int CL_IMAGE_FORMAT_MISMATCH = -9;
  /** Define "CL_KERNEL_FUNCTION_NAME" with expression '<code>0x1190</code>', CType: int */
  public static final int CL_KERNEL_FUNCTION_NAME = 0x1190;
  /** Define "CL_PLATFORM_NOT_FOUND_KHR" with expression '<code>-1001</code>', CType: int */
  public static final int CL_PLATFORM_NOT_FOUND_KHR = -1001;
  /** Define "cl_khr_icd" with expression '<code>1</code>', CType: int */
  public static final int cl_khr_icd = 0x1;
  /** Define "CL_INVALID_BUFFER_SIZE" with expression '<code>-61</code>', CType: int */
  public static final int CL_INVALID_BUFFER_SIZE = -61;
  /** Define "CL_DEVICE_EXTENSIONS" with expression '<code>0x1030</code>', CType: int */
  public static final int CL_DEVICE_EXTENSIONS = 0x1030;
  /** Define "CL_DEVICE_PARTITION_BY_COUNTS_EXT" with expression '<code>0x4051</code>', CType: int */
  public static final int CL_DEVICE_PARTITION_BY_COUNTS_EXT = 0x4051;
  /** Define "CL_FLT_MAX_EXP" with expression '<code>+128</code>', CType: int */
  public static final int CL_FLT_MAX_EXP = 0x80;
  /** Define "CL_COMMAND_READ_IMAGE" with expression '<code>0x11F6</code>', CType: int */
  public static final int CL_COMMAND_READ_IMAGE = 0x11f6;
  /** Define "CL_UNSIGNED_INT32" with expression '<code>0x10DC</code>', CType: int */
  public static final int CL_UNSIGNED_INT32 = 0x10dc;
  /** Define "CL_COMPILER_NOT_AVAILABLE" with expression '<code>-3</code>', CType: int */
  public static final int CL_COMPILER_NOT_AVAILABLE = -3;
  /** Define "CL_R" with expression '<code>0x10B0</code>', CType: int */
  public static final int CL_R = 0x10b0;
  /** Define "CL_GL_OBJECT_RENDERBUFFER" with expression '<code>0x2003</code>', CType: int */
  public static final int CL_GL_OBJECT_RENDERBUFFER = 0x2003;
  /** Define "CL_UNSIGNED_INT16" with expression '<code>0x10DB</code>', CType: int */
  public static final int CL_UNSIGNED_INT16 = 0x10db;
  /** Define "CL_INVALID_EVENT" with expression '<code>-58</code>', CType: int */
  public static final int CL_INVALID_EVENT = -58;
  /** Define "CL_UNORM_INT8" with expression '<code>0x10D2</code>', CType: int */
  public static final int CL_UNORM_INT8 = 0x10d2;
  /** Define "CL_KERNEL_PROGRAM" with expression '<code>0x1194</code>', CType: int */
  public static final int CL_KERNEL_PROGRAM = 0x1194;
  /** Define "CL_PLATFORM_PROFILE" with expression '<code>0x0900</code>', CType: int */
  public static final int CL_PLATFORM_PROFILE = 0x900;
  /** Define "CL_READ_ONLY_CACHE" with expression '<code>0x1</code>', CType: int */
  public static final int CL_READ_ONLY_CACHE = 0x1;
  /** Define "CL_EVENT_REFERENCE_COUNT" with expression '<code>0x11D2</code>', CType: int */
  public static final int CL_EVENT_REFERENCE_COUNT = 0x11d2;
  /** Define "CL_A" with expression '<code>0x10B1</code>', CType: int */
  public static final int CL_A = 0x10b1;
  /** Define "CL_GL_MIPMAP_LEVEL" with expression '<code>0x2005</code>', CType: int */
  public static final int CL_GL_MIPMAP_LEVEL = 0x2005;
  /** Define "CL_PRINTF_CALLBACK_ARM" with expression '<code>0x40B0</code>', CType: int */
  public static final int CL_PRINTF_CALLBACK_ARM = 0x40b0;
  /** Define "CL_SHRT_MAX" with expression '<code>32767</code>', CType: int */
  public static final int CL_SHRT_MAX = 0x7fff;
  /** Define "CL_UNORM_SHORT_555" with expression '<code>0x10D5</code>', CType: int */
  public static final int CL_UNORM_SHORT_555 = 0x10d5;
  /** Define "CL_CONTEXT_PLATFORM" with expression '<code>0x1084</code>', CType: int */
  public static final int CL_CONTEXT_PLATFORM = 0x1084;
  /** Define "CL_DEVICE_MAX_WORK_ITEM_SIZES" with expression '<code>0x1005</code>', CType: int */
  public static final int CL_DEVICE_MAX_WORK_ITEM_SIZES = 0x1005;
  /** Define "CL_EGL_DISPLAY_KHR" with expression '<code>0x2009</code>', CType: int */
  public static final int CL_EGL_DISPLAY_KHR = 0x2009;
  /** Define "CL_M_2_SQRTPI" with expression '<code>1.128379167095512558561</code>', CType: float */
  public static final float CL_M_2_SQRTPI = 1.1283791670955126f;
  /** Define "CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS" with expression '<code>0x1003</code>', CType: int */
  public static final int CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS = 0x1003;
  /** Define "CL_GL_TEXTURE_TARGET" with expression '<code>0x2004</code>', CType: int */
  public static final int CL_GL_TEXTURE_TARGET = 0x2004;
  /** Define "CL_DEVICE_OPENCL_C_VERSION" with expression '<code>0x103D</code>', CType: int */
  public static final int CL_DEVICE_OPENCL_C_VERSION = 0x103d;
  /** Define "CL_MEM_TYPE" with expression '<code>0x1100</code>', CType: int */
  public static final int CL_MEM_TYPE = 0x1100;
  /** Define "CL_INVALID_WORK_GROUP_SIZE" with expression '<code>-54</code>', CType: int */
  public static final int CL_INVALID_WORK_GROUP_SIZE = -54;
  /** Define "CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR" with expression '<code>0x1036</code>', CType: int */
  public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR = 0x1036;
  /** Define "CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_EXT" with expression '<code>0x4053</code>', CType: int */
  public static final int CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_EXT = 0x4053;
  /** Define "CL_COMMAND_COPY_IMAGE" with expression '<code>0x11F8</code>', CType: int */
  public static final int CL_COMMAND_COPY_IMAGE = 0x11f8;
  /** Define "CL_FP_ROUND_TO_INF" with expression '<code>(1 << 4)</code>', CType: int */
  public static final int CL_FP_ROUND_TO_INF = ( 0x1 << 0x4 );
  /** Define "CL_M_PI" with expression '<code>3.141592653589793115998</code>', CType: float */
  public static final float CL_M_PI = 3.141592653589793f;
  /** Define "CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE" with expression '<code>0x101A</code>', CType: int */
  public static final int CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE = 0x101a;
  /** Define "CL_RA" with expression '<code>0x10B3</code>', CType: int */
  public static final int CL_RA = 0x10b3;
  /** Define "CL_FLT_MANT_DIG" with expression '<code>24</code>', CType: int */
  public static final int CL_FLT_MANT_DIG = 0x18;
  /** Define "CL_DBL_MIN" with expression '<code>0x1.0p-1022</code>', CType: double */
  public static final double CL_DBL_MIN = 2.2250738585072014E-308;
  /** Define "CL_COMMAND_COPY_IMAGE_TO_BUFFER" with expression '<code>0x11F9</code>', CType: int */
  public static final int CL_COMMAND_COPY_IMAGE_TO_BUFFER = 0x11f9;
  /** Define "cl_khr_gl_sharing" with expression '<code>1</code>', CType: int */
  public static final int cl_khr_gl_sharing = 0x1;
  /** Define "CL_DEVICE_MAX_CONSTANT_ARGS" with expression '<code>0x1021</code>', CType: int */
  public static final int CL_DEVICE_MAX_CONSTANT_ARGS = 0x1021;
  /** Define "CL_DEVICE_GLOBAL_MEM_SIZE" with expression '<code>0x101F</code>', CType: int */
  public static final int CL_DEVICE_GLOBAL_MEM_SIZE = 0x101f;
  /** Define "CL_NONE" with expression '<code>0x0</code>', CType: int */
  public static final int CL_NONE = 0x0;
  /** Define "CL_CONTEXT_REFERENCE_COUNT" with expression '<code>0x1080</code>', CType: int */
  public static final int CL_CONTEXT_REFERENCE_COUNT = 0x1080;
  /** Define "CL_RG" with expression '<code>0x10B2</code>', CType: int */
  public static final int CL_RG = 0x10b2;
  /** Define "CL_FLT_RADIX" with expression '<code>2</code>', CType: int */
  public static final int CL_FLT_RADIX = 0x2;
  /** Define "CL_KERNEL_COMPILE_WORK_GROUP_SIZE" with expression '<code>0x11B1</code>', CType: int */
  public static final int CL_KERNEL_COMPILE_WORK_GROUP_SIZE = 0x11b1;
  /** Define "CL_M_1_PI_F" with expression '<code>0.31830987334251f</code>', CType: float */
  public static final float CL_M_1_PI_F = 0.31830987334251f;
  /** Define "CL_DEVICE_ADDRESS_BITS" with expression '<code>0x100D</code>', CType: int */
  public static final int CL_DEVICE_ADDRESS_BITS = 0x100d;
  /** Define "CL_CGL_SHAREGROUP_KHR" with expression '<code>0x200C</code>', CType: int */
  public static final int CL_CGL_SHAREGROUP_KHR = 0x200c;
  /** Define "CL_Rx" with expression '<code>0x10BA</code>', CType: int */
  public static final int CL_Rx = 0x10ba;
  /** Define "CL_INVALID_KERNEL_NAME" with expression '<code>-46</code>', CType: int */
  public static final int CL_INVALID_KERNEL_NAME = -46;
  /** Define "CL_BUILD_ERROR" with expression '<code>-2</code>', CType: int */
  public static final int CL_BUILD_ERROR = -2;
  /** Define "CL_ADDRESS_CLAMP_TO_EDGE" with expression '<code>0x1131</code>', CType: int */
  public static final int CL_ADDRESS_CLAMP_TO_EDGE = 0x1131;
  /** Define "CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR" with expression '<code>0x200D</code>', CType: int */
  public static final int CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR = 0x200d;
  /** Define "CL_DEVICE_GLOBAL_MEM_CACHE_SIZE" with expression '<code>0x101E</code>', CType: int */
  public static final int CL_DEVICE_GLOBAL_MEM_CACHE_SIZE = 0x101e;
  /** Define "CL_MEM_CONTEXT" with expression '<code>0x1106</code>', CType: int */
  public static final int CL_MEM_CONTEXT = 0x1106;
  /** Define "CL_COMMAND_READ_BUFFER" with expression '<code>0x11F3</code>', CType: int */
  public static final int CL_COMMAND_READ_BUFFER = 0x11f3;
  /** Define "CL_FP_ROUND_TO_ZERO" with expression '<code>(1 << 3)</code>', CType: int */
  public static final int CL_FP_ROUND_TO_ZERO = ( 0x1 << 0x3 );
  /** Define "CL_IMAGE_ROW_PITCH" with expression '<code>0x1112</code>', CType: int */
  public static final int CL_IMAGE_ROW_PITCH = 0x1112;
  /** Define "CL_DEVICE_WARP_SIZE_NV" with expression '<code>0x4003</code>', CType: int */
  public static final int CL_DEVICE_WARP_SIZE_NV = 0x4003;
  /** Define "CL_M_PI_F" with expression '<code>3.14159274101257f</code>', CType: float */
  public static final float CL_M_PI_F = 3.14159274101257f;
  /** Define "CL_M_PI_4" with expression '<code>0.785398163397448278999</code>', CType: float */
  public static final float CL_M_PI_4 = 0.7853981633974483f;
  /** Define "CL_PLATFORM_EXTENSIONS" with expression '<code>0x0904</code>', CType: int */
  public static final int CL_PLATFORM_EXTENSIONS = 0x904;
  /** Define "CL_M_PI_2" with expression '<code>1.570796326794896557999</code>', CType: float */
  public static final float CL_M_PI_2 = 1.5707963267948966f;
  /** Define "CL_PROGRAM_CONTEXT" with expression '<code>0x1161</code>', CType: int */
  public static final int CL_PROGRAM_CONTEXT = 0x1161;
  /** Define "CL_M_E_F" with expression '<code>2.71828174591064f</code>', CType: float */
  public static final float CL_M_E_F = 2.71828174591064f;
  /** Define "CL_COMMAND_READ_BUFFER_RECT" with expression '<code>0x1201</code>', CType: int */
  public static final int CL_COMMAND_READ_BUFFER_RECT = 0x1201;
  /** Define "CL_M_SQRT1_2_F" with expression '<code>0.70710676908493f</code>', CType: float */
  public static final float CL_M_SQRT1_2_F = 0.70710676908493f;
  /** Define "CL_MEM_MAP_COUNT" with expression '<code>0x1104</code>', CType: int */
  public static final int CL_MEM_MAP_COUNT = 0x1104;
  /** Define "CL_DEVICE_IMAGE3D_MAX_WIDTH" with expression '<code>0x1013</code>', CType: int */
  public static final int CL_DEVICE_IMAGE3D_MAX_WIDTH = 0x1013;
  /** Define "CL_EVENT_CONTEXT" with expression '<code>0x11D4</code>', CType: int */
  public static final int CL_EVENT_CONTEXT = 0x11d4;
  /** Define "CL_AFFINITY_DOMAIN_NEXT_FISSIONABLE_EXT" with expression '<code>0x100</code>', CType: int */
  public static final int CL_AFFINITY_DOMAIN_NEXT_FISSIONABLE_EXT = 0x100;
  /** Define "CL_DBL_MIN_EXP" with expression '<code>-1021</code>', CType: int */
  public static final int CL_DBL_MIN_EXP = -1021;
  /** Define "CL_M_LN2" with expression '<code>0.693147180559945286227</code>', CType: float */
  public static final float CL_M_LN2 = 0.6931471805599453f;
  /** Define "CL_SIGNED_INT16" with expression '<code>0x10D8</code>', CType: int */
  public static final int CL_SIGNED_INT16 = 0x10d8;
  /** Define "CL_DBL_EPSILON" with expression '<code>0x1.0p-52</code>', CType: float */
  public static final float CL_DBL_EPSILON = 2.220446049250313E-16f;
  /** Define "CL_INVALID_COMMAND_QUEUE" with expression '<code>-36</code>', CType: int */
  public static final int CL_INVALID_COMMAND_QUEUE = -36;
  /** Define "CL_DEVICE_NATIVE_VECTOR_WIDTH_INT" with expression '<code>0x1038</code>', CType: int */
  public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_INT = 0x1038;
  /** Define "CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE" with expression '<code>(1 << 0)</code>', CType: int */
  public static final int CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE = ( 0x1 << 0x0 );
  /** Define "CL_FLT_MAX" with expression '<code>0x1.fffffep127f</code>', CType: float */
  public static final float CL_FLT_MAX = 3.4028234663852886E38f;
  /** Define "CL_LUMINANCE" with expression '<code>0x10B9</code>', CType: int */
  public static final int CL_LUMINANCE = 0x10b9;
  /** Define "CL_DEVICE_AVAILABLE" with expression '<code>0x1027</code>', CType: int */
  public static final int CL_DEVICE_AVAILABLE = 0x1027;
  /** Define "CL_UCHAR_MAX" with expression '<code>255</code>', CType: int */
  public static final int CL_UCHAR_MAX = 0xff;
  /** Define "CL_DEVICE_IMAGE_SUPPORT" with expression '<code>0x1016</code>', CType: int */
  public static final int CL_DEVICE_IMAGE_SUPPORT = 0x1016;
  /** Define "CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF" with expression '<code>0x1034</code>', CType: int */
  public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF = 0x1034;
  /** Define "CL_DEVICE_REGISTERS_PER_BLOCK_NV" with expression '<code>0x4002</code>', CType: int */
  public static final int CL_DEVICE_REGISTERS_PER_BLOCK_NV = 0x4002;
  /** Define "CL_GLX_DISPLAY_KHR" with expression '<code>0x200A</code>', CType: int */
  public static final int CL_GLX_DISPLAY_KHR = 0x200a;
  /** Define "CL_PROGRAM_NUM_DEVICES" with expression '<code>0x1162</code>', CType: int */
  public static final int CL_PROGRAM_NUM_DEVICES = 0x1162;
  /** Define "CL_INVALID_BINARY" with expression '<code>-42</code>', CType: int */
  public static final int CL_INVALID_BINARY = -42;
  /** Define "CL_DEVICE_PARENT_DEVICE_EXT" with expression '<code>0x4054</code>', CType: int */
  public static final int CL_DEVICE_PARENT_DEVICE_EXT = 0x4054;
  /** Define "CL_MEM_OFFSET" with expression '<code>0x1108</code>', CType: int */
  public static final int CL_MEM_OFFSET = 0x1108;
  /** Define "CL_INVALID_ARG_SIZE" with expression '<code>-51</code>', CType: int */
  public static final int CL_INVALID_ARG_SIZE = -51;
  /** Define "CL_FLT_DIG" with expression '<code>6</code>', CType: int */
  public static final int CL_FLT_DIG = 0x6;
  /** Define "CL_M_LN10" with expression '<code>2.302585092994045901094</code>', CType: float */
  public static final float CL_M_LN10 = 2.302585092994046f;
  /** Define "CL_UNSIGNED_INT8" with expression '<code>0x10DA</code>', CType: int */
  public static final int CL_UNSIGNED_INT8 = 0x10da;
  /** Define "CL_PROGRAM_BUILD_LOG" with expression '<code>0x1183</code>', CType: int */
  public static final int CL_PROGRAM_BUILD_LOG = 0x1183;
  /** Define "CL_INVALID_EVENT_WAIT_LIST" with expression '<code>-57</code>', CType: int */
  public static final int CL_INVALID_EVENT_WAIT_LIST = -57;
  /** Define "CL_COMMAND_MARKER" with expression '<code>0x11FE</code>', CType: int */
  public static final int CL_COMMAND_MARKER = 0x11fe;
  /** Define "CL_DEVICE_TYPE_DEFAULT" with expression '<code>(1 << 0)</code>', CType: int */
  public static final int CL_DEVICE_TYPE_DEFAULT = ( 0x1 << 0x0 );
  /** Define "CL_SIGNED_INT32" with expression '<code>0x10D9</code>', CType: int */
  public static final int CL_SIGNED_INT32 = 0x10d9;
  /** Define "CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE" with expression '<code>0x101D</code>', CType: int */
  public static final int CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE = 0x101d;
  /** Define "CL_PLATFORM_NAME" with expression '<code>0x0902</code>', CType: int */
  public static final int CL_PLATFORM_NAME = 0x902;
  /** Define "CL_EVENT_COMMAND_TYPE" with expression '<code>0x11D1</code>', CType: int */
  public static final int CL_EVENT_COMMAND_TYPE = 0x11d1;
  /** Define "CL_READ_WRITE_CACHE" with expression '<code>0x2</code>', CType: int */
  public static final int CL_READ_WRITE_CACHE = 0x2;
  /** Define "CL_BUFFER_CREATE_TYPE_REGION" with expression '<code>0x1220</code>', CType: int */
  public static final int CL_BUFFER_CREATE_TYPE_REGION = 0x1220;
  /** Define "CL_RGx" with expression '<code>0x10BB</code>', CType: int */
  public static final int CL_RGx = 0x10bb;
  /** Define "CL_PRINTF_BUFFERSIZE_ARM" with expression '<code>0x40B1</code>', CType: int */
  public static final int CL_PRINTF_BUFFERSIZE_ARM = 0x40b1;
  /** Define "CL_M_LOG2E_F" with expression '<code>1.44269502162933f</code>', CType: float */
  public static final float CL_M_LOG2E_F = 1.44269502162933f;
  /** Define "CL_EVENT_COMMAND_QUEUE" with expression '<code>0x11D0</code>', CType: int */
  public static final int CL_EVENT_COMMAND_QUEUE = 0x11d0;
  /** Define "CL_M_LOG10E" with expression '<code>0.434294481903251816668</code>', CType: float */
  public static final float CL_M_LOG10E = 0.4342944819032518f;
  /** Define "CL_INVALID_PROGRAM" with expression '<code>-44</code>', CType: int */
  public static final int CL_INVALID_PROGRAM = -44;
  /** Define "CL_DEVICE_LOCAL_MEM_SIZE" with expression '<code>0x1023</code>', CType: int */
  public static final int CL_DEVICE_LOCAL_MEM_SIZE = 0x1023;
  /** Define "CL_PROGRAM_DEVICES" with expression '<code>0x1163</code>', CType: int */
  public static final int CL_PROGRAM_DEVICES = 0x1163;
  /** Define "CL_INVALID_IMAGE_SIZE" with expression '<code>-40</code>', CType: int */
  public static final int CL_INVALID_IMAGE_SIZE = -40;
  /** Define "CL_FILTER_NEAREST" with expression '<code>0x1140</code>', CType: int */
  public static final int CL_FILTER_NEAREST = 0x1140;
  /** Define "CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR" with expression '<code>0x2006</code>', CType: int */
  public static final int CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR = 0x2006;
  /** Define "CL_DEVICE_PROFILE" with expression '<code>0x102E</code>', CType: int */
  public static final int CL_DEVICE_PROFILE = 0x102e;
  /** Define "CL_DEVICE_HOST_UNIFIED_MEMORY" with expression '<code>0x1035</code>', CType: int */
  public static final int CL_DEVICE_HOST_UNIFIED_MEMORY = 0x1035;
  /** Define "CL_QUEUE_DEVICE" with expression '<code>0x1091</code>', CType: int */
  public static final int CL_QUEUE_DEVICE = 0x1091;
  /** Define "CL_IMAGE_WIDTH" with expression '<code>0x1114</code>', CType: int */
  public static final int CL_IMAGE_WIDTH = 0x1114;
  /** Define "CL_SAMPLER_REFERENCE_COUNT" with expression '<code>0x1150</code>', CType: int */
  public static final int CL_SAMPLER_REFERENCE_COUNT = 0x1150;
  /** Define "CL_FP_SOFT_FLOAT" with expression '<code>(1 << 6)</code>', CType: int */
  public static final int CL_FP_SOFT_FLOAT = ( 0x1 << 0x6 );
  /** Define "CL_GL_OBJECT_BUFFER" with expression '<code>0x2000</code>', CType: int */
  public static final int CL_GL_OBJECT_BUFFER = 0x2000;
  /** Define "CL_INVALID_HOST_PTR" with expression '<code>-37</code>', CType: int */
  public static final int CL_INVALID_HOST_PTR = -37;
  /** Define "CL_M_SQRT2" with expression '<code>1.414213562373095145475</code>', CType: float */
  public static final float CL_M_SQRT2 = 1.4142135623730951f;
  /** Define "CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV" with expression '<code>0x4000</code>', CType: int */
  public static final int CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV = 0x4000;
  /** Define "CL_SHRT_MIN" with expression '<code>(-32767-1)</code>', CType: int */
  public static final int CL_SHRT_MIN = ( - 0x7fff - 0x1 );
  /** Define "CL_GL_CONTEXT_KHR" with expression '<code>0x2008</code>', CType: int */
  public static final int CL_GL_CONTEXT_KHR = 0x2008;
  /** Define "CL_KERNEL_WORK_GROUP_SIZE" with expression '<code>0x11B0</code>', CType: int */
  public static final int CL_KERNEL_WORK_GROUP_SIZE = 0x11b0;
  /** Define "CL_MEM_COPY_HOST_PTR" with expression '<code>(1 << 5)</code>', CType: int */
  public static final int CL_MEM_COPY_HOST_PTR = ( 0x1 << 0x5 );
  /** Define "CL_PROGRAM_BINARY_SIZES" with expression '<code>0x1165</code>', CType: int */
  public static final int CL_PROGRAM_BINARY_SIZES = 0x1165;
  /** Define "CL_WGL_HDC_KHR" with expression '<code>0x200B</code>', CType: int */
  public static final int CL_WGL_HDC_KHR = 0x200b;
  /** Define "CL_INVALID_DEVICE" with expression '<code>-33</code>', CType: int */
  public static final int CL_INVALID_DEVICE = -33;
  /** Define "CL_DEVICE_TYPE_ALL" with expression '<code>0xFFFFFFFF</code>', CType: long */
  public static final long CL_DEVICE_TYPE_ALL = 0xffffffffL;
  /** Define "CL_INVALID_WORK_DIMENSION" with expression '<code>-53</code>', CType: int */
  public static final int CL_INVALID_WORK_DIMENSION = -53;
  /** Define "CL_DEVICE_DOUBLE_FP_CONFIG" with expression '<code>0x1032</code>', CType: int */
  public static final int CL_DEVICE_DOUBLE_FP_CONFIG = 0x1032;
  /** Define "CL_DEVICE_NAME" with expression '<code>0x102B</code>', CType: int */
  public static final int CL_DEVICE_NAME = 0x102b;
  /** Define "CL_COMMAND_MAP_BUFFER" with expression '<code>0x11FB</code>', CType: int */
  public static final int CL_COMMAND_MAP_BUFFER = 0x11fb;
  /** Define "CL_MEM_ASSOCIATED_MEMOBJECT" with expression '<code>0x1107</code>', CType: int */
  public static final int CL_MEM_ASSOCIATED_MEMOBJECT = 0x1107;
  /** Define "CL_HALF_FLOAT" with expression '<code>0x10DD</code>', CType: int */
  public static final int CL_HALF_FLOAT = 0x10dd;
  /** Define "CL_DEVICE_TYPE_CPU" with expression '<code>(1 << 1)</code>', CType: int */
  public static final int CL_DEVICE_TYPE_CPU = ( 0x1 << 0x1 );
  /** Define "CL_COMMAND_NDRANGE_KERNEL" with expression '<code>0x11F0</code>', CType: int */
  public static final int CL_COMMAND_NDRANGE_KERNEL = 0x11f0;
  /** Define "CL_AFFINITY_DOMAIN_L2_CACHE_EXT" with expression '<code>0x2</code>', CType: int */
  public static final int CL_AFFINITY_DOMAIN_L2_CACHE_EXT = 0x2;
  /** Define "CL_INVALID_PROPERTY" with expression '<code>-64</code>', CType: int */
  public static final int CL_INVALID_PROPERTY = -64;
  /** Define "CL_DEVICE_VERSION" with expression '<code>0x102F</code>', CType: int */
  public static final int CL_DEVICE_VERSION = 0x102f;
  /** Define "CL_DEVICE_SINGLE_FP_CONFIG" with expression '<code>0x101B</code>', CType: int */
  public static final int CL_DEVICE_SINGLE_FP_CONFIG = 0x101b;
  /** Define "CL_QUEUED" with expression '<code>0x3</code>', CType: int */
  public static final int CL_QUEUED = 0x3;
  /** Define "CL_DEVICE_MEM_BASE_ADDR_ALIGN" with expression '<code>0x1019</code>', CType: int */
  public static final int CL_DEVICE_MEM_BASE_ADDR_ALIGN = 0x1019;
  /** Define "CL_DEVICE_PROFILING_TIMER_OFFSET_AMD" with expression '<code>0x4036</code>', CType: int */
  public static final int CL_DEVICE_PROFILING_TIMER_OFFSET_AMD = 0x4036;
  /** Define "CL_INVALID_OPERATION" with expression '<code>-59</code>', CType: int */
  public static final int CL_INVALID_OPERATION = -59;
  /** Define "CL_MEM_OBJECT_IMAGE3D" with expression '<code>0x10F2</code>', CType: int */
  public static final int CL_MEM_OBJECT_IMAGE3D = 0x10f2;
  /** Define "CL_MEM_ALLOC_HOST_PTR" with expression '<code>(1 << 4)</code>', CType: int */
  public static final int CL_MEM_ALLOC_HOST_PTR = ( 0x1 << 0x4 );
  /** Define "CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT" with expression '<code>0x1007</code>', CType: int */
  public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT = 0x1007;
  /** Define "KHRONOS_SUPPORT_INT64" with expression '<code>1</code>', CType: int */
  public static final int KHRONOS_SUPPORT_INT64 = 0x1;
  /** Define "CL_DEVICE_MAX_READ_IMAGE_ARGS" with expression '<code>0x100E</code>', CType: int */
  public static final int CL_DEVICE_MAX_READ_IMAGE_ARGS = 0x100e;
  /** Define "CL_CONTEXT_DEVICES" with expression '<code>0x1081</code>', CType: int */
  public static final int CL_CONTEXT_DEVICES = 0x1081;
  /** Define "CL_KERNEL_REFERENCE_COUNT" with expression '<code>0x1192</code>', CType: int */
  public static final int CL_KERNEL_REFERENCE_COUNT = 0x1192;
  /** Define "CL_DEVICE_PARTITION_FAILED_EXT" with expression '<code>-1057</code>', CType: int */
  public static final int CL_DEVICE_PARTITION_FAILED_EXT = -1057;
  /** Define "CL_DEVICE_NOT_FOUND" with expression '<code>-1</code>', CType: int */
  public static final int CL_DEVICE_NOT_FOUND = -1;
  /** Define "CL_MEM_OBJECT_IMAGE2D" with expression '<code>0x10F1</code>', CType: int */
  public static final int CL_MEM_OBJECT_IMAGE2D = 0x10f1;
  /** Define "CL_DEVICE_AFFINITY_DOMAINS_EXT" with expression '<code>0x4056</code>', CType: int */
  public static final int CL_DEVICE_AFFINITY_DOMAINS_EXT = 0x4056;
  /** Define "CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT" with expression '<code>0x1008</code>', CType: int */
  public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT = 0x1008;
  /** Define "CL_INVALID_KERNEL_DEFINITION" with expression '<code>-47</code>', CType: int */
  public static final int CL_INVALID_KERNEL_DEFINITION = -47;
  /** Define "CL_M_2_PI_F" with expression '<code>0.63661974668503f</code>', CType: float */
  public static final float CL_M_2_PI_F = 0.63661974668503f;
  /** Define "CL_KERNEL_PRIVATE_MEM_SIZE" with expression '<code>0x11B4</code>', CType: int */
  public static final int CL_KERNEL_PRIVATE_MEM_SIZE = 0x11b4;
  /** Define "CL_INVALID_GLOBAL_OFFSET" with expression '<code>-56</code>', CType: int */
  public static final int CL_INVALID_GLOBAL_OFFSET = -56;
  /** Define "CL_COMMAND_COPY_BUFFER_RECT" with expression '<code>0x1203</code>', CType: int */
  public static final int CL_COMMAND_COPY_BUFFER_RECT = 0x1203;
  /** Define "CL_PLATFORM_ICD_SUFFIX_KHR" with expression '<code>0x0920</code>', CType: int */
  public static final int CL_PLATFORM_ICD_SUFFIX_KHR = 0x920;
  /** Define "CL_CONTEXT_PROPERTIES" with expression '<code>0x1082</code>', CType: int */
  public static final int CL_CONTEXT_PROPERTIES = 0x1082;
  /** Define "CL_COMMAND_TASK" with expression '<code>0x11F1</code>', CType: int */
  public static final int CL_COMMAND_TASK = 0x11f1;
  /** Define "CL_QUEUE_CONTEXT" with expression '<code>0x1090</code>', CType: int */
  public static final int CL_QUEUE_CONTEXT = 0x1090;
  /** Define "CL_DEVICE_QUEUE_PROPERTIES" with expression '<code>0x102A</code>', CType: int */
  public static final int CL_DEVICE_QUEUE_PROPERTIES = 0x102a;
  /** Define "CL_MEM_OBJECT_BUFFER" with expression '<code>0x10F0</code>', CType: int */
  public static final int CL_MEM_OBJECT_BUFFER = 0x10f0;
  /** Define "CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR" with expression '<code>-1000</code>', CType: int */
  public static final int CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR = -1000;
  /** Define "CL_AFFINITY_DOMAIN_L1_CACHE_EXT" with expression '<code>0x1</code>', CType: int */
  public static final int CL_AFFINITY_DOMAIN_L1_CACHE_EXT = 0x1;
  /** Define "CL_INVALID_GL_OBJECT" with expression '<code>-60</code>', CType: int */
  public static final int CL_INVALID_GL_OBJECT = -60;
  /** Define "CL_MISALIGNED_SUB_BUFFER_OFFSET" with expression '<code>-13</code>', CType: int */
  public static final int CL_MISALIGNED_SUB_BUFFER_OFFSET = -13;
  /** Define "CL_COMMAND_RELEASE_GL_OBJECTS" with expression '<code>0x1200</code>', CType: int */
  public static final int CL_COMMAND_RELEASE_GL_OBJECTS = 0x1200;
  /** Define "CL_GL_OBJECT_TEXTURE2D" with expression '<code>0x2001</code>', CType: int */
  public static final int CL_GL_OBJECT_TEXTURE2D = 0x2001;
  /** Define "CL_USHRT_MAX" with expression '<code>65535</code>', CType: int */
  public static final int CL_USHRT_MAX = 0xffff;
  /** Define "CL_SNORM_INT16" with expression '<code>0x10D1</code>', CType: int */
  public static final int CL_SNORM_INT16 = 0x10d1;
  /** Define "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR" with expression '<code>-39</code>', CType: int */
  public static final int CL_INVALID_IMAGE_FORMAT_DESCRIPTOR = -39;
  /** Define "CL_CHAR_MIN" with expression '<code>(-127-1)</code>', CType: int */
  public static final int CL_CHAR_MIN = ( - 0x7f - 0x1 );
  /** Define "CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE" with expression '<code>0x1020</code>', CType: int */
  public static final int CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE = 0x1020;
  /** Define "CL_DEVICE_MAX_WORK_GROUP_SIZE" with expression '<code>0x1004</code>', CType: int */
  public static final int CL_DEVICE_MAX_WORK_GROUP_SIZE = 0x1004;
  /** Define "CL_ADDRESS_MIRRORED_REPEAT" with expression '<code>0x1134</code>', CType: int */
  public static final int CL_ADDRESS_MIRRORED_REPEAT = 0x1134;
  /** Define "CL_COMMAND_MAP_IMAGE" with expression '<code>0x11FC</code>', CType: int */
  public static final int CL_COMMAND_MAP_IMAGE = 0x11fc;
  /** Define "CL_GLOBAL" with expression '<code>0x2</code>', CType: int */
  public static final int CL_GLOBAL = 0x2;
  /** Define "cl_ext_device_fission" with expression '<code>1</code>', CType: int */
  public static final int cl_ext_device_fission = 0x1;
  /** Define "CL_INVALID_QUEUE_PROPERTIES" with expression '<code>-35</code>', CType: int */
  public static final int CL_INVALID_QUEUE_PROPERTIES = -35;
  /** Define "CL_MEM_REFERENCE_COUNT" with expression '<code>0x1105</code>', CType: int */
  public static final int CL_MEM_REFERENCE_COUNT = 0x1105;
  /** Define "CL_GL_OBJECT_TEXTURE3D" with expression '<code>0x2002</code>', CType: int */
  public static final int CL_GL_OBJECT_TEXTURE3D = 0x2002;
  /** Define "CL_DRIVER_VERSION" with expression '<code>0x102D</code>', CType: int */
  public static final int CL_DRIVER_VERSION = 0x102d;
  /** Define "CL_DEVICE_VENDOR_ID" with expression '<code>0x1001</code>', CType: int */
  public static final int CL_DEVICE_VENDOR_ID = 0x1001;
  /** Define "CL_SAMPLER_CONTEXT" with expression '<code>0x1151</code>', CType: int */
  public static final int CL_SAMPLER_CONTEXT = 0x1151;
  /** Define "HAS_STDDEF" with expression '<code>1</code>', CType: int */
  public static final int HAS_STDDEF = 0x1;
  /** Define "CL_FLT_MAX_10_EXP" with expression '<code>+38</code>', CType: int */
  public static final int CL_FLT_MAX_10_EXP = 0x26;
  /** Define "CL_M_LOG10E_F" with expression '<code>0.43429449200630f</code>', CType: float */
  public static final float CL_M_LOG10E_F = 0.4342944920063f;
  /** Define "CL_FP_ROUND_TO_NEAREST" with expression '<code>(1 << 2)</code>', CType: int */
  public static final int CL_FP_ROUND_TO_NEAREST = ( 0x1 << 0x2 );
  /** Define "CL_DEVICE_ERROR_CORRECTION_SUPPORT" with expression '<code>0x1024</code>', CType: int */
  public static final int CL_DEVICE_ERROR_CORRECTION_SUPPORT = 0x1024;
  /** Define "CL_DEVICE_ENDIAN_LITTLE" with expression '<code>0x1026</code>', CType: int */
  public static final int CL_DEVICE_ENDIAN_LITTLE = 0x1026;
  /** Define "CL_EXEC_NATIVE_KERNEL" with expression '<code>(1 << 1)</code>', CType: int */
  public static final int CL_EXEC_NATIVE_KERNEL = ( 0x1 << 0x1 );
  /** Define "CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF" with expression '<code>0x103C</code>', CType: int */
  public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF = 0x103c;
  /** Define "CL_COMMAND_WRITE_IMAGE" with expression '<code>0x11F7</code>', CType: int */
  public static final int CL_COMMAND_WRITE_IMAGE = 0x11f7;
  /** Define "CL_SCHAR_MIN" with expression '<code>(-127-1)</code>', CType: int */
  public static final int CL_SCHAR_MIN = ( - 0x7f - 0x1 );
  /** Define "CL_OUT_OF_HOST_MEMORY" with expression '<code>-6</code>', CType: int */
  public static final int CL_OUT_OF_HOST_MEMORY = -6;
  /** Define "CL_M_LOG2E" with expression '<code>1.442695040888963387005</code>', CType: float */
  public static final float CL_M_LOG2E = 1.4426950408889634f;
  /** Define "CL_MEM_READ_WRITE" with expression '<code>(1 << 0)</code>', CType: int */
  public static final int CL_MEM_READ_WRITE = ( 0x1 << 0x0 );
  /** Define "CL_INVALID_MEM_OBJECT" with expression '<code>-38</code>', CType: int */
  public static final int CL_INVALID_MEM_OBJECT = -38;
  /** Define "CL_MAP_READ" with expression '<code>(1 << 0)</code>', CType: int */
  public static final int CL_MAP_READ = ( 0x1 << 0x0 );
  /** Define "CL_FALSE" with expression '<code>0</code>', CType: int */
  public static final int CL_FALSE = 0x0;
  /** Define "CL_QUEUE_REFERENCE_COUNT" with expression '<code>0x1092</code>', CType: int */
  public static final int CL_QUEUE_REFERENCE_COUNT = 0x1092;
  /** Define "CL_DBL_MANT_DIG" with expression '<code>53</code>', CType: int */
  public static final int CL_DBL_MANT_DIG = 0x35;
  /** Define "CL_DEVICE_INTEGRATED_MEMORY_NV" with expression '<code>0x4006</code>', CType: int */
  public static final int CL_DEVICE_INTEGRATED_MEMORY_NV = 0x4006;
  /** Define "CL_MEM_SIZE" with expression '<code>0x1102</code>', CType: int */
  public static final int CL_MEM_SIZE = 0x1102;

  /** Interface to C language function: <br> <code>cl_int {@native clGetPlatformIDs}(cl_uint num_entries, cl_platform_id *  platforms, cl_uint *  num_platforms)</code><br>
      @param platforms a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param num_platforms a direct only {@link java.nio.IntBuffer}   */
  public int clGetPlatformIDs(int num_entries, PointerBuffer platforms, IntBuffer num_platforms);

  /** Interface to C language function: <br> <code>cl_int {@native clGetPlatformInfo}(cl_platform_id platform, cl_platform_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetPlatformInfo(long platform, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_int {@native clGetDeviceIDs}(cl_platform_id platform, cl_device_type device_type, cl_uint num_entries, cl_device_id *  devices, cl_uint *  num_devices)</code><br>
      @param devices a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param num_devices a direct only {@link java.nio.IntBuffer}   */
  public int clGetDeviceIDs(long platform, long device_type, int num_entries, PointerBuffer devices, IntBuffer num_devices);

  /** Interface to C language function: <br> <code>cl_int {@native clGetDeviceInfo}(cl_device_id device, cl_device_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetDeviceInfo(long device, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_int {@native clRetainContext}(cl_context context)</code><br>   */
  public int clRetainContext(long context);

  /** Interface to C language function: <br> <code>cl_int {@native clReleaseContext}(cl_context context)</code><br>   */
  public int clReleaseContext(long context);

  /** Interface to C language function: <br> <code>cl_int {@native clGetContextInfo}(cl_context context, cl_context_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetContextInfo(long context, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_command_queue {@native clCreateCommandQueue}(cl_context context, cl_device_id device, cl_command_queue_properties properties, cl_int *  errcode_ret)</code><br>
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateCommandQueue(long context, long device, long properties, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_command_queue {@native clCreateCommandQueue}(cl_context context, cl_device_id device, cl_command_queue_properties properties, cl_int *  errcode_ret)</code><br>   */
  public long clCreateCommandQueue(long context, long device, long properties, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_int {@native clRetainCommandQueue}(cl_command_queue command_queue)</code><br>   */
  public int clRetainCommandQueue(long command_queue);

  /** Interface to C language function: <br> <code>cl_int {@native clReleaseCommandQueue}(cl_command_queue command_queue)</code><br>   */
  public int clReleaseCommandQueue(long command_queue);

  /** Interface to C language function: <br> <code>cl_int {@native clGetCommandQueueInfo}(cl_command_queue command_queue, cl_command_queue_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetCommandQueueInfo(long command_queue, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateBuffer}(cl_context context, cl_mem_flags flags, size_t size, void *  host_ptr, cl_int *  errcode_ret)</code><br>
      @param host_ptr a direct or array-backed {@link java.nio.Buffer}
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateBuffer(long context, long flags, long size, Buffer host_ptr, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateBuffer}(cl_context context, cl_mem_flags flags, size_t size, void *  host_ptr, cl_int *  errcode_ret)</code><br>
      @param host_ptr a direct or array-backed {@link java.nio.Buffer}   */
  public long clCreateBuffer(long context, long flags, long size, Buffer host_ptr, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateSubBuffer}(cl_mem buffer, cl_mem_flags flags, cl_buffer_create_type buffer_create_type, const void *  buffer_create_info, cl_int *  errcode_ret)</code><br>
      @param buffer_create_info a direct or array-backed {@link java.nio.Buffer}
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateSubBuffer(long buffer, long flags, int buffer_create_type, Buffer buffer_create_info, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateSubBuffer}(cl_mem buffer, cl_mem_flags flags, cl_buffer_create_type buffer_create_type, const void *  buffer_create_info, cl_int *  errcode_ret)</code><br>
      @param buffer_create_info a direct or array-backed {@link java.nio.Buffer}   */
  public long clCreateSubBuffer(long buffer, long flags, int buffer_create_type, Buffer buffer_create_info, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateImage2D}(cl_context context, cl_mem_flags flags, const cl_image_format *  image_format, size_t image_width, size_t image_height, size_t image_row_pitch, void *  host_ptr, cl_int *  errcode_ret)</code><br>
      @param host_ptr a direct or array-backed {@link java.nio.Buffer}
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateImage2D(long context, long flags, CLImageFormatImpl image_format, long image_width, long image_height, long image_row_pitch, Buffer host_ptr, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateImage2D}(cl_context context, cl_mem_flags flags, const cl_image_format *  image_format, size_t image_width, size_t image_height, size_t image_row_pitch, void *  host_ptr, cl_int *  errcode_ret)</code><br>
      @param host_ptr a direct or array-backed {@link java.nio.Buffer}   */
  public long clCreateImage2D(long context, long flags, CLImageFormatImpl image_format, long image_width, long image_height, long image_row_pitch, Buffer host_ptr, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateImage3D}(cl_context context, cl_mem_flags flags, const cl_image_format *  image_format, size_t image_width, size_t image_height, size_t image_depth, size_t image_row_pitch, size_t image_slice_pitch, void *  host_ptr, cl_int *  errcode_ret)</code><br>
      @param host_ptr a direct or array-backed {@link java.nio.Buffer}
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateImage3D(long context, long flags, CLImageFormatImpl image_format, long image_width, long image_height, long image_depth, long image_row_pitch, long image_slice_pitch, Buffer host_ptr, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateImage3D}(cl_context context, cl_mem_flags flags, const cl_image_format *  image_format, size_t image_width, size_t image_height, size_t image_depth, size_t image_row_pitch, size_t image_slice_pitch, void *  host_ptr, cl_int *  errcode_ret)</code><br>
      @param host_ptr a direct or array-backed {@link java.nio.Buffer}   */
  public long clCreateImage3D(long context, long flags, CLImageFormatImpl image_format, long image_width, long image_height, long image_depth, long image_row_pitch, long image_slice_pitch, Buffer host_ptr, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_int {@native clRetainMemObject}(cl_mem memobj)</code><br>   */
  public int clRetainMemObject(long memobj);

  /** Interface to C language function: <br> <code>cl_int {@native clReleaseMemObject}(cl_mem memobj)</code><br>   */
  public int clReleaseMemObject(long memobj);

  /** Interface to C language function: <br> <code>cl_int {@native clGetSupportedImageFormats}(cl_context context, cl_mem_flags flags, cl_mem_object_type image_type, cl_uint num_entries, cl_image_format *  image_formats, cl_uint *  num_image_formats)</code><br>
      @param num_image_formats a direct or array-backed {@link java.nio.IntBuffer}   */
  public int clGetSupportedImageFormats(long context, long flags, int image_type, int num_entries, CLImageFormatImpl image_formats, IntBuffer num_image_formats);

  /** Interface to C language function: <br> <code>cl_int {@native clGetSupportedImageFormats}(cl_context context, cl_mem_flags flags, cl_mem_object_type image_type, cl_uint num_entries, cl_image_format *  image_formats, cl_uint *  num_image_formats)</code><br>   */
  public int clGetSupportedImageFormats(long context, long flags, int image_type, int num_entries, CLImageFormatImpl image_formats, int[] num_image_formats, int num_image_formats_offset);

  /** Interface to C language function: <br> <code>cl_int {@native clGetMemObjectInfo}(cl_mem memobj, cl_mem_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetMemObjectInfo(long memobj, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_int {@native clGetImageInfo}(cl_mem image, cl_image_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetImageInfo(long image, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_sampler {@native clCreateSampler}(cl_context context, cl_bool normalized_coords, cl_addressing_mode addressing_mode, cl_filter_mode filter_mode, cl_int *  errcode_ret)</code><br>
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateSampler(long context, int normalized_coords, int addressing_mode, int filter_mode, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_sampler {@native clCreateSampler}(cl_context context, cl_bool normalized_coords, cl_addressing_mode addressing_mode, cl_filter_mode filter_mode, cl_int *  errcode_ret)</code><br>   */
  public long clCreateSampler(long context, int normalized_coords, int addressing_mode, int filter_mode, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_int {@native clRetainSampler}(cl_sampler sampler)</code><br>   */
  public int clRetainSampler(long sampler);

  /** Interface to C language function: <br> <code>cl_int {@native clReleaseSampler}(cl_sampler sampler)</code><br>   */
  public int clReleaseSampler(long sampler);

  /** Interface to C language function: <br> <code>cl_int {@native clGetSamplerInfo}(cl_sampler sampler, cl_sampler_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetSamplerInfo(long sampler, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_program {@native clCreateProgramWithSource}(cl_context context, cl_uint count, const char *  *  strings, const size_t *  lengths, cl_int *  errcode_ret)</code><br>
      @param lengths a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param errcode_ret a direct only {@link java.nio.IntBuffer}   */
  public long clCreateProgramWithSource(long context, int count, String[] strings, PointerBuffer lengths, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_program {@native clCreateProgramWithBinary}(cl_context context, cl_uint num_devices, const cl_device_id *  device_list, const size_t *  lengths, unsigned const char *  *  binaries, cl_int *  binary_status, cl_int *  errcode_ret)</code><br>
      @param device_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param lengths a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param binaries a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param binary_status a direct only {@link java.nio.IntBuffer}
      @param errcode_ret a direct only {@link java.nio.IntBuffer}   */
  public long clCreateProgramWithBinary(long context, int num_devices, PointerBuffer device_list, PointerBuffer lengths, PointerBuffer binaries, IntBuffer binary_status, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_int {@native clRetainProgram}(cl_program program)</code><br>   */
  public int clRetainProgram(long program);

  /** Interface to C language function: <br> <code>cl_int {@native clReleaseProgram}(cl_program program)</code><br>   */
  public int clReleaseProgram(long program);

  /** Interface to C language function: <br> <code>cl_int {@native clUnloadCompiler}()</code><br>   */
  public int clUnloadCompiler();

  /** Interface to C language function: <br> <code>cl_int {@native clGetProgramInfo}(cl_program program, cl_program_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetProgramInfo(long program, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_int {@native clGetProgramBuildInfo}(cl_program program, cl_device_id device, cl_program_build_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetProgramBuildInfo(long program, long device, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_kernel {@native clCreateKernel}(cl_program program, const char *  kernel_name, cl_int *  errcode_ret)</code><br>
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateKernel(long program, String kernel_name, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_kernel {@native clCreateKernel}(cl_program program, const char *  kernel_name, cl_int *  errcode_ret)</code><br>   */
  public long clCreateKernel(long program, String kernel_name, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_int {@native clCreateKernelsInProgram}(cl_program program, cl_uint num_kernels, cl_kernel *  kernels, cl_uint *  num_kernels_ret)</code><br>
      @param kernels a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param num_kernels_ret a direct only {@link java.nio.IntBuffer}   */
  public int clCreateKernelsInProgram(long program, int num_kernels, PointerBuffer kernels, IntBuffer num_kernels_ret);

  /** Interface to C language function: <br> <code>cl_int {@native clRetainKernel}(cl_kernel kernel)</code><br>   */
  public int clRetainKernel(long kernel);

  /** Interface to C language function: <br> <code>cl_int {@native clReleaseKernel}(cl_kernel kernel)</code><br>   */
  public int clReleaseKernel(long kernel);

  /** Interface to C language function: <br> <code>cl_int {@native clSetKernelArg}(cl_kernel kernel, cl_uint arg_index, size_t arg_size, const void *  arg_value)</code><br>
      @param arg_value a direct only {@link java.nio.Buffer}   */
  public int clSetKernelArg(long kernel, int arg_index, long arg_size, Buffer arg_value);

  /** Interface to C language function: <br> <code>cl_int {@native clGetKernelInfo}(cl_kernel kernel, cl_kernel_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetKernelInfo(long kernel, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_int {@native clGetKernelWorkGroupInfo}(cl_kernel kernel, cl_device_id device, cl_kernel_work_group_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetKernelWorkGroupInfo(long kernel, long device, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_int {@native clWaitForEvents}(cl_uint num_events, const cl_event *  event_list)</code><br>
      @param event_list a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clWaitForEvents(int num_events, PointerBuffer event_list);

  /** Interface to C language function: <br> <code>cl_int {@native clGetEventInfo}(cl_event event, cl_event_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetEventInfo(long event, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_event {@native clCreateUserEvent}(cl_context context, cl_int *  errcode_ret)</code><br>
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateUserEvent(long context, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_event {@native clCreateUserEvent}(cl_context context, cl_int *  errcode_ret)</code><br>   */
  public long clCreateUserEvent(long context, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_int {@native clRetainEvent}(cl_event event)</code><br>   */
  public int clRetainEvent(long event);

  /** Interface to C language function: <br> <code>cl_int {@native clReleaseEvent}(cl_event event)</code><br>   */
  public int clReleaseEvent(long event);

  /** Interface to C language function: <br> <code>cl_int {@native clSetUserEventStatus}(cl_event event, cl_int execution_status)</code><br>   */
  public int clSetUserEventStatus(long event, int execution_status);

  /** Interface to C language function: <br> <code>cl_int {@native clGetEventProfilingInfo}(cl_event event, cl_profiling_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetEventProfilingInfo(long event, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_int {@native clFlush}(cl_command_queue command_queue)</code><br>   */
  public int clFlush(long command_queue);

  /** Interface to C language function: <br> <code>cl_int {@native clFinish}(cl_command_queue command_queue)</code><br>   */
  public int clFinish(long command_queue);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueReadBuffer}(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_read, size_t offset, size_t cb, void *  ptr, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param ptr a direct only {@link java.nio.Buffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueReadBuffer(long command_queue, long buffer, int blocking_read, long offset, long cb, Buffer ptr, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueReadBufferRect}(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_read, const size_t *  buffer_origin, const size_t *  host_origin, const size_t *  region, size_t buffer_row_pitch, size_t buffer_slice_pitch, size_t host_row_pitch, size_t host_slice_pitch, void *  ptr, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param buffer_origin a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param host_origin a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param region a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param ptr a direct only {@link java.nio.Buffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueReadBufferRect(long command_queue, long buffer, int blocking_read, PointerBuffer buffer_origin, PointerBuffer host_origin, PointerBuffer region, long buffer_row_pitch, long buffer_slice_pitch, long host_row_pitch, long host_slice_pitch, Buffer ptr, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueWriteBuffer}(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_write, size_t offset, size_t cb, const void *  ptr, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param ptr a direct only {@link java.nio.Buffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueWriteBuffer(long command_queue, long buffer, int blocking_write, long offset, long cb, Buffer ptr, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueWriteBufferRect}(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_write, const size_t *  buffer_origin, const size_t *  host_origin, const size_t *  region, size_t buffer_row_pitch, size_t buffer_slice_pitch, size_t host_row_pitch, size_t host_slice_pitch, const void *  ptr, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param buffer_origin a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param host_origin a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param region a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param ptr a direct only {@link java.nio.Buffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueWriteBufferRect(long command_queue, long buffer, int blocking_write, PointerBuffer buffer_origin, PointerBuffer host_origin, PointerBuffer region, long buffer_row_pitch, long buffer_slice_pitch, long host_row_pitch, long host_slice_pitch, Buffer ptr, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueCopyBuffer}(cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, size_t src_offset, size_t dst_offset, size_t cb, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueCopyBuffer(long command_queue, long src_buffer, long dst_buffer, long src_offset, long dst_offset, long cb, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueCopyBufferRect}(cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_buffer, const size_t *  src_origin, const size_t *  dst_origin, const size_t *  region, size_t src_row_pitch, size_t src_slice_pitch, size_t dst_row_pitch, size_t dst_slice_pitch, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param src_origin a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param dst_origin a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param region a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueCopyBufferRect(long command_queue, long src_buffer, long dst_buffer, PointerBuffer src_origin, PointerBuffer dst_origin, PointerBuffer region, long src_row_pitch, long src_slice_pitch, long dst_row_pitch, long dst_slice_pitch, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueReadImage}(cl_command_queue command_queue, cl_mem image, cl_bool blocking_read, const size_t * , const size_t * , size_t row_pitch, size_t slice_pitch, void *  ptr, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param arg3 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param arg4 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param ptr a direct only {@link java.nio.Buffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueReadImage(long command_queue, long image, int blocking_read, PointerBuffer arg3, PointerBuffer arg4, long row_pitch, long slice_pitch, Buffer ptr, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueWriteImage}(cl_command_queue command_queue, cl_mem image, cl_bool blocking_write, const size_t * , const size_t * , size_t input_row_pitch, size_t input_slice_pitch, const void *  ptr, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param arg3 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param arg4 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param ptr a direct only {@link java.nio.Buffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueWriteImage(long command_queue, long image, int blocking_write, PointerBuffer arg3, PointerBuffer arg4, long input_row_pitch, long input_slice_pitch, Buffer ptr, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueCopyImage}(cl_command_queue command_queue, cl_mem src_image, cl_mem dst_image, const size_t * , const size_t * , const size_t * , cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param arg3 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param arg4 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param arg5 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueCopyImage(long command_queue, long src_image, long dst_image, PointerBuffer arg3, PointerBuffer arg4, PointerBuffer arg5, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueCopyImageToBuffer}(cl_command_queue command_queue, cl_mem src_image, cl_mem dst_buffer, const size_t * , const size_t * , size_t dst_offset, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param arg3 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param arg4 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueCopyImageToBuffer(long command_queue, long src_image, long dst_buffer, PointerBuffer arg3, PointerBuffer arg4, long dst_offset, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueCopyBufferToImage}(cl_command_queue command_queue, cl_mem src_buffer, cl_mem dst_image, size_t src_offset, const size_t * , const size_t * , cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param arg4 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param arg5 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueCopyBufferToImage(long command_queue, long src_buffer, long dst_image, long src_offset, PointerBuffer arg4, PointerBuffer arg5, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>void *  {@native clEnqueueMapBuffer}(cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_map, cl_map_flags map_flags, size_t offset, size_t cb, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event, cl_int *  errcode_ret)</code><br>
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param errcode_ret a direct only {@link java.nio.IntBuffer}   */
  public ByteBuffer clEnqueueMapBuffer(long command_queue, long buffer, int blocking_map, long map_flags, long offset, long cb, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>void *  {@native clEnqueueMapImage}(cl_command_queue command_queue, cl_mem image, cl_bool blocking_map, cl_map_flags map_flags, const size_t * , const size_t * , size_t *  image_row_pitch, size_t *  image_slice_pitch, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event, cl_int *  errcode_ret)</code><br>
      @param arg4 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param arg5 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param image_row_pitch a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param image_slice_pitch a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param errcode_ret a direct only {@link java.nio.IntBuffer}   */
  public ByteBuffer clEnqueueMapImage(long command_queue, long image, int blocking_map, long map_flags, PointerBuffer arg4, PointerBuffer arg5, PointerBuffer image_row_pitch, PointerBuffer image_slice_pitch, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueUnmapMemObject}(cl_command_queue command_queue, cl_mem memobj, void *  mapped_ptr, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param mapped_ptr a direct only {@link java.nio.Buffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueUnmapMemObject(long command_queue, long memobj, Buffer mapped_ptr, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueNDRangeKernel}(cl_command_queue command_queue, cl_kernel kernel, cl_uint work_dim, const size_t *  global_work_offset, const size_t *  global_work_size, const size_t *  local_work_size, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param global_work_offset a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param global_work_size a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param local_work_size a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueNDRangeKernel(long command_queue, long kernel, int work_dim, PointerBuffer global_work_offset, PointerBuffer global_work_size, PointerBuffer local_work_size, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueTask}(cl_command_queue command_queue, cl_kernel kernel, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueTask(long command_queue, long kernel, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueMarker}(cl_command_queue command_queue, cl_event *  event)</code><br>
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueMarker(long command_queue, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueWaitForEvents}(cl_command_queue command_queue, cl_uint num_events, const cl_event *  event_list)</code><br>
      @param event_list a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueWaitForEvents(long command_queue, int num_events, PointerBuffer event_list);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueBarrier}(cl_command_queue command_queue)</code><br>   */
  public int clEnqueueBarrier(long command_queue);

  /** Interface to C language function: <br> <code>cl_int {@native clIcdGetPlatformIDsKHR}(cl_uint, cl_platform_id * , cl_uint * )</code><br>
      @param arg1 a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param arg2 a direct only {@link java.nio.IntBuffer}   */
  public int clIcdGetPlatformIDsKHR(int arg0, PointerBuffer arg1, IntBuffer arg2);

  /** Interface to C language function: <br> <code>cl_int {@native clReleaseDeviceEXT}(cl_device_id)</code><br>   */
  public int clReleaseDeviceEXT(long arg0);

  /** Interface to C language function: <br> <code>cl_int {@native clRetainDeviceEXT}(cl_device_id)</code><br>   */
  public int clRetainDeviceEXT(long arg0);

  /** Interface to C language function: <br> <code>cl_int {@native clCreateSubDevicesEXT}(cl_device_id, const cl_device_partition_property_ext * , cl_uint, cl_device_id * , cl_uint * )</code><br>
      @param arg1 a direct or array-backed {@link java.nio.LongBuffer}
      @param arg3 a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}
      @param arg4 a direct or array-backed {@link java.nio.IntBuffer}   */
  public int clCreateSubDevicesEXT(long arg0, LongBuffer arg1, int arg2, PointerBuffer arg3, IntBuffer arg4);

  /** Interface to C language function: <br> <code>cl_int {@native clCreateSubDevicesEXT}(cl_device_id, const cl_device_partition_property_ext * , cl_uint, cl_device_id * , cl_uint * )</code><br>
      @param arg3 a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clCreateSubDevicesEXT(long arg0, long[] arg1, int arg1_offset, int arg2, PointerBuffer arg3, int[] arg4, int arg4_offset);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateFromGLBuffer}(cl_context context, cl_mem_flags flags, cl_GLuint bufobj, int *  errcode_ret)</code><br>
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateFromGLBuffer(long context, long flags, int bufobj, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateFromGLBuffer}(cl_context context, cl_mem_flags flags, cl_GLuint bufobj, int *  errcode_ret)</code><br>   */
  public long clCreateFromGLBuffer(long context, long flags, int bufobj, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateFromGLTexture2D}(cl_context context, cl_mem_flags flags, cl_GLenum target, cl_GLint miplevel, cl_GLuint texture, cl_int *  errcode_ret)</code><br>
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateFromGLTexture2D(long context, long flags, int target, int miplevel, int texture, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateFromGLTexture2D}(cl_context context, cl_mem_flags flags, cl_GLenum target, cl_GLint miplevel, cl_GLuint texture, cl_int *  errcode_ret)</code><br>   */
  public long clCreateFromGLTexture2D(long context, long flags, int target, int miplevel, int texture, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateFromGLTexture3D}(cl_context context, cl_mem_flags flags, cl_GLenum target, cl_GLint miplevel, cl_GLuint texture, cl_int *  errcode_ret)</code><br>
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateFromGLTexture3D(long context, long flags, int target, int miplevel, int texture, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateFromGLTexture3D}(cl_context context, cl_mem_flags flags, cl_GLenum target, cl_GLint miplevel, cl_GLuint texture, cl_int *  errcode_ret)</code><br>   */
  public long clCreateFromGLTexture3D(long context, long flags, int target, int miplevel, int texture, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateFromGLRenderbuffer}(cl_context context, cl_mem_flags flags, cl_GLuint renderbuffer, cl_int *  errcode_ret)</code><br>
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateFromGLRenderbuffer(long context, long flags, int renderbuffer, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code>cl_mem {@native clCreateFromGLRenderbuffer}(cl_context context, cl_mem_flags flags, cl_GLuint renderbuffer, cl_int *  errcode_ret)</code><br>   */
  public long clCreateFromGLRenderbuffer(long context, long flags, int renderbuffer, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code>cl_int {@native clGetGLObjectInfo}(cl_mem memobj, cl_gl_object_type *  gl_object_type, cl_GLuint *  gl_object_name)</code><br>
      @param gl_object_type a direct or array-backed {@link java.nio.IntBuffer}
      @param gl_object_name a direct or array-backed {@link java.nio.IntBuffer}   */
  public int clGetGLObjectInfo(long memobj, IntBuffer gl_object_type, IntBuffer gl_object_name);

  /** Interface to C language function: <br> <code>cl_int {@native clGetGLObjectInfo}(cl_mem memobj, cl_gl_object_type *  gl_object_type, cl_GLuint *  gl_object_name)</code><br>   */
  public int clGetGLObjectInfo(long memobj, int[] gl_object_type, int gl_object_type_offset, int[] gl_object_name, int gl_object_name_offset);

  /** Interface to C language function: <br> <code>cl_int {@native clGetGLTextureInfo}(cl_mem memobj, cl_gl_texture_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param param_value a direct or array-backed {@link java.nio.Buffer}
      @param param_value_size_ret a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetGLTextureInfo(long memobj, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueAcquireGLObjects}(cl_command_queue command_queue, cl_uint num_objects, const cl_mem *  mem_objects, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param mem_objects a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueAcquireGLObjects(long command_queue, int num_objects, PointerBuffer mem_objects, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clEnqueueReleaseGLObjects}(cl_command_queue command_queue, cl_uint num_objects, const cl_mem *  mem_objects, cl_uint num_events_in_wait_list, const cl_event *  event_wait_list, cl_event *  event)</code><br>
      @param mem_objects a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event_wait_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param event a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clEnqueueReleaseGLObjects(long command_queue, int num_objects, PointerBuffer mem_objects, int num_events_in_wait_list, PointerBuffer event_wait_list, PointerBuffer event);

  /** Interface to C language function: <br> <code>cl_int {@native clGetGLContextInfoKHR}(const cl_context_properties *  properties, cl_gl_context_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret)</code><br>
      @param properties a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetGLContextInfoKHR(PointerBuffer properties, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code>cl_event {@native clCreateEventFromGLsyncKHR}(cl_context, cl_GLsync, cl_int * )</code><br>
      @param arg2 a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateEventFromGLsyncKHR(long arg0, long arg1, IntBuffer arg2);

  /** Interface to C language function: <br> <code>cl_event {@native clCreateEventFromGLsyncKHR}(cl_context, cl_GLsync, cl_int * )</code><br>   */
  public long clCreateEventFromGLsyncKHR(long arg0, long arg1, int[] arg2, int arg2_offset);


  // --- Begin CustomJavaCode .cfg declarations

  /** Interface to C language function: <br> <code> cl_context {@native clCreateContext}(intptr_t * , uint32_t, cl_device_id * , void (*pfn_notify)(const char *, const void *, size_t, void *), void *, int32_t * ); </code>    */
  public long clCreateContext(PointerBuffer properties, PointerBuffer devices, CLErrorHandler pfn_notify, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code> cl_context {@native clCreateContextFromType}(cl_context_properties *properties, cl_device_type device_type, void (*pfn_notify)(const char *errinfo,  const void *private_info, size_t cb, void *user_data), void *user_data, cl_int *errcode_ret) ; </code>    */
  public long clCreateContextFromType(PointerBuffer properties, long device_type, CLErrorHandler pfn_notify, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code> int32_t {@native clBuildProgram}(cl_program, uint32_t, cl_device_id * , const char * , void (*pfn_notify)(cl_program, void *user_data), void * ); </code>    */
  public int clBuildProgram(long program, int deviceCount, PointerBuffer devices, String options, BuildProgramCallback cb);

  /** Interface to C language function: <br> <code> int32_t {@native clSetMemObjectDestructorCallback}(cl_mem memobj, void (CL_CALLBACK  *pfn_notify) (cl_mem memobj, void *user_data), void *user_data); </code>    */
  public int clSetMemObjectDestructorCallback(long memObjID, CLMemObjectDestructorCallback cb);

  /** Interface to C language function: <br> <code> int32_t {@native clSetEventCallback}(cl_event event, cl_int command_exec_callback_type, void (CL_CALLBACK  *pfn_event_notify) (cl_event event, cl_int event_command_exec_status, void *user_data), void *user_data); </code>    */
  public int clSetEventCallback(long event, int type, CLEventCallback cb);
 /** To be used on Mac OSX instead of {@link #CL_CGL_SHAREGROUP_KHR}}. FIXME: For all Mac OSX versions? */
 public static final int CL_CONTEXT_PROPERTY_USE_CGL_SHAREGROUP_APPLE = 0x10000000;
  // ---- End CustomJavaCode .cfg declarations
} // end of class CL
