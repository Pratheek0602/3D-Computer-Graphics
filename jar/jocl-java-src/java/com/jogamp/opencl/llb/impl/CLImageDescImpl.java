/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/procaddress/ProcAddressEmitter.java on Fri Aug 18 15:56:07 CEST 2023 ----! */
/* !---- Java-Unit: [pkg com.jogamp.opencl.llb.impl, cls CLImageDescImpl], ../build/gensrc/java/com/jogamp/opencl/llb/impl/CLImageDescImpl.java ----! */


package com.jogamp.opencl.llb.impl;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import com.jogamp.opencl.llb.impl.CLImageFormatImpl;
import com.jogamp.opencl.llb.impl.CLImageDescImpl;
import com.jogamp.opencl.llb.CL20;
import java.security.AccessController;
import java.security.PrivilegedAction;
import com.jogamp.common.nio.PointerBuffer;
import com.jogamp.common.util.LongLongHashMap;
import com.jogamp.opencl.CLErrorHandler;
import com.jogamp.opencl.CLException;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import com.jogamp.common.nio.Buffers;

 /**
  * Struct accessor for cl_image_desc.
  * @author Wade Walker, GlueGen, et al.
  */
public class CLImageDescImpl {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] CLImageDescImpl_size = new int[] { 40 /* ARM_MIPS_32 */, 40 /* X86_32_UNIX */, 40 /* X86_32_ANDROID */, 40 /* X86_32_MACOS */, 40 /* PPC_32_UNIX */, 40 /* SPARC_32_SUNOS */, 40 /* X86_32_WINDOWS */, 72 /* LP64_UNIX */, 72 /* X86_64_WINDOWS */, 72 /* ARM64_IOS */  };
  private static final int[] imageType_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] imageType_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] imageWidth_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */ };
//private static final int[] imageWidth_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] imageHeight_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */ };
//private static final int[] imageHeight_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] imageDepth_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */, 24 /* ARM64_IOS */ };
//private static final int[] imageDepth_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] imageArraySize_offset = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */ };
//private static final int[] imageArraySize_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] imageRowPitch_offset = new int[] { 20 /* ARM_MIPS_32 */, 20 /* X86_32_UNIX */, 20 /* X86_32_ANDROID */, 20 /* X86_32_MACOS */, 20 /* PPC_32_UNIX */, 20 /* SPARC_32_SUNOS */, 20 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */, 40 /* ARM64_IOS */ };
//private static final int[] imageRowPitch_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] imageSlicePitch_offset = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_ANDROID */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 48 /* LP64_UNIX */, 48 /* X86_64_WINDOWS */, 48 /* ARM64_IOS */ };
//private static final int[] imageSlicePitch_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] numMipLevels_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_ANDROID */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 56 /* LP64_UNIX */, 56 /* X86_64_WINDOWS */, 56 /* ARM64_IOS */ };
//private static final int[] numMipLevels_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] numSamples_offset = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_ANDROID */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 60 /* LP64_UNIX */, 60 /* X86_64_WINDOWS */, 60 /* ARM64_IOS */ };
//private static final int[] numSamples_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return CLImageDescImpl_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static CLImageDescImpl create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static CLImageDescImpl create(java.nio.ByteBuffer buf) {
      return new CLImageDescImpl(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static CLImageDescImpl derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  CLImageDescImpl(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  /**
   * Setter for native field <code>imageType</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'cl_mem_object_type', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final CLImageDescImpl setImageType(int src) {
    accessor.setIntAt(imageType_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>imageType</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'cl_mem_object_type', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getImageType() {
    return accessor.getIntAt(imageType_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>imageWidth</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final CLImageDescImpl setImageWidth(long src) {
    accessor.setLongAt(imageWidth_offset[mdIdx], src, md.longSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>imageWidth</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final long getImageWidth() {
    return accessor.getLongAt(imageWidth_offset[mdIdx], md.longSizeInBytes());
  }

  /**
   * Setter for native field <code>imageHeight</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final CLImageDescImpl setImageHeight(long src) {
    accessor.setLongAt(imageHeight_offset[mdIdx], src, md.longSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>imageHeight</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final long getImageHeight() {
    return accessor.getLongAt(imageHeight_offset[mdIdx], md.longSizeInBytes());
  }

  /**
   * Setter for native field <code>imageDepth</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final CLImageDescImpl setImageDepth(long src) {
    accessor.setLongAt(imageDepth_offset[mdIdx], src, md.longSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>imageDepth</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final long getImageDepth() {
    return accessor.getLongAt(imageDepth_offset[mdIdx], md.longSizeInBytes());
  }

  /**
   * Setter for native field <code>imageArraySize</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final CLImageDescImpl setImageArraySize(long src) {
    accessor.setLongAt(imageArraySize_offset[mdIdx], src, md.longSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>imageArraySize</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final long getImageArraySize() {
    return accessor.getLongAt(imageArraySize_offset[mdIdx], md.longSizeInBytes());
  }

  /**
   * Setter for native field <code>imageRowPitch</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final CLImageDescImpl setImageRowPitch(long src) {
    accessor.setLongAt(imageRowPitch_offset[mdIdx], src, md.longSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>imageRowPitch</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final long getImageRowPitch() {
    return accessor.getLongAt(imageRowPitch_offset[mdIdx], md.longSizeInBytes());
  }

  /**
   * Setter for native field <code>imageSlicePitch</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final CLImageDescImpl setImageSlicePitch(long src) {
    accessor.setLongAt(imageSlicePitch_offset[mdIdx], src, md.longSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>imageSlicePitch</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'size_t', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final long getImageSlicePitch() {
    return accessor.getLongAt(imageSlicePitch_offset[mdIdx], md.longSizeInBytes());
  }

  /**
   * Setter for native field <code>numMipLevels</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'cl_uint', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final CLImageDescImpl setNumMipLevels(int src) {
    accessor.setIntAt(numMipLevels_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>numMipLevels</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'cl_uint', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getNumMipLevels() {
    return accessor.getIntAt(numMipLevels_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>numSamples</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'cl_uint', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final CLImageDescImpl setNumSamples(int src) {
    accessor.setIntAt(numSamples_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>numSamples</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'cl_uint', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getNumSamples() {
    return accessor.getIntAt(numSamples_offset[mdIdx]);
  }

}
