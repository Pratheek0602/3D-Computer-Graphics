/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Fri Aug 18 14:58:52 CEST 2023 ----! */
/* !---- Java-Unit: [pkg com.jogamp.opengl.egl, cls EGLExt], ../build/jogl/gensrc/classes/com/jogamp/opengl/egl/EGLExt.java ----! */

package com.jogamp.opengl.egl;

import java.util.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.fixedfunc.*;
import jogamp.opengl.*;
import com.jogamp.opengl.egl.EGLExt;
import com.jogamp.opengl.egl.EGLClientPixmapHI;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;
import com.jogamp.common.util.*;
import java.util.Set;
import java.util.Map;
import java.util.HashMap;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

public interface EGLExt {

  /** <code>EGL_NV_sync</code><br>Define "EGL_SYNC_CONDITION_NV" with expression '<code>0x30EE</code>', CType: int */
  public static final int EGL_SYNC_CONDITION_NV = 0x30ee;
  /** <code>EGL_EXT_platform_x11</code><br>Define "EGL_PLATFORM_X11_EXT" with expression '<code>0x31D5</code>', CType: int */
  public static final int EGL_PLATFORM_X11_EXT = 0x31d5;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_READ_SURFACE_BIT_KHR" with expression '<code>0x0001</code>', CType: int */
  public static final int EGL_READ_SURFACE_BIT_KHR = 0x1;
  /** <code>EGL_KHR_stream_fifo</code><br>Define "EGL_STREAM_FIFO_LENGTH_KHR" with expression '<code>0x31FC</code>', CType: int */
  public static final int EGL_STREAM_FIFO_LENGTH_KHR = 0x31fc;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_FORMAT_RGBA_8888_KHR" with expression '<code>0x30C3</code>', CType: int */
  public static final int EGL_FORMAT_RGBA_8888_KHR = 0x30c3;
  /** <code>EGL_KHR_reusable_sync</code><br>Define "EGL_SYNC_REUSABLE_KHR" with expression '<code>0x30FA</code>', CType: int */
  public static final int EGL_SYNC_REUSABLE_KHR = 0x30fa;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_MATCH_FORMAT_KHR" with expression '<code>0x3043</code>', CType: int */
  public static final int EGL_MATCH_FORMAT_KHR = 0x3043;
  /** <code>EGL_HI_colorformats</code><br>Define "EGL_COLOR_RGBA_HI" with expression '<code>0x8F72</code>', CType: int */
  public static final int EGL_COLOR_RGBA_HI = 0x8f72;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_DEBUG_CALLBACK_KHR" with expression '<code>0x33B8</code>', CType: int */
  public static final int EGL_DEBUG_CALLBACK_KHR = 0x33b8;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_LINUX_DMA_BUF_EXT" with expression '<code>0x3270</code>', CType: int */
  public static final int EGL_LINUX_DMA_BUF_EXT = 0x3270;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR" with expression '<code>0x30CB</code>', CType: int */
  public static final int EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR = 0x30cb;
  /** <code>EGL_NV_stream_sync</code><br>Define "EGL_SYNC_NEW_FRAME_NV" with expression '<code>0x321F</code>', CType: int */
  public static final int EGL_SYNC_NEW_FRAME_NV = 0x321f;
  /** <code>EGL_EXT_device_drm</code><br>Define "EGL_DRM_DEVICE_FILE_EXT" with expression '<code>0x3233</code>', CType: int */
  public static final int EGL_DRM_DEVICE_FILE_EXT = 0x3233;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_NUMBER_OF_PLANES_EXT" with expression '<code>0x3311</code>', CType: int */
  public static final int EGL_YUV_NUMBER_OF_PLANES_EXT = 0x3311;
  /** <code>EGL_KHR_reusable_sync</code><br>Define "EGL_SYNC_TYPE_KHR" with expression '<code>0x30F7</code>', CType: int */
  public static final int EGL_SYNC_TYPE_KHR = 0x30f7;
  /** <code>EGL_KHR_gl_texture_cubemap_image</code><br>Define "EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR" with expression '<code>0x30B7</code>', CType: int */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR = 0x30b7;
  /** <code>EGL_EXT_device_base</code><br>Define "EGL_DEVICE_EXT" with expression '<code>0x322C</code>', CType: int */
  public static final int EGL_DEVICE_EXT = 0x322c;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_OBJECT_CONTEXT_KHR" with expression '<code>0x33B2</code>', CType: int */
  public static final int EGL_OBJECT_CONTEXT_KHR = 0x33b2;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_STREAM_STATE_DISCONNECTED_KHR" with expression '<code>0x321A</code>', CType: int */
  public static final int EGL_STREAM_STATE_DISCONNECTED_KHR = 0x321a;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_OBJECT_SYNC_KHR" with expression '<code>0x33B5</code>', CType: int */
  public static final int EGL_OBJECT_SYNC_KHR = 0x33b5;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_SUBSAMPLE_EXT" with expression '<code>0x3312</code>', CType: int */
  public static final int EGL_YUV_SUBSAMPLE_EXT = 0x3312;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_ORDER_YUYV_EXT" with expression '<code>0x3304</code>', CType: int */
  public static final int EGL_YUV_ORDER_YUYV_EXT = 0x3304;
  /** <code>EGL_NV_sync</code><br>Define "EGL_ALREADY_SIGNALED_NV" with expression '<code>0x30EA</code>', CType: int */
  public static final int EGL_ALREADY_SIGNALED_NV = 0x30ea;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_YUV_FULL_RANGE_EXT" with expression '<code>0x3282</code>', CType: int */
  public static final int EGL_YUV_FULL_RANGE_EXT = 0x3282;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_CONTEXT_FLAGS_KHR" with expression '<code>0x30FC</code>', CType: int */
  public static final int EGL_CONTEXT_FLAGS_KHR = 0x30fc;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_BAD_STREAM_KHR" with expression '<code>0x321B</code>', CType: int */
  public static final int EGL_BAD_STREAM_KHR = 0x321b;
  /** <code>EGL_EXT_output_drm</code><br>Define "EGL_DRM_CONNECTOR_EXT" with expression '<code>0x3236</code>', CType: int */
  public static final int EGL_DRM_CONNECTOR_EXT = 0x3236;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_DMA_BUF_PLANE1_OFFSET_EXT" with expression '<code>0x3276</code>', CType: int */
  public static final int EGL_DMA_BUF_PLANE1_OFFSET_EXT = 0x3276;
  /** <code>EGL_KHR_lock_surface2</code><br>Define "EGL_BITMAP_PIXEL_SIZE_KHR" with expression '<code>0x3110</code>', CType: int */
  public static final int EGL_BITMAP_PIXEL_SIZE_KHR = 0x3110;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_FORMAT_RGBA_8888_EXACT_KHR" with expression '<code>0x30C2</code>', CType: int */
  public static final int EGL_FORMAT_RGBA_8888_EXACT_KHR = 0x30c2;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_OBJECT_IMAGE_KHR" with expression '<code>0x33B4</code>', CType: int */
  public static final int EGL_OBJECT_IMAGE_KHR = 0x33b4;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_DMA_BUF_PLANE2_FD_EXT" with expression '<code>0x3278</code>', CType: int */
  public static final int EGL_DMA_BUF_PLANE2_FD_EXT = 0x3278;
  /** <code>EGL_KHR_platform_x11</code><br>Define "EGL_PLATFORM_X11_SCREEN_KHR" with expression '<code>0x31D6</code>', CType: int */
  public static final int EGL_PLATFORM_X11_SCREEN_KHR = 0x31d6;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_ITU_REC601_EXT" with expression '<code>0x327F</code>', CType: int */
  public static final int EGL_ITU_REC601_EXT = 0x327f;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_PRODUCER_FRAME_KHR" with expression '<code>0x3212</code>', CType: int */
  public static final int EGL_PRODUCER_FRAME_KHR = 0x3212;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_YUV_CHROMA_SITING_0_5_EXT" with expression '<code>0x3285</code>', CType: int */
  public static final int EGL_YUV_CHROMA_SITING_0_5_EXT = 0x3285;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_SUBSAMPLE_4_2_0_EXT" with expression '<code>0x3313</code>', CType: int */
  public static final int EGL_YUV_SUBSAMPLE_4_2_0_EXT = 0x3313;
  /** <code>EGL_EXT_platform_device</code><br>Define "EGL_PLATFORM_DEVICE_EXT" with expression '<code>0x313F</code>', CType: int */
  public static final int EGL_PLATFORM_DEVICE_EXT = 0x313f;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_ORDER_EXT" with expression '<code>0x3301</code>', CType: int */
  public static final int EGL_YUV_ORDER_EXT = 0x3301;
  /** <code>EGL_KHR_vg_parent_image</code><br>Define "EGL_VG_PARENT_IMAGE_KHR" with expression '<code>0x30BA</code>', CType: int */
  public static final int EGL_VG_PARENT_IMAGE_KHR = 0x30ba;
  /** <code>EGL_NV_cuda_event</code><br>Define "EGL_SYNC_CUDA_EVENT_NV" with expression '<code>0x323C</code>', CType: int */
  public static final int EGL_SYNC_CUDA_EVENT_NV = 0x323c;
  /** <code>EGL_KHR_reusable_sync</code><br>Define "EGL_SYNC_FLUSH_COMMANDS_BIT_KHR" with expression '<code>0x0001</code>', CType: int */
  public static final int EGL_SYNC_FLUSH_COMMANDS_BIT_KHR = 0x1;
  /** <code>EGL_IMG_context_priority</code><br>Define "EGL_CONTEXT_PRIORITY_MEDIUM_IMG" with expression '<code>0x3102</code>', CType: int */
  public static final int EGL_CONTEXT_PRIORITY_MEDIUM_IMG = 0x3102;
  /** <code>EGL_ARM_pixmap_multisample_discard</code><br>Define "EGL_DISCARD_SAMPLES_ARM" with expression '<code>0x3286</code>', CType: int */
  public static final int EGL_DISCARD_SAMPLES_ARM = 0x3286;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_ORDER_VYUY_EXT" with expression '<code>0x3307</code>', CType: int */
  public static final int EGL_YUV_ORDER_VYUY_EXT = 0x3307;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_CSC_STANDARD_601_EXT" with expression '<code>0x330B</code>', CType: int */
  public static final int EGL_YUV_CSC_STANDARD_601_EXT = 0x330b;
  /** <code>EGL_NV_coverage_sample</code><br>Define "EGL_COVERAGE_SAMPLES_NV" with expression '<code>0x30E1</code>', CType: int */
  public static final int EGL_COVERAGE_SAMPLES_NV = 0x30e1;
  /** <code>EGL_KHR_cl_event</code><br>Define "EGL_SYNC_CL_EVENT_KHR" with expression '<code>0x30FE</code>', CType: int */
  public static final int EGL_SYNC_CL_EVENT_KHR = 0x30fe;
  /** <code>EGL_EXT_protected_surface</code><br>Define "EGL_PROTECTED_CONTENT_EXT" with expression '<code>0x32C0</code>', CType: int */
  public static final int EGL_PROTECTED_CONTENT_EXT = 0x32c0;
  /** <code>EGL_KHR_platform_android</code><br>Define "EGL_PLATFORM_ANDROID_KHR" with expression '<code>0x3141</code>', CType: int */
  public static final int EGL_PLATFORM_ANDROID_KHR = 0x3141;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_MAP_PRESERVE_PIXELS_KHR" with expression '<code>0x30C4</code>', CType: int */
  public static final int EGL_MAP_PRESERVE_PIXELS_KHR = 0x30c4;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_DEPTH_RANGE_EXT" with expression '<code>0x3317</code>', CType: int */
  public static final int EGL_YUV_DEPTH_RANGE_EXT = 0x3317;
  /** <code>EGL_NV_coverage_sample_resolve</code><br>Define "EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV" with expression '<code>0x3132</code>', CType: int */
  public static final int EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV = 0x3132;
  /** <code>EGL_NV_cuda_event</code><br>Define "EGL_SYNC_CUDA_EVENT_COMPLETE_NV" with expression '<code>0x323D</code>', CType: int */
  public static final int EGL_SYNC_CUDA_EVENT_COMPLETE_NV = 0x323d;
  /** <code>EGL_KHR_image</code><br>Define "EGL_NATIVE_PIXMAP_KHR" with expression '<code>0x30B0</code>', CType: int */
  public static final int EGL_NATIVE_PIXMAP_KHR = 0x30b0;
  /** <code>EGL_MESA_drm_image</code><br>Define "EGL_DRM_BUFFER_FORMAT_ARGB32_MESA" with expression '<code>0x31D2</code>', CType: int */
  public static final int EGL_DRM_BUFFER_FORMAT_ARGB32_MESA = 0x31d2;
  /** <code>EGL_EXT_create_context_robustness</code><br>Define "EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT" with expression '<code>0x30BF</code>', CType: int */
  public static final int EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT = 0x30bf;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_OPTIMAL_FORMAT_BIT_KHR" with expression '<code>0x0100</code>', CType: int */
  public static final int EGL_OPTIMAL_FORMAT_BIT_KHR = 0x100;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_OBJECT_THREAD_KHR" with expression '<code>0x33B0</code>', CType: int */
  public static final int EGL_OBJECT_THREAD_KHR = 0x33b0;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_LOSE_CONTEXT_ON_RESET_KHR" with expression '<code>0x31BF</code>', CType: int */
  public static final int EGL_LOSE_CONTEXT_ON_RESET_KHR = 0x31bf;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_CONSUMER_LATENCY_USEC_KHR" with expression '<code>0x3210</code>', CType: int */
  public static final int EGL_CONSUMER_LATENCY_USEC_KHR = 0x3210;
  /** <code>EGL_EXT_output_base</code><br>Define "EGL_SWAP_INTERVAL_EXT" with expression '<code>0x322F</code>', CType: int */
  public static final int EGL_SWAP_INTERVAL_EXT = 0x322f;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_STREAM_STATE_EMPTY_KHR" with expression '<code>0x3217</code>', CType: int */
  public static final int EGL_STREAM_STATE_EMPTY_KHR = 0x3217;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_BAD_STATE_KHR" with expression '<code>0x321C</code>', CType: int */
  public static final int EGL_BAD_STATE_KHR = 0x321c;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_BITMAP_PIXEL_RED_OFFSET_KHR" with expression '<code>0x30C9</code>', CType: int */
  public static final int EGL_BITMAP_PIXEL_RED_OFFSET_KHR = 0x30c9;
  /** <code>EGL_ANGLE_d3d_share_handle_client_buffer</code><br>Define "EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE" with expression '<code>0x3200</code>', CType: int */
  public static final int EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE = 0x3200;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_DMA_BUF_PLANE1_PITCH_EXT" with expression '<code>0x3277</code>', CType: int */
  public static final int EGL_DMA_BUF_PLANE1_PITCH_EXT = 0x3277;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_CSC_STANDARD_EXT" with expression '<code>0x330A</code>', CType: int */
  public static final int EGL_YUV_CSC_STANDARD_EXT = 0x330a;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_SUBSAMPLE_4_4_4_EXT" with expression '<code>0x3315</code>', CType: int */
  public static final int EGL_YUV_SUBSAMPLE_4_4_4_EXT = 0x3315;
  /** <code>EGL_KHR_gl_texture_cubemap_image</code><br>Define "EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR" with expression '<code>0x30B3</code>', CType: int */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR = 0x30b3;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_DMA_BUF_PLANE0_PITCH_EXT" with expression '<code>0x3274</code>', CType: int */
  public static final int EGL_DMA_BUF_PLANE0_PITCH_EXT = 0x3274;
  /** <code>EGL_NV_coverage_sample</code><br>Define "EGL_COVERAGE_BUFFERS_NV" with expression '<code>0x30E0</code>', CType: int */
  public static final int EGL_COVERAGE_BUFFERS_NV = 0x30e0;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_YUV_CHROMA_SITING_0_EXT" with expression '<code>0x3284</code>', CType: int */
  public static final int EGL_YUV_CHROMA_SITING_0_EXT = 0x3284;
  /** <code>EGL_KHR_gl_texture_2D_image</code><br>Define "EGL_GL_TEXTURE_LEVEL_KHR" with expression '<code>0x30BC</code>', CType: int */
  public static final int EGL_GL_TEXTURE_LEVEL_KHR = 0x30bc;
  /** <code>EGL_KHR_stream_consumer_gltexture</code><br>Define "EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR" with expression '<code>0x321E</code>', CType: int */
  public static final int EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR = 0x321e;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_LOWER_LEFT_KHR" with expression '<code>0x30CE</code>', CType: int */
  public static final int EGL_LOWER_LEFT_KHR = 0x30ce;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_CONTEXT_MINOR_VERSION_KHR" with expression '<code>0x30FB</code>', CType: int */
  public static final int EGL_CONTEXT_MINOR_VERSION_KHR = 0x30fb;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_ORDER_YVYU_EXT" with expression '<code>0x3306</code>', CType: int */
  public static final int EGL_YUV_ORDER_YVYU_EXT = 0x3306;
  /** <code>EGL_NV_coverage_sample_resolve</code><br>Define "EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV" with expression '<code>0x3133</code>', CType: int */
  public static final int EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV = 0x3133;
  /** <code>EGL_HI_colorformats</code><br>Define "EGL_COLOR_RGB_HI" with expression '<code>0x8F71</code>', CType: int */
  public static final int EGL_COLOR_RGB_HI = 0x8f71;
  /** <code>EGL_NV_device_cuda</code><br>Define "EGL_CUDA_DEVICE_NV" with expression '<code>0x323A</code>', CType: int */
  public static final int EGL_CUDA_DEVICE_NV = 0x323a;
  /** <code>EGL_KHR_reusable_sync</code><br>Define "EGL_SYNC_STATUS_KHR" with expression '<code>0x30F1</code>', CType: int */
  public static final int EGL_SYNC_STATUS_KHR = 0x30f1;
  /** <code>EGL_EXT_create_context_robustness</code><br>Define "EGL_LOSE_CONTEXT_ON_RESET_EXT" with expression '<code>0x31BF</code>', CType: int */
  public static final int EGL_LOSE_CONTEXT_ON_RESET_EXT = 0x31bf;
  /** <code>EGL_KHR_create_context_no_error</code><br>Define "EGL_CONTEXT_OPENGL_NO_ERROR_KHR" with expression '<code>0x31B3</code>', CType: int */
  public static final int EGL_CONTEXT_OPENGL_NO_ERROR_KHR = 0x31b3;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_CONTEXT_MAJOR_VERSION_KHR" with expression '<code>0x3098</code>', CType: int */
  public static final int EGL_CONTEXT_MAJOR_VERSION_KHR = 0x3098;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_YUV_COLOR_SPACE_HINT_EXT" with expression '<code>0x327B</code>', CType: int */
  public static final int EGL_YUV_COLOR_SPACE_HINT_EXT = 0x327b;
  /** <code>EGL_MESA_platform_gbm</code><br>Define "EGL_PLATFORM_GBM_MESA" with expression '<code>0x31D7</code>', CType: int */
  public static final int EGL_PLATFORM_GBM_MESA = 0x31d7;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_DMA_BUF_PLANE2_OFFSET_EXT" with expression '<code>0x3279</code>', CType: int */
  public static final int EGL_DMA_BUF_PLANE2_OFFSET_EXT = 0x3279;
  /** <code>EGL_KHR_fence_sync</code><br>Define "EGL_SYNC_CONDITION_KHR" with expression '<code>0x30F8</code>', CType: int */
  public static final int EGL_SYNC_CONDITION_KHR = 0x30f8;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_CSC_STANDARD_709_EXT" with expression '<code>0x330C</code>', CType: int */
  public static final int EGL_YUV_CSC_STANDARD_709_EXT = 0x330c;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_PLANE_BPP_EXT" with expression '<code>0x331A</code>', CType: int */
  public static final int EGL_YUV_PLANE_BPP_EXT = 0x331a;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_ITU_REC2020_EXT" with expression '<code>0x3281</code>', CType: int */
  public static final int EGL_ITU_REC2020_EXT = 0x3281;
  /** <code>EGL_NV_sync</code><br>Define "EGL_SIGNALED_NV" with expression '<code>0x30E8</code>', CType: int */
  public static final int EGL_SIGNALED_NV = 0x30e8;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_NO_RESET_NOTIFICATION_KHR" with expression '<code>0x31BE</code>', CType: int */
  public static final int EGL_NO_RESET_NOTIFICATION_KHR = 0x31be;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_SUBSAMPLE_4_2_2_EXT" with expression '<code>0x3314</code>', CType: int */
  public static final int EGL_YUV_SUBSAMPLE_4_2_2_EXT = 0x3314;
  /** <code>EGL_NOK_texture_from_pixmap</code><br>Define "EGL_Y_INVERTED_NOK" with expression '<code>0x307F</code>', CType: int */
  public static final int EGL_Y_INVERTED_NOK = 0x307f;
  /** <code>EGL_KHR_reusable_sync</code><br>Define "EGL_CONDITION_SATISFIED_KHR" with expression '<code>0x30F6</code>', CType: int */
  public static final int EGL_CONDITION_SATISFIED_KHR = 0x30f6;
  /** <code>EGL_IMG_context_priority</code><br>Define "EGL_CONTEXT_PRIORITY_LOW_IMG" with expression '<code>0x3103</code>', CType: int */
  public static final int EGL_CONTEXT_PRIORITY_LOW_IMG = 0x3103;
  /** <code>EGL_EXT_output_openwf</code><br>Define "EGL_OPENWF_PIPELINE_ID_EXT" with expression '<code>0x3238</code>', CType: int */
  public static final int EGL_OPENWF_PIPELINE_ID_EXT = 0x3238;
  /** <code>EGL_HI_colorformats</code><br>Define "EGL_COLOR_FORMAT_HI" with expression '<code>0x8F70</code>', CType: int */
  public static final int EGL_COLOR_FORMAT_HI = 0x8f70;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_DEBUG_MSG_WARN_KHR" with expression '<code>0x33BB</code>', CType: int */
  public static final int EGL_DEBUG_MSG_WARN_KHR = 0x33bb;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_BUFFER_EXT" with expression '<code>0x3300</code>', CType: int */
  public static final int EGL_YUV_BUFFER_EXT = 0x3300;
  /** <code>EGL_KHR_gl_renderbuffer_image</code><br>Define "EGL_GL_RENDERBUFFER_KHR" with expression '<code>0x30B9</code>', CType: int */
  public static final int EGL_GL_RENDERBUFFER_KHR = 0x30b9;
  /** <code>EGL_KHR_gl_texture_cubemap_image</code><br>Define "EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR" with expression '<code>0x30B5</code>', CType: int */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR = 0x30b5;
  /** <code>EGL_KHR_gl_texture_2D_image</code><br>Define "EGL_GL_TEXTURE_2D_KHR" with expression '<code>0x30B1</code>', CType: int */
  public static final int EGL_GL_TEXTURE_2D_KHR = 0x30b1;
  /** <code>EGL_NV_sync</code><br>Define "EGL_UNSIGNALED_NV" with expression '<code>0x30E9</code>', CType: int */
  public static final int EGL_UNSIGNALED_NV = 0x30e9;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_OBJECT_STREAM_KHR" with expression '<code>0x33B6</code>', CType: int */
  public static final int EGL_OBJECT_STREAM_KHR = 0x33b6;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_CONSUMER_FRAME_KHR" with expression '<code>0x3213</code>', CType: int */
  public static final int EGL_CONSUMER_FRAME_KHR = 0x3213;
  /** <code>EGL_KHR_reusable_sync</code><br>Define "EGL_SIGNALED_KHR" with expression '<code>0x30F2</code>', CType: int */
  public static final int EGL_SIGNALED_KHR = 0x30f2;
  /** <code>EGL_KHR_stream_fifo</code><br>Define "EGL_STREAM_TIME_PRODUCER_KHR" with expression '<code>0x31FF</code>', CType: int */
  public static final int EGL_STREAM_TIME_PRODUCER_KHR = 0x31ff;
  /** <code>EGL_EXT_device_base</code><br>Define "EGL_BAD_DEVICE_EXT" with expression '<code>0x322B</code>', CType: int */
  public static final int EGL_BAD_DEVICE_EXT = 0x322b;
  /** <code>EGL_KHR_cl_event</code><br>Define "EGL_CL_EVENT_HANDLE_KHR" with expression '<code>0x309C</code>', CType: int */
  public static final int EGL_CL_EVENT_HANDLE_KHR = 0x309c;
  /** <code>EGL_EXT_output_drm</code><br>Define "EGL_DRM_PLANE_EXT" with expression '<code>0x3235</code>', CType: int */
  public static final int EGL_DRM_PLANE_EXT = 0x3235;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT" with expression '<code>0x327D</code>', CType: int */
  public static final int EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT = 0x327d;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_DEBUG_MSG_INFO_KHR" with expression '<code>0x33BC</code>', CType: int */
  public static final int EGL_DEBUG_MSG_INFO_KHR = 0x33bc;
  /** <code>EGL_KHR_gl_texture_3D_image</code><br>Define "EGL_GL_TEXTURE_3D_KHR" with expression '<code>0x30B2</code>', CType: int */
  public static final int EGL_GL_TEXTURE_3D_KHR = 0x30b2;
  /** <code>EGL_NV_depth_nonlinear</code><br>Define "EGL_DEPTH_ENCODING_NONE_NV" with expression '<code>0</code>', CType: int */
  public static final int EGL_DEPTH_ENCODING_NONE_NV = 0x0;
  /** <code>EGL_NV_sync</code><br>Define "EGL_TIMEOUT_EXPIRED_NV" with expression '<code>0x30EB</code>', CType: int */
  public static final int EGL_TIMEOUT_EXPIRED_NV = 0x30eb;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_STREAM_STATE_CONNECTING_KHR" with expression '<code>0x3216</code>', CType: int */
  public static final int EGL_STREAM_STATE_CONNECTING_KHR = 0x3216;
  /** <code>EGL_EXT_device_openwf</code><br>Define "EGL_OPENWF_DEVICE_ID_EXT" with expression '<code>0x3237</code>', CType: int */
  public static final int EGL_OPENWF_DEVICE_ID_EXT = 0x3237;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_DMA_BUF_PLANE0_OFFSET_EXT" with expression '<code>0x3273</code>', CType: int */
  public static final int EGL_DMA_BUF_PLANE0_OFFSET_EXT = 0x3273;
  /** <code>EGL_TIZEN_image_native_surface</code><br>Define "EGL_NATIVE_SURFACE_TIZEN" with expression '<code>0x32A1</code>', CType: int */
  public static final int EGL_NATIVE_SURFACE_TIZEN = 0x32a1;
  /** <code>EGL_KHR_image_base</code><br>Define "EGL_IMAGE_PRESERVED_KHR" with expression '<code>0x30D2</code>', CType: int */
  public static final int EGL_IMAGE_PRESERVED_KHR = 0x30d2;
  /** <code>EGL_KHR_reusable_sync</code><br>Define "EGL_UNSIGNALED_KHR" with expression '<code>0x30F3</code>', CType: int */
  public static final int EGL_UNSIGNALED_KHR = 0x30f3;
  /** <code>EGL_KHR_gl_colorspace</code><br>Define "EGL_GL_COLORSPACE_LINEAR_KHR" with expression '<code>0x308A</code>', CType: int */
  public static final int EGL_GL_COLORSPACE_LINEAR_KHR = 0x308a;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_LOCK_USAGE_HINT_KHR" with expression '<code>0x30C5</code>', CType: int */
  public static final int EGL_LOCK_USAGE_HINT_KHR = 0x30c5;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_PLANE_BPP_0_EXT" with expression '<code>0x331B</code>', CType: int */
  public static final int EGL_YUV_PLANE_BPP_0_EXT = 0x331b;
  /** <code>EGL_EXT_create_context_robustness</code><br>Define "EGL_NO_RESET_NOTIFICATION_EXT" with expression '<code>0x31BE</code>', CType: int */
  public static final int EGL_NO_RESET_NOTIFICATION_EXT = 0x31be;
  /** <code>EGL_NV_depth_nonlinear</code><br>Define "EGL_DEPTH_ENCODING_NONLINEAR_NV" with expression '<code>0x30E3</code>', CType: int */
  public static final int EGL_DEPTH_ENCODING_NONLINEAR_NV = 0x30e3;
  /** <code>EGL_KHR_fence_sync</code><br>Define "EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR" with expression '<code>0x30F0</code>', CType: int */
  public static final int EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR = 0x30f0;
  /** <code>EGL_NV_sync</code><br>Define "EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV" with expression '<code>0x30E6</code>', CType: int */
  public static final int EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV = 0x30e6;
  /** <code>EGL_KHR_stream_producer_eglsurface</code><br>Define "EGL_STREAM_BIT_KHR" with expression '<code>0x0800</code>', CType: int */
  public static final int EGL_STREAM_BIT_KHR = 0x800;
  /** <code>EGL_NV_coverage_sample_resolve</code><br>Define "EGL_COVERAGE_SAMPLE_RESOLVE_NV" with expression '<code>0x3131</code>', CType: int */
  public static final int EGL_COVERAGE_SAMPLE_RESOLVE_NV = 0x3131;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR" with expression '<code>0x31BD</code>', CType: int */
  public static final int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR = 0x31bd;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR" with expression '<code>0x30CC</code>', CType: int */
  public static final int EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR = 0x30cc;
  /** <code>EGL_KHR_platform_wayland</code><br>Define "EGL_PLATFORM_WAYLAND_KHR" with expression '<code>0x31D8</code>', CType: int */
  public static final int EGL_PLATFORM_WAYLAND_KHR = 0x31d8;
  /** <code>EGL_KHR_gl_texture_cubemap_image</code><br>Define "EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR" with expression '<code>0x30B8</code>', CType: int */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR = 0x30b8;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_DEPTH_RANGE_LIMITED_EXT" with expression '<code>0x3318</code>', CType: int */
  public static final int EGL_YUV_DEPTH_RANGE_LIMITED_EXT = 0x3318;
  /** <code>EGL_ANDROID_framebuffer_target</code><br>Define "EGL_FRAMEBUFFER_TARGET_ANDROID" with expression '<code>0x3147</code>', CType: int */
  public static final int EGL_FRAMEBUFFER_TARGET_ANDROID = 0x3147;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR" with expression '<code>0x00000002</code>', CType: int */
  public static final int EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR = 0x2;
  /** <code>EGL_HI_clientpixmap</code><br>Define "EGL_CLIENT_PIXMAP_POINTER_HI" with expression '<code>0x8F74</code>', CType: int */
  public static final int EGL_CLIENT_PIXMAP_POINTER_HI = 0x8f74;
  /** <code>EGL_ANGLE_device_d3d</code><br>Define "EGL_D3D9_DEVICE_ANGLE" with expression '<code>0x33A0</code>', CType: int */
  public static final int EGL_D3D9_DEVICE_ANGLE = 0x33a0;
  /** <code>EGL_ANGLE_device_d3d</code><br>Define "EGL_D3D11_DEVICE_ANGLE" with expression '<code>0x33A1</code>', CType: int */
  public static final int EGL_D3D11_DEVICE_ANGLE = 0x33a1;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_UPPER_LEFT_KHR" with expression '<code>0x30CF</code>', CType: int */
  public static final int EGL_UPPER_LEFT_KHR = 0x30cf;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_OPENGL_ES3_BIT_KHR" with expression '<code>0x00000040</code>', CType: int */
  public static final int EGL_OPENGL_ES3_BIT_KHR = 0x40;
  /** <code>EGL_MESA_drm_image</code><br>Define "EGL_DRM_BUFFER_USE_SCANOUT_MESA" with expression '<code>0x00000001</code>', CType: int */
  public static final int EGL_DRM_BUFFER_USE_SCANOUT_MESA = 0x1;
  /** <code>EGL_MESA_drm_image</code><br>Define "EGL_DRM_BUFFER_USE_MESA" with expression '<code>0x31D1</code>', CType: int */
  public static final int EGL_DRM_BUFFER_USE_MESA = 0x31d1;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_FORMAT_RGB_565_KHR" with expression '<code>0x30C1</code>', CType: int */
  public static final int EGL_FORMAT_RGB_565_KHR = 0x30c1;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_CSC_STANDARD_2020_EXT" with expression '<code>0x330D</code>', CType: int */
  public static final int EGL_YUV_CSC_STANDARD_2020_EXT = 0x330d;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_STREAM_STATE_KHR" with expression '<code>0x3214</code>', CType: int */
  public static final int EGL_STREAM_STATE_KHR = 0x3214;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_ORDER_UYVY_EXT" with expression '<code>0x3305</code>', CType: int */
  public static final int EGL_YUV_ORDER_UYVY_EXT = 0x3305;
  /** <code>EGL_TIZEN_image_native_buffer</code><br>Define "EGL_NATIVE_BUFFER_TIZEN" with expression '<code>0x32A0</code>', CType: int */
  public static final int EGL_NATIVE_BUFFER_TIZEN = 0x32a0;
  /** <code>EGL_MESA_drm_image</code><br>Define "EGL_DRM_BUFFER_FORMAT_MESA" with expression '<code>0x31D0</code>', CType: int */
  public static final int EGL_DRM_BUFFER_FORMAT_MESA = 0x31d0;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR" with expression '<code>0x30CA</code>', CType: int */
  public static final int EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR = 0x30ca;
  /** <code>EGL_ANDROID_image_native_buffer</code><br>Define "EGL_NATIVE_BUFFER_ANDROID" with expression '<code>0x3140</code>', CType: int */
  public static final int EGL_NATIVE_BUFFER_ANDROID = 0x3140;
  /** <code>EGL_ANDROID_native_fence_sync</code><br>Define "EGL_SYNC_NATIVE_FENCE_ANDROID" with expression '<code>0x3144</code>', CType: int */
  public static final int EGL_SYNC_NATIVE_FENCE_ANDROID = 0x3144;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_ORDER_AYUV_EXT" with expression '<code>0x3308</code>', CType: int */
  public static final int EGL_YUV_ORDER_AYUV_EXT = 0x3308;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_ORDER_YUV_EXT" with expression '<code>0x3302</code>', CType: int */
  public static final int EGL_YUV_ORDER_YUV_EXT = 0x3302;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_OBJECT_SURFACE_KHR" with expression '<code>0x33B3</code>', CType: int */
  public static final int EGL_OBJECT_SURFACE_KHR = 0x33b3;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_YUV_NARROW_RANGE_EXT" with expression '<code>0x3283</code>', CType: int */
  public static final int EGL_YUV_NARROW_RANGE_EXT = 0x3283;
  /** <code>EGL_NV_3dvision_surface</code><br>Define "EGL_AUTO_STEREO_NV" with expression '<code>0x3136</code>', CType: int */
  public static final int EGL_AUTO_STEREO_NV = 0x3136;
  /** <code>EGL_EXT_output_openwf</code><br>Define "EGL_OPENWF_PORT_ID_EXT" with expression '<code>0x3239</code>', CType: int */
  public static final int EGL_OPENWF_PORT_ID_EXT = 0x3239;
  /** <code>EGL_KHR_stream_fifo</code><br>Define "EGL_STREAM_TIME_CONSUMER_KHR" with expression '<code>0x31FE</code>', CType: int */
  public static final int EGL_STREAM_TIME_CONSUMER_KHR = 0x31fe;
  /** <code>EGL_KHR_config_attribs</code><br>Define "EGL_CONFORMANT_KHR" with expression '<code>0x3042</code>', CType: int */
  public static final int EGL_CONFORMANT_KHR = 0x3042;
  /** <code>EGL_ANDROID_native_fence_sync</code><br>Define "EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID" with expression '<code>0x3146</code>', CType: int */
  public static final int EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID = 0x3146;
  /** <code>EGL_ANGLE_window_fixed_size</code><br>Define "EGL_FIXED_SIZE_ANGLE" with expression '<code>0x3201</code>', CType: int */
  public static final int EGL_FIXED_SIZE_ANGLE = 0x3201;
  /** <code>EGL_EXT_create_context_robustness</code><br>Define "EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT" with expression '<code>0x3138</code>', CType: int */
  public static final int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT = 0x3138;
  /** <code>EGL_NV_sync</code><br>Define "EGL_CONDITION_SATISFIED_NV" with expression '<code>0x30EC</code>', CType: int */
  public static final int EGL_CONDITION_SATISFIED_NV = 0x30ec;
  /** <code>EGL_MESA_drm_image</code><br>Define "EGL_DRM_BUFFER_MESA" with expression '<code>0x31D3</code>', CType: int */
  public static final int EGL_DRM_BUFFER_MESA = 0x31d3;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_DMA_BUF_PLANE2_PITCH_EXT" with expression '<code>0x327A</code>', CType: int */
  public static final int EGL_DMA_BUF_PLANE2_PITCH_EXT = 0x327a;
  /** <code>EGL_KHR_gl_texture_cubemap_image</code><br>Define "EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR" with expression '<code>0x30B6</code>', CType: int */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR = 0x30b6;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_PLANE_BPP_8_EXT" with expression '<code>0x331C</code>', CType: int */
  public static final int EGL_YUV_PLANE_BPP_8_EXT = 0x331c;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_STREAM_STATE_CREATED_KHR" with expression '<code>0x3215</code>', CType: int */
  public static final int EGL_STREAM_STATE_CREATED_KHR = 0x3215;
  /** <code>EGL_NV_sync</code><br>Define "EGL_SYNC_TYPE_NV" with expression '<code>0x30ED</code>', CType: int */
  public static final int EGL_SYNC_TYPE_NV = 0x30ed;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR" with expression '<code>0x00000001</code>', CType: int */
  public static final int EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR = 0x1;
  /** <code>EGL_KHR_partial_update</code><br>Define "EGL_BUFFER_AGE_KHR" with expression '<code>0x313D</code>', CType: int */
  public static final int EGL_BUFFER_AGE_KHR = 0x313d;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_DEBUG_MSG_CRITICAL_KHR" with expression '<code>0x33B9</code>', CType: int */
  public static final int EGL_DEBUG_MSG_CRITICAL_KHR = 0x33b9;
  /** <code>EGL_EXT_platform_x11</code><br>Define "EGL_PLATFORM_X11_SCREEN_EXT" with expression '<code>0x31D6</code>', CType: int */
  public static final int EGL_PLATFORM_X11_SCREEN_EXT = 0x31d6;
  /** <code>EGL_EXT_output_base</code><br>Define "EGL_BAD_OUTPUT_PORT_EXT" with expression '<code>0x322E</code>', CType: int */
  public static final int EGL_BAD_OUTPUT_PORT_EXT = 0x322e;
  /** <code>EGL_NV_sync</code><br>Define "EGL_SYNC_FLUSH_COMMANDS_BIT_NV" with expression '<code>0x0001</code>', CType: int */
  public static final int EGL_SYNC_FLUSH_COMMANDS_BIT_NV = 0x1;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT" with expression '<code>0x327E</code>', CType: int */
  public static final int EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT = 0x327e;
  /** <code>EGL_NV_sync</code><br>Define "EGL_SYNC_STATUS_NV" with expression '<code>0x30E7</code>', CType: int */
  public static final int EGL_SYNC_STATUS_NV = 0x30e7;
  /** <code>EGL_KHR_fence_sync</code><br>Define "EGL_SYNC_FENCE_KHR" with expression '<code>0x30F9</code>', CType: int */
  public static final int EGL_SYNC_FENCE_KHR = 0x30f9;
  /** <code>EGL_IMG_context_priority</code><br>Define "EGL_CONTEXT_PRIORITY_HIGH_IMG" with expression '<code>0x3101</code>', CType: int */
  public static final int EGL_CONTEXT_PRIORITY_HIGH_IMG = 0x3101;
  /** <code>EGL_KHR_gl_texture_cubemap_image</code><br>Define "EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR" with expression '<code>0x30B4</code>', CType: int */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR = 0x30b4;
  /** <code>EGL_KHR_gl_colorspace</code><br>Define "EGL_GL_COLORSPACE_KHR" with expression '<code>0x309D</code>', CType: int */
  public static final int EGL_GL_COLORSPACE_KHR = 0x309d;
  /** <code>EGL_IMG_context_priority</code><br>Define "EGL_CONTEXT_PRIORITY_LEVEL_IMG" with expression '<code>0x3100</code>', CType: int */
  public static final int EGL_CONTEXT_PRIORITY_LEVEL_IMG = 0x3100;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_LOCK_SURFACE_BIT_KHR" with expression '<code>0x0080</code>', CType: int */
  public static final int EGL_LOCK_SURFACE_BIT_KHR = 0x80;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_DEBUG_MSG_ERROR_KHR" with expression '<code>0x33BA</code>', CType: int */
  public static final int EGL_DEBUG_MSG_ERROR_KHR = 0x33ba;
  /** <code>EGL_EXT_output_drm</code><br>Define "EGL_DRM_CRTC_EXT" with expression '<code>0x3234</code>', CType: int */
  public static final int EGL_DRM_CRTC_EXT = 0x3234;
  /** <code>EGL_NV_post_sub_buffer</code><br>Define "EGL_POST_SUB_BUFFER_SUPPORTED_NV" with expression '<code>0x30BE</code>', CType: int */
  public static final int EGL_POST_SUB_BUFFER_SUPPORTED_NV = 0x30be;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_WRITE_SURFACE_BIT_KHR" with expression '<code>0x0002</code>', CType: int */
  public static final int EGL_WRITE_SURFACE_BIT_KHR = 0x2;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR" with expression '<code>0x00000002</code>', CType: int */
  public static final int EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR = 0x2;
  /** <code>EGL_KHR_config_attribs</code><br>Define "EGL_VG_COLORSPACE_LINEAR_BIT_KHR" with expression '<code>0x0020</code>', CType: int */
  public static final int EGL_VG_COLORSPACE_LINEAR_BIT_KHR = 0x20;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_PLANE_BPP_10_EXT" with expression '<code>0x331D</code>', CType: int */
  public static final int EGL_YUV_PLANE_BPP_10_EXT = 0x331d;
  /** <code>EGL_EXT_multiview_window</code><br>Define "EGL_MULTIVIEW_VIEW_COUNT_EXT" with expression '<code>0x3134</code>', CType: int */
  public static final int EGL_MULTIVIEW_VIEW_COUNT_EXT = 0x3134;
  /** <code>EGL_EXT_buffer_age</code><br>Define "EGL_BUFFER_AGE_EXT" with expression '<code>0x313D</code>', CType: int */
  public static final int EGL_BUFFER_AGE_EXT = 0x313d;
  /** <code>EGL_KHR_config_attribs</code><br>Define "EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR" with expression '<code>0x0040</code>', CType: int */
  public static final int EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR = 0x40;
  /** <code>EGL_KHR_gl_colorspace</code><br>Define "EGL_GL_COLORSPACE_SRGB_KHR" with expression '<code>0x3089</code>', CType: int */
  public static final int EGL_GL_COLORSPACE_SRGB_KHR = 0x3089;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR" with expression '<code>0x00000001</code>', CType: int */
  public static final int EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR = 0x1;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_DMA_BUF_PLANE1_FD_EXT" with expression '<code>0x3275</code>', CType: int */
  public static final int EGL_DMA_BUF_PLANE1_FD_EXT = 0x3275;
  /** <code>EGL_KHR_platform_gbm</code><br>Define "EGL_PLATFORM_GBM_KHR" with expression '<code>0x31D7</code>', CType: int */
  public static final int EGL_PLATFORM_GBM_KHR = 0x31d7;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR" with expression '<code>0x3219</code>', CType: int */
  public static final int EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR = 0x3219;
  /** <code>EGL_NV_depth_nonlinear</code><br>Define "EGL_DEPTH_ENCODING_NV" with expression '<code>0x30E2</code>', CType: int */
  public static final int EGL_DEPTH_ENCODING_NV = 0x30e2;
  /** <code>EGL_KHR_reusable_sync</code><br>Define "EGL_TIMEOUT_EXPIRED_KHR" with expression '<code>0x30F5</code>', CType: int */
  public static final int EGL_TIMEOUT_EXPIRED_KHR = 0x30f5;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_ORDER_YVU_EXT" with expression '<code>0x3303</code>', CType: int */
  public static final int EGL_YUV_ORDER_YVU_EXT = 0x3303;
  /** <code>EGL_HI_colorformats</code><br>Define "EGL_COLOR_ARGB_HI" with expression '<code>0x8F73</code>', CType: int */
  public static final int EGL_COLOR_ARGB_HI = 0x8f73;
  /** <code>EGL_KHR_platform_x11</code><br>Define "EGL_PLATFORM_X11_KHR" with expression '<code>0x31D5</code>', CType: int */
  public static final int EGL_PLATFORM_X11_KHR = 0x31d5;
  /** <code>EGL_NV_sync</code><br>Define "EGL_SYNC_FENCE_NV" with expression '<code>0x30EF</code>', CType: int */
  public static final int EGL_SYNC_FENCE_NV = 0x30ef;
  /** <code>EGL_KHR_debug</code><br>Define "EGL_OBJECT_DISPLAY_KHR" with expression '<code>0x33B1</code>', CType: int */
  public static final int EGL_OBJECT_DISPLAY_KHR = 0x33b1;
  /** <code>EGL_KHR_gl_texture_3D_image</code><br>Define "EGL_GL_TEXTURE_ZOFFSET_KHR" with expression '<code>0x30BD</code>', CType: int */
  public static final int EGL_GL_TEXTURE_ZOFFSET_KHR = 0x30bd;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_BITMAP_PITCH_KHR" with expression '<code>0x30C7</code>', CType: int */
  public static final int EGL_BITMAP_PITCH_KHR = 0x30c7;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_FORMAT_RGB_565_EXACT_KHR" with expression '<code>0x30C0</code>', CType: int */
  public static final int EGL_FORMAT_RGB_565_EXACT_KHR = 0x30c0;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_DMA_BUF_PLANE0_FD_EXT" with expression '<code>0x3272</code>', CType: int */
  public static final int EGL_DMA_BUF_PLANE0_FD_EXT = 0x3272;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_SAMPLE_RANGE_HINT_EXT" with expression '<code>0x327C</code>', CType: int */
  public static final int EGL_SAMPLE_RANGE_HINT_EXT = 0x327c;
  /** <code>EGL_EXT_yuv_surface</code><br>Define "EGL_YUV_DEPTH_RANGE_FULL_EXT" with expression '<code>0x3319</code>', CType: int */
  public static final int EGL_YUV_DEPTH_RANGE_FULL_EXT = 0x3319;
  /** <code>EGL_ANDROID_native_fence_sync</code><br>Define "EGL_SYNC_NATIVE_FENCE_FD_ANDROID" with expression '<code>0x3145</code>', CType: int */
  public static final int EGL_SYNC_NATIVE_FENCE_FD_ANDROID = 0x3145;
  /** <code>EGL_KHR_cl_event</code><br>Define "EGL_SYNC_CL_EVENT_COMPLETE_KHR" with expression '<code>0x30FF</code>', CType: int */
  public static final int EGL_SYNC_CL_EVENT_COMPLETE_KHR = 0x30ff;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_BITMAP_ORIGIN_KHR" with expression '<code>0x30C8</code>', CType: int */
  public static final int EGL_BITMAP_ORIGIN_KHR = 0x30c8;
  /** <code>EGL_EXT_output_base</code><br>Define "EGL_BAD_OUTPUT_LAYER_EXT" with expression '<code>0x322D</code>', CType: int */
  public static final int EGL_BAD_OUTPUT_LAYER_EXT = 0x322d;
  /** <code>EGL_MESA_drm_image</code><br>Define "EGL_DRM_BUFFER_STRIDE_MESA" with expression '<code>0x31D4</code>', CType: int */
  public static final int EGL_DRM_BUFFER_STRIDE_MESA = 0x31d4;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_ITU_REC709_EXT" with expression '<code>0x3280</code>', CType: int */
  public static final int EGL_ITU_REC709_EXT = 0x3280;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR" with expression '<code>0x30CD</code>', CType: int */
  public static final int EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR = 0x30cd;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR" with expression '<code>0x30FD</code>', CType: int */
  public static final int EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR = 0x30fd;
  /** <code>EGL_EXT_image_dma_buf_import</code><br>Define "EGL_LINUX_DRM_FOURCC_EXT" with expression '<code>0x3271</code>', CType: int */
  public static final int EGL_LINUX_DRM_FOURCC_EXT = 0x3271;
  /** <code>EGL_KHR_lock_surface</code><br>Define "EGL_BITMAP_POINTER_KHR" with expression '<code>0x30C6</code>', CType: int */
  public static final int EGL_BITMAP_POINTER_KHR = 0x30c6;
  /** <code>EGL_KHR_stream</code><br>Define "EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR" with expression '<code>0x3218</code>', CType: int */
  public static final int EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR = 0x3218;
  /** <code>EGL_EXT_platform_wayland</code><br>Define "EGL_PLATFORM_WAYLAND_EXT" with expression '<code>0x31D8</code>', CType: int */
  public static final int EGL_PLATFORM_WAYLAND_EXT = 0x31d8;
  /** <code>EGL_MESA_drm_image</code><br>Define "EGL_DRM_BUFFER_USE_SHARE_MESA" with expression '<code>0x00000002</code>', CType: int */
  public static final int EGL_DRM_BUFFER_USE_SHARE_MESA = 0x2;
  /** <code>EGL_KHR_stream_fifo</code><br>Define "EGL_STREAM_TIME_NOW_KHR" with expression '<code>0x31FD</code>', CType: int */
  public static final int EGL_STREAM_TIME_NOW_KHR = 0x31fd;
  /** <code>EGL_KHR_create_context</code><br>Define "EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR" with expression '<code>0x00000004</code>', CType: int */
  public static final int EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR = 0x4;
  /** <code>EGL_ANDROID_recordable</code><br>Define "EGL_RECORDABLE_ANDROID" with expression '<code>0x3142</code>', CType: int */
  public static final int EGL_RECORDABLE_ANDROID = 0x3142;
  /** <code>EGL_NV_cuda_event</code><br>Define "EGL_CUDA_EVENT_HANDLE_NV" with expression '<code>0x323B</code>', CType: int */
  public static final int EGL_CUDA_EVENT_HANDLE_NV = 0x323b;

  /** Entry point to C language function: <code> EGLSyncKHR eglCreateSync64KHR(EGLDisplay dpy, EGLenum type, const EGLAttribKHR *  attrib_list) </code> <br>Part of <code>EGL_KHR_cl_event2</code><br>
      @param attrib_list a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public long eglCreateSync64KHR(long dpy, int type, PointerBuffer attrib_list);

  /** Entry point to C language function: <code> EGLBoolean eglQueryDebugKHR(EGLint attribute, EGLAttrib *  value) </code> <br>Part of <code>EGL_KHR_debug</code><br>
      @param value a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public boolean eglQueryDebugKHR(int attribute, PointerBuffer value);

  /** Entry point to C language function: <code> EGLint eglLabelObjectKHR(EGLDisplay display, EGLenum objectType, EGLObjectKHR object, EGLLabelKHR label) </code> <br>Part of <code>EGL_KHR_debug</code><br>   */
  public int eglLabelObjectKHR(long display, int objectType, long object, long label);

  /** Entry point to C language function: <code> EGLSyncKHR eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *  attrib_list) </code> <br>Part of <code>EGL_KHR_fence_sync</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long eglCreateSyncKHR(long dpy, int type, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLBoolean eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR sync) </code> <br>Part of <code>EGL_KHR_fence_sync</code><br>   */
  public boolean eglDestroySyncKHR(long dpy, long sync);

  /** Entry point to C language function: <code> EGLint eglClientWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout) </code> <br>Part of <code>EGL_KHR_fence_sync</code><br>   */
  public int eglClientWaitSyncKHR(long dpy, long sync, int flags, long timeout);

  /** Entry point to C language function: <code> EGLBoolean eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *  value) </code> <br>Part of <code>EGL_KHR_fence_sync</code><br>
      @param value a direct only {@link java.nio.IntBuffer}   */
  public boolean eglGetSyncAttribKHR(long dpy, long sync, int attribute, IntBuffer value);

  /** Entry point to C language function: <code> EGLImageKHR eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *  attrib_list) </code> <br>Part of <code>EGL_KHR_image</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long eglCreateImageKHR(long dpy, long ctx, int target, long buffer, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLBoolean eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image) </code> <br>Part of <code>EGL_KHR_image</code><br>   */
  public boolean eglDestroyImageKHR(long dpy, long image);

  /** Entry point to C language function: <code> EGLBoolean eglLockSurfaceKHR(EGLDisplay dpy, EGLSurface surface, const EGLint *  attrib_list) </code> <br>Part of <code>EGL_KHR_lock_surface</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public boolean eglLockSurfaceKHR(long dpy, long surface, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLBoolean eglUnlockSurfaceKHR(EGLDisplay dpy, EGLSurface surface) </code> <br>Part of <code>EGL_KHR_lock_surface</code><br>   */
  public boolean eglUnlockSurfaceKHR(long dpy, long surface);

  /** Entry point to C language function: <code> EGLBoolean eglQuerySurface64KHR(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLAttribKHR *  value) </code> <br>Part of <code>EGL_KHR_lock_surface3</code><br>
      @param value a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public boolean eglQuerySurface64KHR(long dpy, long surface, int attribute, PointerBuffer value);

  /** Entry point to C language function: <code> EGLBoolean eglSetDamageRegionKHR(EGLDisplay dpy, EGLSurface surface, EGLint *  rects, EGLint n_rects) </code> <br>Part of <code>EGL_KHR_partial_update</code><br>
      @param rects a direct only {@link java.nio.IntBuffer}   */
  public boolean eglSetDamageRegionKHR(long dpy, long surface, IntBuffer rects, int n_rects);

  /** Entry point to C language function: <code> EGLBoolean eglSignalSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode) </code> <br>Part of <code>EGL_KHR_reusable_sync</code><br>   */
  public boolean eglSignalSyncKHR(long dpy, long sync, int mode);

  /** Entry point to C language function: <code> EGLStreamKHR eglCreateStreamKHR(EGLDisplay dpy, const EGLint *  attrib_list) </code> <br>Part of <code>EGL_KHR_stream</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long eglCreateStreamKHR(long dpy, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLBoolean eglDestroyStreamKHR(EGLDisplay dpy, EGLStreamKHR stream) </code> <br>Part of <code>EGL_KHR_stream</code><br>   */
  public boolean eglDestroyStreamKHR(long dpy, long stream);

  /** Entry point to C language function: <code> EGLBoolean eglStreamAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value) </code> <br>Part of <code>EGL_KHR_stream</code><br>   */
  public boolean eglStreamAttribKHR(long dpy, long stream, int attribute, int value);

  /** Entry point to C language function: <code> EGLBoolean eglQueryStreamKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint *  value) </code> <br>Part of <code>EGL_KHR_stream</code><br>
      @param value a direct only {@link java.nio.IntBuffer}   */
  public boolean eglQueryStreamKHR(long dpy, long stream, int attribute, IntBuffer value);

  /** Entry point to C language function: <code> EGLBoolean eglQueryStreamu64KHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR *  value) </code> <br>Part of <code>EGL_KHR_stream</code><br>
      @param value a direct only {@link java.nio.LongBuffer}   */
  public boolean eglQueryStreamu64KHR(long dpy, long stream, int attribute, LongBuffer value);

  /** Entry point to C language function: <code> EGLBoolean eglStreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStreamKHR stream) </code> <br>Part of <code>EGL_KHR_stream_consumer_gltexture</code><br>   */
  public boolean eglStreamConsumerGLTextureExternalKHR(long dpy, long stream);

  /** Entry point to C language function: <code> EGLBoolean eglStreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR stream) </code> <br>Part of <code>EGL_KHR_stream_consumer_gltexture</code><br>   */
  public boolean eglStreamConsumerAcquireKHR(long dpy, long stream);

  /** Entry point to C language function: <code> EGLBoolean eglStreamConsumerReleaseKHR(EGLDisplay dpy, EGLStreamKHR stream) </code> <br>Part of <code>EGL_KHR_stream_consumer_gltexture</code><br>   */
  public boolean eglStreamConsumerReleaseKHR(long dpy, long stream);

  /** Entry point to C language function: <code> EGLNativeFileDescriptorKHR eglGetStreamFileDescriptorKHR(EGLDisplay dpy, EGLStreamKHR stream) </code> <br>Part of <code>EGL_KHR_stream_cross_process_fd</code><br>   */
  public int eglGetStreamFileDescriptorKHR(long dpy, long stream);

  /** Entry point to C language function: <code> EGLStreamKHR eglCreateStreamFromFileDescriptorKHR(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor) </code> <br>Part of <code>EGL_KHR_stream_cross_process_fd</code><br>   */
  public long eglCreateStreamFromFileDescriptorKHR(long dpy, int file_descriptor);

  /** Entry point to C language function: <code> EGLBoolean eglQueryStreamTimeKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR *  value) </code> <br>Part of <code>EGL_KHR_stream_fifo</code><br>
      @param value a direct only {@link java.nio.LongBuffer}   */
  public boolean eglQueryStreamTimeKHR(long dpy, long stream, int attribute, LongBuffer value);

  /** Entry point to C language function: <code> EGLSurface eglCreateStreamProducerSurfaceKHR(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *  attrib_list) </code> <br>Part of <code>EGL_KHR_stream_producer_eglsurface</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long eglCreateStreamProducerSurfaceKHR(long dpy, long config, long stream, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLBoolean eglSwapBuffersWithDamageKHR(EGLDisplay dpy, EGLSurface surface, EGLint *  rects, EGLint n_rects) </code> <br>Part of <code>EGL_KHR_swap_buffers_with_damage</code><br>
      @param rects a direct only {@link java.nio.IntBuffer}   */
  public boolean eglSwapBuffersWithDamageKHR(long dpy, long surface, IntBuffer rects, int n_rects);

  /** Entry point to C language function: <code> EGLint eglWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags) </code> <br>Part of <code>EGL_KHR_wait_sync</code><br>   */
  public int eglWaitSyncKHR(long dpy, long sync, int flags);

  /** Entry point to C language function: <code> EGLint eglDupNativeFenceFDANDROID(EGLDisplay dpy, EGLSyncKHR sync) </code> <br>Part of <code>EGL_ANDROID_native_fence_sync</code><br>   */
  public int eglDupNativeFenceFDANDROID(long dpy, long sync);

  /** Entry point to C language function: <code> EGLBoolean eglQuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surface, EGLint attribute, void *  *  value) </code> <br>Part of <code>EGL_ANGLE_query_surface_pointer</code><br>
      @param value a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public boolean eglQuerySurfacePointerANGLE(long dpy, long surface, int attribute, PointerBuffer value);

  /** Entry point to C language function: <code> EGLBoolean eglQueryDeviceAttribEXT(EGLDeviceEXT device, EGLint attribute, EGLAttrib *  value) </code> <br>Part of <code>EGL_EXT_device_base</code><br>
      @param value a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public boolean eglQueryDeviceAttribEXT(long device, int attribute, PointerBuffer value);

  /** Entry point to C language function: <code> const char *  eglQueryDeviceStringEXT(EGLDeviceEXT device, EGLint name) </code> <br>Part of <code>EGL_EXT_device_base</code><br>   */
  public ByteBuffer eglQueryDeviceStringEXT(long device, int name);

  /** Entry point to C language function: <code> EGLBoolean eglQueryDevicesEXT(EGLint max_devices, EGLDeviceEXT *  devices, EGLint *  num_devices) </code> <br>Part of <code>EGL_EXT_device_base</code><br>
      @param devices a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param num_devices a direct only {@link java.nio.IntBuffer}   */
  public boolean eglQueryDevicesEXT(int max_devices, PointerBuffer devices, IntBuffer num_devices);

  /** Entry point to C language function: <code> EGLBoolean eglQueryDisplayAttribEXT(EGLDisplay dpy, EGLint attribute, EGLAttrib *  value) </code> <br>Part of <code>EGL_EXT_device_base</code><br>
      @param value a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public boolean eglQueryDisplayAttribEXT(long dpy, int attribute, PointerBuffer value);

  /** Entry point to C language function: <code> EGLBoolean eglGetOutputLayersEXT(EGLDisplay dpy, const EGLAttrib *  attrib_list, EGLOutputLayerEXT *  layers, EGLint max_layers, EGLint *  num_layers) </code> <br>Part of <code>EGL_EXT_output_base</code><br>
      @param attrib_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param layers a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param num_layers a direct only {@link java.nio.IntBuffer}   */
  public boolean eglGetOutputLayersEXT(long dpy, PointerBuffer attrib_list, PointerBuffer layers, int max_layers, IntBuffer num_layers);

  /** Entry point to C language function: <code> EGLBoolean eglGetOutputPortsEXT(EGLDisplay dpy, const EGLAttrib *  attrib_list, EGLOutputPortEXT *  ports, EGLint max_ports, EGLint *  num_ports) </code> <br>Part of <code>EGL_EXT_output_base</code><br>
      @param attrib_list a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param ports a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param num_ports a direct only {@link java.nio.IntBuffer}   */
  public boolean eglGetOutputPortsEXT(long dpy, PointerBuffer attrib_list, PointerBuffer ports, int max_ports, IntBuffer num_ports);

  /** Entry point to C language function: <code> EGLBoolean eglOutputLayerAttribEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib value) </code> <br>Part of <code>EGL_EXT_output_base</code><br>   */
  public boolean eglOutputLayerAttribEXT(long dpy, long layer, int attribute, long value);

  /** Entry point to C language function: <code> EGLBoolean eglQueryOutputLayerAttribEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib *  value) </code> <br>Part of <code>EGL_EXT_output_base</code><br>
      @param value a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public boolean eglQueryOutputLayerAttribEXT(long dpy, long layer, int attribute, PointerBuffer value);

  /** Entry point to C language function: <code> const char *  eglQueryOutputLayerStringEXT(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint name) </code> <br>Part of <code>EGL_EXT_output_base</code><br>   */
  public ByteBuffer eglQueryOutputLayerStringEXT(long dpy, long layer, int name);

  /** Entry point to C language function: <code> EGLBoolean eglOutputPortAttribEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib value) </code> <br>Part of <code>EGL_EXT_output_base</code><br>   */
  public boolean eglOutputPortAttribEXT(long dpy, long port, int attribute, long value);

  /** Entry point to C language function: <code> EGLBoolean eglQueryOutputPortAttribEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib *  value) </code> <br>Part of <code>EGL_EXT_output_base</code><br>
      @param value a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public boolean eglQueryOutputPortAttribEXT(long dpy, long port, int attribute, PointerBuffer value);

  /** Entry point to C language function: <code> const char *  eglQueryOutputPortStringEXT(EGLDisplay dpy, EGLOutputPortEXT port, EGLint name) </code> <br>Part of <code>EGL_EXT_output_base</code><br>   */
  public ByteBuffer eglQueryOutputPortStringEXT(long dpy, long port, int name);

  /** Entry point to C language function: <code> EGLDisplay eglGetPlatformDisplayEXT(EGLenum platform, void *  native_display, const EGLint *  attrib_list) </code> <br>Part of <code>EGL_EXT_platform_base</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long eglGetPlatformDisplayEXT(int platform, long native_display, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLSurface eglCreatePlatformWindowSurfaceEXT(EGLDisplay dpy, EGLConfig config, void *  native_window, const EGLint *  attrib_list) </code> <br>Part of <code>EGL_EXT_platform_base</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long eglCreatePlatformWindowSurfaceEXT(long dpy, long config, long native_window, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLSurface eglCreatePlatformPixmapSurfaceEXT(EGLDisplay dpy, EGLConfig config, void *  native_pixmap, const EGLint *  attrib_list) </code> <br>Part of <code>EGL_EXT_platform_base</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long eglCreatePlatformPixmapSurfaceEXT(long dpy, long config, long native_pixmap, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLBoolean eglStreamConsumerOutputEXT(EGLDisplay dpy, EGLStreamKHR stream, EGLOutputLayerEXT layer) </code> <br>Part of <code>EGL_EXT_stream_consumer_egloutput</code><br>   */
  public boolean eglStreamConsumerOutputEXT(long dpy, long stream, long layer);

  /** Entry point to C language function: <code> EGLBoolean eglSwapBuffersWithDamageEXT(EGLDisplay dpy, EGLSurface surface, EGLint *  rects, EGLint n_rects) </code> <br>Part of <code>EGL_EXT_swap_buffers_with_damage</code><br>
      @param rects a direct only {@link java.nio.IntBuffer}   */
  public boolean eglSwapBuffersWithDamageEXT(long dpy, long surface, IntBuffer rects, int n_rects);

  /** Entry point to C language function: <code> EGLSurface eglCreatePixmapSurfaceHI(EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI *  pixmap) </code> <br>Part of <code>EGL_HI_clientpixmap</code><br>   */
  public long eglCreatePixmapSurfaceHI(long dpy, long config, EGLClientPixmapHI pixmap);

  /** Entry point to C language function: <code> EGLImageKHR eglCreateDRMImageMESA(EGLDisplay dpy, const EGLint *  attrib_list) </code> <br>Part of <code>EGL_MESA_drm_image</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long eglCreateDRMImageMESA(long dpy, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLBoolean eglExportDRMImageMESA(EGLDisplay dpy, EGLImageKHR image, EGLint *  name, EGLint *  handle, EGLint *  stride) </code> <br>Part of <code>EGL_MESA_drm_image</code><br>
      @param name a direct only {@link java.nio.IntBuffer}
      @param handle a direct only {@link java.nio.IntBuffer}
      @param stride a direct only {@link java.nio.IntBuffer}   */
  public boolean eglExportDRMImageMESA(long dpy, long image, IntBuffer name, IntBuffer handle, IntBuffer stride);

  /** Entry point to C language function: <code> EGLBoolean eglExportDMABUFImageQueryMESA(EGLDisplay dpy, EGLImageKHR image, int *  fourcc, int *  num_planes, EGLuint64KHR *  modifiers) </code> <br>Part of <code>EGL_MESA_image_dma_buf_export</code><br>
      @param fourcc a direct only {@link java.nio.IntBuffer}
      @param num_planes a direct only {@link java.nio.IntBuffer}
      @param modifiers a direct only {@link java.nio.LongBuffer}   */
  public boolean eglExportDMABUFImageQueryMESA(long dpy, long image, IntBuffer fourcc, IntBuffer num_planes, LongBuffer modifiers);

  /** Entry point to C language function: <code> EGLBoolean eglExportDMABUFImageMESA(EGLDisplay dpy, EGLImageKHR image, int *  fds, EGLint *  strides, EGLint *  offsets) </code> <br>Part of <code>EGL_MESA_image_dma_buf_export</code><br>
      @param fds a direct only {@link java.nio.IntBuffer}
      @param strides a direct only {@link java.nio.IntBuffer}
      @param offsets a direct only {@link java.nio.IntBuffer}   */
  public boolean eglExportDMABUFImageMESA(long dpy, long image, IntBuffer fds, IntBuffer strides, IntBuffer offsets);

  /** Entry point to C language function: <code> EGLBoolean eglSwapBuffersRegionNOK(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *  rects) </code> <br>Part of <code>EGL_NOK_swap_region</code><br>
      @param rects a direct only {@link java.nio.IntBuffer}   */
  public boolean eglSwapBuffersRegionNOK(long dpy, long surface, int numRects, IntBuffer rects);

  /** Entry point to C language function: <code> EGLBoolean eglSwapBuffersRegion2NOK(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *  rects) </code> <br>Part of <code>EGL_NOK_swap_region2</code><br>
      @param rects a direct only {@link java.nio.IntBuffer}   */
  public boolean eglSwapBuffersRegion2NOK(long dpy, long surface, int numRects, IntBuffer rects);

  /** Entry point to C language function: <code> EGLBoolean eglQueryNativeDisplayNV(EGLDisplay dpy, EGLNativeDisplayType *  display_id) </code> <br>Part of <code>EGL_NV_native_query</code><br>
      @param display_id a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public boolean eglQueryNativeDisplayNV(long dpy, PointerBuffer display_id);

  /** Entry point to C language function: <code> EGLBoolean eglQueryNativeWindowNV(EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType *  window) </code> <br>Part of <code>EGL_NV_native_query</code><br>
      @param window a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public boolean eglQueryNativeWindowNV(long dpy, long surf, PointerBuffer window);

  /** Entry point to C language function: <code> EGLBoolean eglQueryNativePixmapNV(EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType *  pixmap) </code> <br>Part of <code>EGL_NV_native_query</code><br>
      @param pixmap a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public boolean eglQueryNativePixmapNV(long dpy, long surf, PointerBuffer pixmap);

  /** Entry point to C language function: <code> EGLBoolean eglPostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height) </code> <br>Part of <code>EGL_NV_post_sub_buffer</code><br>   */
  public boolean eglPostSubBufferNV(long dpy, long surface, int x, int y, int width, int height);

  /** Entry point to C language function: <code> EGLSyncKHR eglCreateStreamSyncNV(EGLDisplay dpy, EGLStreamKHR stream, EGLenum type, const EGLint *  attrib_list) </code> <br>Part of <code>EGL_NV_stream_sync</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long eglCreateStreamSyncNV(long dpy, long stream, int type, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLSyncNV eglCreateFenceSyncNV(EGLDisplay dpy, EGLenum condition, const EGLint *  attrib_list) </code> <br>Part of <code>EGL_NV_sync</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long eglCreateFenceSyncNV(long dpy, int condition, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLBoolean eglDestroySyncNV(EGLSyncNV sync) </code> <br>Part of <code>EGL_NV_sync</code><br>   */
  public boolean eglDestroySyncNV(long sync);

  /** Entry point to C language function: <code> EGLBoolean eglFenceNV(EGLSyncNV sync) </code> <br>Part of <code>EGL_NV_sync</code><br>   */
  public boolean eglFenceNV(long sync);

  /** Entry point to C language function: <code> EGLint eglClientWaitSyncNV(EGLSyncNV sync, EGLint flags, EGLTimeNV timeout) </code> <br>Part of <code>EGL_NV_sync</code><br>   */
  public int eglClientWaitSyncNV(long sync, int flags, long timeout);

  /** Entry point to C language function: <code> EGLBoolean eglSignalSyncNV(EGLSyncNV sync, EGLenum mode) </code> <br>Part of <code>EGL_NV_sync</code><br>   */
  public boolean eglSignalSyncNV(long sync, int mode);

  /** Entry point to C language function: <code> EGLBoolean eglGetSyncAttribNV(EGLSyncNV sync, EGLint attribute, EGLint *  value) </code> <br>Part of <code>EGL_NV_sync</code><br>
      @param value a direct only {@link java.nio.IntBuffer}   */
  public boolean eglGetSyncAttribNV(long sync, int attribute, IntBuffer value);

  /** Entry point to C language function: <code> EGLuint64NV eglGetSystemTimeFrequencyNV() </code> <br>Part of <code>EGL_NV_system_time</code><br>   */
  public long eglGetSystemTimeFrequencyNV();

  /** Entry point to C language function: <code> EGLuint64NV eglGetSystemTimeNV() </code> <br>Part of <code>EGL_NV_system_time</code><br>   */
  public long eglGetSystemTimeNV();


  // --- Begin CustomJavaCode .cfg declarations
      /** Part of <code>EGL_KHR_image</code> */
      public static final long EGL_NO_IMAGE = 0;
      /** Part of <code>EGL_KHR_reusable_sync</code> */
      public static final long EGL_NO_SYNC_KHR = 0;
      public boolean isFunctionAvailable(String glFunctionName);
      public boolean isExtensionAvailable(String glExtensionName);
  // ---- End CustomJavaCode .cfg declarations
} // end of class EGLExt
