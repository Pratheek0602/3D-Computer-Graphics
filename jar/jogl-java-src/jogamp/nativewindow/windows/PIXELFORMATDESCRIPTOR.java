/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:06 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.windows, cls PIXELFORMATDESCRIPTOR], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/windows/PIXELFORMATDESCRIPTOR.java ----! */


package jogamp.nativewindow.windows;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import com.jogamp.nativewindow.util.Point;
import com.jogamp.nativewindow.NativeWindowException;
import jogamp.nativewindow.NWJNILibLoader;
import jogamp.nativewindow.Debug;

public class PIXELFORMATDESCRIPTOR {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] PIXELFORMATDESCRIPTOR_size = new int[] { 40 /* ARM_MIPS_32 */, 40 /* X86_32_UNIX */, 40 /* X86_32_ANDROID */, 40 /* X86_32_MACOS */, 40 /* PPC_32_UNIX */, 40 /* SPARC_32_SUNOS */, 40 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */, 40 /* ARM64_IOS */  };
  private static final int[] nSize_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] nSize_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] nVersion_offset = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */ };
//private static final int[] nVersion_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] dwFlags_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */ };
//private static final int[] dwFlags_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] iPixelType_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */ };
//private static final int[] iPixelType_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cColorBits_offset = new int[] { 9 /* ARM_MIPS_32 */, 9 /* X86_32_UNIX */, 9 /* X86_32_ANDROID */, 9 /* X86_32_MACOS */, 9 /* PPC_32_UNIX */, 9 /* SPARC_32_SUNOS */, 9 /* X86_32_WINDOWS */, 9 /* LP64_UNIX */, 9 /* X86_64_WINDOWS */, 9 /* ARM64_IOS */ };
//private static final int[] cColorBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cRedBits_offset = new int[] { 10 /* ARM_MIPS_32 */, 10 /* X86_32_UNIX */, 10 /* X86_32_ANDROID */, 10 /* X86_32_MACOS */, 10 /* PPC_32_UNIX */, 10 /* SPARC_32_SUNOS */, 10 /* X86_32_WINDOWS */, 10 /* LP64_UNIX */, 10 /* X86_64_WINDOWS */, 10 /* ARM64_IOS */ };
//private static final int[] cRedBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cRedShift_offset = new int[] { 11 /* ARM_MIPS_32 */, 11 /* X86_32_UNIX */, 11 /* X86_32_ANDROID */, 11 /* X86_32_MACOS */, 11 /* PPC_32_UNIX */, 11 /* SPARC_32_SUNOS */, 11 /* X86_32_WINDOWS */, 11 /* LP64_UNIX */, 11 /* X86_64_WINDOWS */, 11 /* ARM64_IOS */ };
//private static final int[] cRedShift_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cGreenBits_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */, 12 /* ARM64_IOS */ };
//private static final int[] cGreenBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cGreenShift_offset = new int[] { 13 /* ARM_MIPS_32 */, 13 /* X86_32_UNIX */, 13 /* X86_32_ANDROID */, 13 /* X86_32_MACOS */, 13 /* PPC_32_UNIX */, 13 /* SPARC_32_SUNOS */, 13 /* X86_32_WINDOWS */, 13 /* LP64_UNIX */, 13 /* X86_64_WINDOWS */, 13 /* ARM64_IOS */ };
//private static final int[] cGreenShift_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cBlueBits_offset = new int[] { 14 /* ARM_MIPS_32 */, 14 /* X86_32_UNIX */, 14 /* X86_32_ANDROID */, 14 /* X86_32_MACOS */, 14 /* PPC_32_UNIX */, 14 /* SPARC_32_SUNOS */, 14 /* X86_32_WINDOWS */, 14 /* LP64_UNIX */, 14 /* X86_64_WINDOWS */, 14 /* ARM64_IOS */ };
//private static final int[] cBlueBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cBlueShift_offset = new int[] { 15 /* ARM_MIPS_32 */, 15 /* X86_32_UNIX */, 15 /* X86_32_ANDROID */, 15 /* X86_32_MACOS */, 15 /* PPC_32_UNIX */, 15 /* SPARC_32_SUNOS */, 15 /* X86_32_WINDOWS */, 15 /* LP64_UNIX */, 15 /* X86_64_WINDOWS */, 15 /* ARM64_IOS */ };
//private static final int[] cBlueShift_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cAlphaBits_offset = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */ };
//private static final int[] cAlphaBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cAlphaShift_offset = new int[] { 17 /* ARM_MIPS_32 */, 17 /* X86_32_UNIX */, 17 /* X86_32_ANDROID */, 17 /* X86_32_MACOS */, 17 /* PPC_32_UNIX */, 17 /* SPARC_32_SUNOS */, 17 /* X86_32_WINDOWS */, 17 /* LP64_UNIX */, 17 /* X86_64_WINDOWS */, 17 /* ARM64_IOS */ };
//private static final int[] cAlphaShift_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cAccumBits_offset = new int[] { 18 /* ARM_MIPS_32 */, 18 /* X86_32_UNIX */, 18 /* X86_32_ANDROID */, 18 /* X86_32_MACOS */, 18 /* PPC_32_UNIX */, 18 /* SPARC_32_SUNOS */, 18 /* X86_32_WINDOWS */, 18 /* LP64_UNIX */, 18 /* X86_64_WINDOWS */, 18 /* ARM64_IOS */ };
//private static final int[] cAccumBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cAccumRedBits_offset = new int[] { 19 /* ARM_MIPS_32 */, 19 /* X86_32_UNIX */, 19 /* X86_32_ANDROID */, 19 /* X86_32_MACOS */, 19 /* PPC_32_UNIX */, 19 /* SPARC_32_SUNOS */, 19 /* X86_32_WINDOWS */, 19 /* LP64_UNIX */, 19 /* X86_64_WINDOWS */, 19 /* ARM64_IOS */ };
//private static final int[] cAccumRedBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cAccumGreenBits_offset = new int[] { 20 /* ARM_MIPS_32 */, 20 /* X86_32_UNIX */, 20 /* X86_32_ANDROID */, 20 /* X86_32_MACOS */, 20 /* PPC_32_UNIX */, 20 /* SPARC_32_SUNOS */, 20 /* X86_32_WINDOWS */, 20 /* LP64_UNIX */, 20 /* X86_64_WINDOWS */, 20 /* ARM64_IOS */ };
//private static final int[] cAccumGreenBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cAccumBlueBits_offset = new int[] { 21 /* ARM_MIPS_32 */, 21 /* X86_32_UNIX */, 21 /* X86_32_ANDROID */, 21 /* X86_32_MACOS */, 21 /* PPC_32_UNIX */, 21 /* SPARC_32_SUNOS */, 21 /* X86_32_WINDOWS */, 21 /* LP64_UNIX */, 21 /* X86_64_WINDOWS */, 21 /* ARM64_IOS */ };
//private static final int[] cAccumBlueBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cAccumAlphaBits_offset = new int[] { 22 /* ARM_MIPS_32 */, 22 /* X86_32_UNIX */, 22 /* X86_32_ANDROID */, 22 /* X86_32_MACOS */, 22 /* PPC_32_UNIX */, 22 /* SPARC_32_SUNOS */, 22 /* X86_32_WINDOWS */, 22 /* LP64_UNIX */, 22 /* X86_64_WINDOWS */, 22 /* ARM64_IOS */ };
//private static final int[] cAccumAlphaBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cDepthBits_offset = new int[] { 23 /* ARM_MIPS_32 */, 23 /* X86_32_UNIX */, 23 /* X86_32_ANDROID */, 23 /* X86_32_MACOS */, 23 /* PPC_32_UNIX */, 23 /* SPARC_32_SUNOS */, 23 /* X86_32_WINDOWS */, 23 /* LP64_UNIX */, 23 /* X86_64_WINDOWS */, 23 /* ARM64_IOS */ };
//private static final int[] cDepthBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cStencilBits_offset = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_ANDROID */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */, 24 /* ARM64_IOS */ };
//private static final int[] cStencilBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] cAuxBuffers_offset = new int[] { 25 /* ARM_MIPS_32 */, 25 /* X86_32_UNIX */, 25 /* X86_32_ANDROID */, 25 /* X86_32_MACOS */, 25 /* PPC_32_UNIX */, 25 /* SPARC_32_SUNOS */, 25 /* X86_32_WINDOWS */, 25 /* LP64_UNIX */, 25 /* X86_64_WINDOWS */, 25 /* ARM64_IOS */ };
//private static final int[] cAuxBuffers_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] iLayerType_offset = new int[] { 26 /* ARM_MIPS_32 */, 26 /* X86_32_UNIX */, 26 /* X86_32_ANDROID */, 26 /* X86_32_MACOS */, 26 /* PPC_32_UNIX */, 26 /* SPARC_32_SUNOS */, 26 /* X86_32_WINDOWS */, 26 /* LP64_UNIX */, 26 /* X86_64_WINDOWS */, 26 /* ARM64_IOS */ };
//private static final int[] iLayerType_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] bReserved_offset = new int[] { 27 /* ARM_MIPS_32 */, 27 /* X86_32_UNIX */, 27 /* X86_32_ANDROID */, 27 /* X86_32_MACOS */, 27 /* PPC_32_UNIX */, 27 /* SPARC_32_SUNOS */, 27 /* X86_32_WINDOWS */, 27 /* LP64_UNIX */, 27 /* X86_64_WINDOWS */, 27 /* ARM64_IOS */ };
//private static final int[] bReserved_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_ANDROID */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */, 1 /* ARM64_IOS */  };
  private static final int[] dwLayerMask_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_ANDROID */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 28 /* LP64_UNIX */, 28 /* X86_64_WINDOWS */, 28 /* ARM64_IOS */ };
//private static final int[] dwLayerMask_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] dwVisibleMask_offset = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_ANDROID */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */ };
//private static final int[] dwVisibleMask_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] dwDamageMask_offset = new int[] { 36 /* ARM_MIPS_32 */, 36 /* X86_32_UNIX */, 36 /* X86_32_ANDROID */, 36 /* X86_32_MACOS */, 36 /* PPC_32_UNIX */, 36 /* SPARC_32_SUNOS */, 36 /* X86_32_WINDOWS */, 36 /* LP64_UNIX */, 36 /* X86_64_WINDOWS */, 36 /* ARM64_IOS */ };
//private static final int[] dwDamageMask_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return PIXELFORMATDESCRIPTOR_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static PIXELFORMATDESCRIPTOR create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static PIXELFORMATDESCRIPTOR create(java.nio.ByteBuffer buf) {
      return new PIXELFORMATDESCRIPTOR(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static PIXELFORMATDESCRIPTOR derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  PIXELFORMATDESCRIPTOR(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  /**
   * Setter for native field <code>nSize</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'WORD', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setNSize(short src) {
    accessor.setShortAt(nSize_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>nSize</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'WORD', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getNSize() {
    return accessor.getShortAt(nSize_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>nVersion</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'WORD', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setNVersion(short src) {
    accessor.setShortAt(nVersion_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>nVersion</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'WORD', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getNVersion() {
    return accessor.getShortAt(nVersion_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>dwFlags</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setDwFlags(int src) {
    accessor.setIntAt(dwFlags_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>dwFlags</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getDwFlags() {
    return accessor.getIntAt(dwFlags_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>iPixelType</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setIPixelType(byte src) {
    accessor.setByteAt(iPixelType_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>iPixelType</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getIPixelType() {
    return accessor.getByteAt(iPixelType_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cColorBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCColorBits(byte src) {
    accessor.setByteAt(cColorBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cColorBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCColorBits() {
    return accessor.getByteAt(cColorBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cRedBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCRedBits(byte src) {
    accessor.setByteAt(cRedBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cRedBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCRedBits() {
    return accessor.getByteAt(cRedBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cRedShift</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCRedShift(byte src) {
    accessor.setByteAt(cRedShift_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cRedShift</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCRedShift() {
    return accessor.getByteAt(cRedShift_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cGreenBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCGreenBits(byte src) {
    accessor.setByteAt(cGreenBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cGreenBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCGreenBits() {
    return accessor.getByteAt(cGreenBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cGreenShift</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCGreenShift(byte src) {
    accessor.setByteAt(cGreenShift_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cGreenShift</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCGreenShift() {
    return accessor.getByteAt(cGreenShift_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cBlueBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCBlueBits(byte src) {
    accessor.setByteAt(cBlueBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cBlueBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCBlueBits() {
    return accessor.getByteAt(cBlueBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cBlueShift</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCBlueShift(byte src) {
    accessor.setByteAt(cBlueShift_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cBlueShift</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCBlueShift() {
    return accessor.getByteAt(cBlueShift_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cAlphaBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCAlphaBits(byte src) {
    accessor.setByteAt(cAlphaBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cAlphaBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCAlphaBits() {
    return accessor.getByteAt(cAlphaBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cAlphaShift</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCAlphaShift(byte src) {
    accessor.setByteAt(cAlphaShift_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cAlphaShift</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCAlphaShift() {
    return accessor.getByteAt(cAlphaShift_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cAccumBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCAccumBits(byte src) {
    accessor.setByteAt(cAccumBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cAccumBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCAccumBits() {
    return accessor.getByteAt(cAccumBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cAccumRedBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCAccumRedBits(byte src) {
    accessor.setByteAt(cAccumRedBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cAccumRedBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCAccumRedBits() {
    return accessor.getByteAt(cAccumRedBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cAccumGreenBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCAccumGreenBits(byte src) {
    accessor.setByteAt(cAccumGreenBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cAccumGreenBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCAccumGreenBits() {
    return accessor.getByteAt(cAccumGreenBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cAccumBlueBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCAccumBlueBits(byte src) {
    accessor.setByteAt(cAccumBlueBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cAccumBlueBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCAccumBlueBits() {
    return accessor.getByteAt(cAccumBlueBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cAccumAlphaBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCAccumAlphaBits(byte src) {
    accessor.setByteAt(cAccumAlphaBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cAccumAlphaBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCAccumAlphaBits() {
    return accessor.getByteAt(cAccumAlphaBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cDepthBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCDepthBits(byte src) {
    accessor.setByteAt(cDepthBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cDepthBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCDepthBits() {
    return accessor.getByteAt(cDepthBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cStencilBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCStencilBits(byte src) {
    accessor.setByteAt(cStencilBits_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cStencilBits</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCStencilBits() {
    return accessor.getByteAt(cStencilBits_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>cAuxBuffers</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setCAuxBuffers(byte src) {
    accessor.setByteAt(cAuxBuffers_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cAuxBuffers</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getCAuxBuffers() {
    return accessor.getByteAt(cAuxBuffers_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>iLayerType</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setILayerType(byte src) {
    accessor.setByteAt(iLayerType_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>iLayerType</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getILayerType() {
    return accessor.getByteAt(iLayerType_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>bReserved</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setBReserved(byte src) {
    accessor.setByteAt(bReserved_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>bReserved</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'BYTE', size[fixed true, lnx64 1], const[false], is[primitive, int]</code>
   * </p>
   */
  public final byte getBReserved() {
    return accessor.getByteAt(bReserved_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>dwLayerMask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setDwLayerMask(int src) {
    accessor.setIntAt(dwLayerMask_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>dwLayerMask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getDwLayerMask() {
    return accessor.getIntAt(dwLayerMask_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>dwVisibleMask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setDwVisibleMask(int src) {
    accessor.setIntAt(dwVisibleMask_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>dwVisibleMask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getDwVisibleMask() {
    return accessor.getIntAt(dwVisibleMask_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>dwDamageMask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PIXELFORMATDESCRIPTOR setDwDamageMask(int src) {
    accessor.setIntAt(dwDamageMask_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>dwDamageMask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getDwDamageMask() {
    return accessor.getIntAt(dwDamageMask_offset[mdIdx]);
  }

}
