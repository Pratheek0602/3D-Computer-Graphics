/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:06 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.windows, cls BITMAPINFOHEADER], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/windows/BITMAPINFOHEADER.java ----! */


package jogamp.nativewindow.windows;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import com.jogamp.nativewindow.util.Point;
import com.jogamp.nativewindow.NativeWindowException;
import jogamp.nativewindow.NWJNILibLoader;
import jogamp.nativewindow.Debug;

public class BITMAPINFOHEADER {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] BITMAPINFOHEADER_size = new int[] { 40 /* ARM_MIPS_32 */, 40 /* X86_32_UNIX */, 40 /* X86_32_ANDROID */, 40 /* X86_32_MACOS */, 40 /* PPC_32_UNIX */, 40 /* SPARC_32_SUNOS */, 40 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */, 40 /* ARM64_IOS */  };
  private static final int[] biSize_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] biSize_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] biWidth_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */ };
//private static final int[] biWidth_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] biHeight_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */ };
//private static final int[] biHeight_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] biPlanes_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */, 12 /* ARM64_IOS */ };
//private static final int[] biPlanes_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] biBitCount_offset = new int[] { 14 /* ARM_MIPS_32 */, 14 /* X86_32_UNIX */, 14 /* X86_32_ANDROID */, 14 /* X86_32_MACOS */, 14 /* PPC_32_UNIX */, 14 /* SPARC_32_SUNOS */, 14 /* X86_32_WINDOWS */, 14 /* LP64_UNIX */, 14 /* X86_64_WINDOWS */, 14 /* ARM64_IOS */ };
//private static final int[] biBitCount_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] biCompression_offset = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */ };
//private static final int[] biCompression_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] biSizeImage_offset = new int[] { 20 /* ARM_MIPS_32 */, 20 /* X86_32_UNIX */, 20 /* X86_32_ANDROID */, 20 /* X86_32_MACOS */, 20 /* PPC_32_UNIX */, 20 /* SPARC_32_SUNOS */, 20 /* X86_32_WINDOWS */, 20 /* LP64_UNIX */, 20 /* X86_64_WINDOWS */, 20 /* ARM64_IOS */ };
//private static final int[] biSizeImage_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] biXPelsPerMeter_offset = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_ANDROID */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */, 24 /* ARM64_IOS */ };
//private static final int[] biXPelsPerMeter_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] biYPelsPerMeter_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_ANDROID */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 28 /* LP64_UNIX */, 28 /* X86_64_WINDOWS */, 28 /* ARM64_IOS */ };
//private static final int[] biYPelsPerMeter_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] biClrUsed_offset = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_ANDROID */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */ };
//private static final int[] biClrUsed_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] biClrImportant_offset = new int[] { 36 /* ARM_MIPS_32 */, 36 /* X86_32_UNIX */, 36 /* X86_32_ANDROID */, 36 /* X86_32_MACOS */, 36 /* PPC_32_UNIX */, 36 /* SPARC_32_SUNOS */, 36 /* X86_32_WINDOWS */, 36 /* LP64_UNIX */, 36 /* X86_64_WINDOWS */, 36 /* ARM64_IOS */ };
//private static final int[] biClrImportant_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return BITMAPINFOHEADER_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static BITMAPINFOHEADER create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static BITMAPINFOHEADER create(java.nio.ByteBuffer buf) {
      return new BITMAPINFOHEADER(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static BITMAPINFOHEADER derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  BITMAPINFOHEADER(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  /**
   * Setter for native field <code>biSize</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final BITMAPINFOHEADER setBiSize(int src) {
    accessor.setIntAt(biSize_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>biSize</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getBiSize() {
    return accessor.getIntAt(biSize_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>biWidth</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'LONG', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final BITMAPINFOHEADER setBiWidth(int src) {
    accessor.setIntAt(biWidth_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>biWidth</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'LONG', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getBiWidth() {
    return accessor.getIntAt(biWidth_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>biHeight</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'LONG', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final BITMAPINFOHEADER setBiHeight(int src) {
    accessor.setIntAt(biHeight_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>biHeight</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'LONG', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getBiHeight() {
    return accessor.getIntAt(biHeight_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>biPlanes</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'WORD', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final BITMAPINFOHEADER setBiPlanes(short src) {
    accessor.setShortAt(biPlanes_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>biPlanes</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'WORD', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getBiPlanes() {
    return accessor.getShortAt(biPlanes_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>biBitCount</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'WORD', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final BITMAPINFOHEADER setBiBitCount(short src) {
    accessor.setShortAt(biBitCount_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>biBitCount</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'WORD', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getBiBitCount() {
    return accessor.getShortAt(biBitCount_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>biCompression</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final BITMAPINFOHEADER setBiCompression(int src) {
    accessor.setIntAt(biCompression_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>biCompression</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getBiCompression() {
    return accessor.getIntAt(biCompression_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>biSizeImage</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final BITMAPINFOHEADER setBiSizeImage(int src) {
    accessor.setIntAt(biSizeImage_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>biSizeImage</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getBiSizeImage() {
    return accessor.getIntAt(biSizeImage_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>biXPelsPerMeter</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'LONG', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final BITMAPINFOHEADER setBiXPelsPerMeter(int src) {
    accessor.setIntAt(biXPelsPerMeter_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>biXPelsPerMeter</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'LONG', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getBiXPelsPerMeter() {
    return accessor.getIntAt(biXPelsPerMeter_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>biYPelsPerMeter</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'LONG', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final BITMAPINFOHEADER setBiYPelsPerMeter(int src) {
    accessor.setIntAt(biYPelsPerMeter_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>biYPelsPerMeter</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'LONG', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getBiYPelsPerMeter() {
    return accessor.getIntAt(biYPelsPerMeter_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>biClrUsed</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final BITMAPINFOHEADER setBiClrUsed(int src) {
    accessor.setIntAt(biClrUsed_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>biClrUsed</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getBiClrUsed() {
    return accessor.getIntAt(biClrUsed_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>biClrImportant</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final BITMAPINFOHEADER setBiClrImportant(int src) {
    accessor.setIntAt(biClrImportant_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>biClrImportant</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getBiClrImportant() {
    return accessor.getIntAt(biClrImportant_offset[mdIdx]);
  }

}
