/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:06 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.windows, cls BITMAPINFO], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/windows/BITMAPINFO.java ----! */


package jogamp.nativewindow.windows;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import com.jogamp.nativewindow.util.Point;
import com.jogamp.nativewindow.NativeWindowException;
import jogamp.nativewindow.NWJNILibLoader;
import jogamp.nativewindow.Debug;

public class BITMAPINFO {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] BITMAPINFO_size = new int[] { 44 /* ARM_MIPS_32 */, 44 /* X86_32_UNIX */, 44 /* X86_32_ANDROID */, 44 /* X86_32_MACOS */, 44 /* PPC_32_UNIX */, 44 /* SPARC_32_SUNOS */, 44 /* X86_32_WINDOWS */, 44 /* LP64_UNIX */, 44 /* X86_64_WINDOWS */, 44 /* ARM64_IOS */  };
  private static final int[] bmiHeader_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
  private static final int[] bmiHeader_size = new int[] { 40 /* ARM_MIPS_32 */, 40 /* X86_32_UNIX */, 40 /* X86_32_ANDROID */, 40 /* X86_32_MACOS */, 40 /* PPC_32_UNIX */, 40 /* SPARC_32_SUNOS */, 40 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */, 40 /* ARM64_IOS */  };
  private static final int[] bmiColors_offset = new int[] { 40 /* ARM_MIPS_32 */, 40 /* X86_32_UNIX */, 40 /* X86_32_ANDROID */, 40 /* X86_32_MACOS */, 40 /* PPC_32_UNIX */, 40 /* SPARC_32_SUNOS */, 40 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */, 40 /* ARM64_IOS */ };
//private static final int[] bmiColors_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return BITMAPINFO_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static BITMAPINFO create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static BITMAPINFO create(java.nio.ByteBuffer buf) {
      return new BITMAPINFO(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static BITMAPINFO derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  BITMAPINFO(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  /**
   * Getter for native field <code>bmiHeader</code>, being a <i>struct</i> owned StructType.
   * <p>
   * Native Field Signature <code>(StructType) typedef 'BITMAPINFOHEADER', size[fixed false, lnx64 40], const[false], is[struct{tagBITMAPINFOHEADER: 11}]</code>
   * </p>
   */
  public final BITMAPINFOHEADER getBmiHeader() {
    return BITMAPINFOHEADER.create( accessor.slice( bmiHeader_offset[mdIdx], bmiHeader_size[mdIdx] ) );
  }

  /**
   * Getter for native field <code>bmiColors</code>, being a <i>struct</i> owned array with fixed element count of <code>1</code> elements.
   * <p>
   * Maximum element count is <code>1</code>.
   * </p>
   * <p>
   * Native Field Signature <code>(ArrayType) 'RGBQUAD *' -> (RGBQUAD) * , size[fixed false, lnx64 4], const[false], is[array*1]</code>
   * </p>
   * @return element count of the corresponding field-array
   */
  public static int getBmiColorsElemCount() { return 1; }

  /** SKIP setter for immutable native field <code>bmiColors</code>, being a <i>struct</i> owned array with fixed element count of <code>1</code> elements. Maximum element count is <code>1</code>. NativeSig <code>(ArrayType) 'RGBQUAD *' -> (RGBQUAD) * , size[fixed false, lnx64 4], const[false], is[array*1]</code>  */

  /**
   * Getter for native field <code>bmiColors</code>, being a <i>struct</i> owned array with fixed element count of <code>1</code> elements.
   * <p>
   * Maximum element count is <code>1</code>.
   * </p>
   * <p>
   * Native Field Signature <code>(ArrayType) 'RGBQUAD *' -> (RGBQUAD) * , size[fixed false, lnx64 4], const[false], is[array*1]</code>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final RGBQUAD getBmiColors() {
    return RGBQUAD.create(
             ElementBuffer.wrap(RGBQUAD.size(), getBuffer(), bmiColors_offset[mdIdx], 1).getByteBuffer() );
  }

}
