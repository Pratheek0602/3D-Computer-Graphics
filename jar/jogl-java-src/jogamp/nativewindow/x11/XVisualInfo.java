/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:03 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.x11, cls XVisualInfo], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/x11/XVisualInfo.java ----! */


package jogamp.nativewindow.x11;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.nio.*;
import java.util.*;
import com.jogamp.nativewindow.util.Point;
import com.jogamp.common.util.Bitfield;

public class XVisualInfo {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] XVisualInfo_size = new int[] { 40 /* ARM_MIPS_32 */, 40 /* X86_32_UNIX */, 40 /* X86_32_ANDROID */, 40 /* X86_32_MACOS */, 40 /* PPC_32_UNIX */, 40 /* SPARC_32_SUNOS */, 40 /* X86_32_WINDOWS */, 64 /* LP64_UNIX */, 48 /* X86_64_WINDOWS */, 64 /* ARM64_IOS */  };
  private static final int[] visual_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] visual_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] visualid_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */ };
//private static final int[] visualid_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] screen_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */ };
//private static final int[] screen_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] depth_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 20 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 20 /* ARM64_IOS */ };
//private static final int[] depth_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] c_class_offset = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 20 /* X86_64_WINDOWS */, 24 /* ARM64_IOS */ };
//private static final int[] c_class_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] red_mask_offset = new int[] { 20 /* ARM_MIPS_32 */, 20 /* X86_32_UNIX */, 20 /* X86_32_ANDROID */, 20 /* X86_32_MACOS */, 20 /* PPC_32_UNIX */, 20 /* SPARC_32_SUNOS */, 20 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */ };
//private static final int[] red_mask_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] green_mask_offset = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_ANDROID */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 28 /* X86_64_WINDOWS */, 40 /* ARM64_IOS */ };
//private static final int[] green_mask_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] blue_mask_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_ANDROID */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 48 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 48 /* ARM64_IOS */ };
//private static final int[] blue_mask_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] colormap_size_offset = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_ANDROID */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 56 /* LP64_UNIX */, 36 /* X86_64_WINDOWS */, 56 /* ARM64_IOS */ };
//private static final int[] colormap_size_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] bits_per_rgb_offset = new int[] { 36 /* ARM_MIPS_32 */, 36 /* X86_32_UNIX */, 36 /* X86_32_ANDROID */, 36 /* X86_32_MACOS */, 36 /* PPC_32_UNIX */, 36 /* SPARC_32_SUNOS */, 36 /* X86_32_WINDOWS */, 60 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */, 60 /* ARM64_IOS */ };
//private static final int[] bits_per_rgb_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return XVisualInfo_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static XVisualInfo create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static XVisualInfo create(java.nio.ByteBuffer buf) {
      return new XVisualInfo(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static XVisualInfo derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  XVisualInfo(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }


  /**
   * Setter for native field <code>visual</code>, referencing a <i>struct</i> owned array with fixed element count of <code>1</code> elements.
   * <p>
   * Maximum element count is <code>1</code>.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'Visual *' -> (Visual) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(StructType) typedef 'Visual', size[fixed false, lnx64 0], const[false], is[struct{null: 0}]</code></li>
   * </ul>
   * </p>
   */
  public final XVisualInfo setVisual(long src) {
    PointerBuffer.wrap(getBuffer(), visual_offset[mdIdx], 1).put(0, src);
    return this;
  }

  /**
   * Getter for native field <code>visual</code>, referencing a <i>struct</i> owned array with fixed element count of <code>1</code> elements.
   * <p>
   * Maximum element count is <code>1</code>.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'Visual *' -> (Visual) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(StructType) typedef 'Visual', size[fixed false, lnx64 0], const[false], is[struct{null: 0}]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final long getVisual() {
    return PointerBuffer.wrap(getBuffer(), visual_offset[mdIdx], 1).get(0);
  }

  /**
   * Setter for native field <code>visualid</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'VisualID', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final XVisualInfo setVisualid(long src) {
    accessor.setLongAt(visualid_offset[mdIdx], src, md.longSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>visualid</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'VisualID', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final long getVisualid() {
    return accessor.getLongAt(visualid_offset[mdIdx], md.longSizeInBytes());
  }

  /**
   * Setter for native field <code>screen</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final XVisualInfo setScreen(int src) {
    accessor.setIntAt(screen_offset[mdIdx], src, md.intSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>screen</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getScreen() {
    return accessor.getIntAt(screen_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Setter for native field <code>depth</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final XVisualInfo setDepth(int src) {
    accessor.setIntAt(depth_offset[mdIdx], src, md.intSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>depth</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getDepth() {
    return accessor.getIntAt(depth_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Setter for native field <code>c_class</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final XVisualInfo setC_class(int src) {
    accessor.setIntAt(c_class_offset[mdIdx], src, md.intSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>c_class</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getC_class() {
    return accessor.getIntAt(c_class_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Setter for native field <code>red_mask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'long', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final XVisualInfo setRed_mask(long src) {
    accessor.setLongAt(red_mask_offset[mdIdx], src, md.longSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>red_mask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'long', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final long getRed_mask() {
    return accessor.getLongAt(red_mask_offset[mdIdx], md.longSizeInBytes());
  }

  /**
   * Setter for native field <code>green_mask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'long', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final XVisualInfo setGreen_mask(long src) {
    accessor.setLongAt(green_mask_offset[mdIdx], src, md.longSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>green_mask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'long', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final long getGreen_mask() {
    return accessor.getLongAt(green_mask_offset[mdIdx], md.longSizeInBytes());
  }

  /**
   * Setter for native field <code>blue_mask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'long', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final XVisualInfo setBlue_mask(long src) {
    accessor.setLongAt(blue_mask_offset[mdIdx], src, md.longSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>blue_mask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'long', size[fixed false, lnx64 8], const[false], is[primitive, int]</code>
   * </p>
   */
  public final long getBlue_mask() {
    return accessor.getLongAt(blue_mask_offset[mdIdx], md.longSizeInBytes());
  }

  /**
   * Setter for native field <code>colormap_size</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final XVisualInfo setColormap_size(int src) {
    accessor.setIntAt(colormap_size_offset[mdIdx], src, md.intSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>colormap_size</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getColormap_size() {
    return accessor.getIntAt(colormap_size_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Setter for native field <code>bits_per_rgb</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final XVisualInfo setBits_per_rgb(int src) {
    accessor.setIntAt(bits_per_rgb_offset[mdIdx], src, md.intSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>bits_per_rgb</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getBits_per_rgb() {
    return accessor.getIntAt(bits_per_rgb_offset[mdIdx], md.intSizeInBytes());
  }


  // --- Begin CustomJavaCode .cfg declarations
 public static XVisualInfo create(XVisualInfo s) { final ByteBuffer bb = Buffers.newDirectByteBuffer(s.getBuffer().capacity()); final XVisualInfo d = XVisualInfo.create(bb); d.getBuffer().put(s.getBuffer()); d.getBuffer().rewind(); s.getBuffer().rewind(); return d; }
 public String toString() {
     return "XVisualInfo[size "+size()+"/"+getBuffer().capacity()+", visual 0x"+Long.toHexString(getVisual())+
         ", visual-id  0x"+Long.toHexString(getVisualid())+", c-class "+getC_class()+", cmap-size "+getColormap_size()+", depth "+getDepth()+
         ", rgb["+Bitfield.Util.bitCount((int)getRed_mask())+", "+Bitfield.Util.bitCount((int)getRed_mask())+", "+Bitfield.Util.bitCount((int)getRed_mask())+" - "+getBits_per_rgb()+"]]";
 }
  // ---- End CustomJavaCode .cfg declarations
}
