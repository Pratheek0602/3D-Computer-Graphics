/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:03 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.x11, cls XRenderDirectFormat], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/x11/XRenderDirectFormat.java ----! */


package jogamp.nativewindow.x11;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.nio.*;
import java.util.*;
import com.jogamp.nativewindow.util.Point;
import com.jogamp.common.util.Bitfield;

public class XRenderDirectFormat {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] XRenderDirectFormat_size = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */  };
  private static final int[] red_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] red_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] redMask_offset = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */ };
//private static final int[] redMask_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] green_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */ };
//private static final int[] green_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] greenMask_offset = new int[] { 6 /* ARM_MIPS_32 */, 6 /* X86_32_UNIX */, 6 /* X86_32_ANDROID */, 6 /* X86_32_MACOS */, 6 /* PPC_32_UNIX */, 6 /* SPARC_32_SUNOS */, 6 /* X86_32_WINDOWS */, 6 /* LP64_UNIX */, 6 /* X86_64_WINDOWS */, 6 /* ARM64_IOS */ };
//private static final int[] greenMask_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] blue_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */ };
//private static final int[] blue_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] blueMask_offset = new int[] { 10 /* ARM_MIPS_32 */, 10 /* X86_32_UNIX */, 10 /* X86_32_ANDROID */, 10 /* X86_32_MACOS */, 10 /* PPC_32_UNIX */, 10 /* SPARC_32_SUNOS */, 10 /* X86_32_WINDOWS */, 10 /* LP64_UNIX */, 10 /* X86_64_WINDOWS */, 10 /* ARM64_IOS */ };
//private static final int[] blueMask_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] alpha_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */, 12 /* ARM64_IOS */ };
//private static final int[] alpha_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] alphaMask_offset = new int[] { 14 /* ARM_MIPS_32 */, 14 /* X86_32_UNIX */, 14 /* X86_32_ANDROID */, 14 /* X86_32_MACOS */, 14 /* PPC_32_UNIX */, 14 /* SPARC_32_SUNOS */, 14 /* X86_32_WINDOWS */, 14 /* LP64_UNIX */, 14 /* X86_64_WINDOWS */, 14 /* ARM64_IOS */ };
//private static final int[] alphaMask_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return XRenderDirectFormat_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static XRenderDirectFormat create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static XRenderDirectFormat create(java.nio.ByteBuffer buf) {
      return new XRenderDirectFormat(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static XRenderDirectFormat derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  XRenderDirectFormat(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  /**
   * Getter for native field <code>red</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'short', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getRed() {
    return accessor.getShortAt(red_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>redMask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'short', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getRedMask() {
    return accessor.getShortAt(redMask_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>green</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'short', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getGreen() {
    return accessor.getShortAt(green_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>greenMask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'short', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getGreenMask() {
    return accessor.getShortAt(greenMask_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>blue</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'short', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getBlue() {
    return accessor.getShortAt(blue_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>blueMask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'short', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getBlueMask() {
    return accessor.getShortAt(blueMask_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>alpha</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'short', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getAlpha() {
    return accessor.getShortAt(alpha_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>alphaMask</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'short', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getAlphaMask() {
    return accessor.getShortAt(alphaMask_offset[mdIdx]);
  }

}
