/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:03 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.x11, cls XRenderPictFormat], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/x11/XRenderPictFormat.java ----! */


package jogamp.nativewindow.x11;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.nio.*;
import java.util.*;
import com.jogamp.nativewindow.util.Point;
import com.jogamp.common.util.Bitfield;

public class XRenderPictFormat {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] XRenderPictFormat_size = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_ANDROID */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */, 40 /* ARM64_IOS */  };
  private static final int[] id_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] id_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] type_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */ };
//private static final int[] type_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] depth_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */, 12 /* ARM64_IOS */ };
//private static final int[] depth_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] direct_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */ };
  private static final int[] direct_size = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */  };
  private static final int[] colormap_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_ANDROID */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */ };
//private static final int[] colormap_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return XRenderPictFormat_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static XRenderPictFormat create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static XRenderPictFormat create(java.nio.ByteBuffer buf) {
      return new XRenderPictFormat(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static XRenderPictFormat derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  XRenderPictFormat(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }


  /** SKIP setter for immutable native field <code>id</code>, referencing a <i>struct</i> owned array with fixed element count of <code>1</code> elements. Maximum element count is <code>1</code>. NativeSig <code>(PointerType) typedef 'PictFormat' -> (struct null) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code>  */

  /**
   * Getter for native field <code>id</code>, referencing a <i>struct</i> owned array with fixed element count of <code>1</code> elements.
   * <p>
   * Maximum element count is <code>1</code>.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) typedef 'PictFormat' -> (struct null) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(StructType) ANON, size[fixed false, lnx64 0], const[false], is[struct{null: 0}]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final long getId() {
    return PointerBuffer.wrap(getBuffer(), id_offset[mdIdx], 1).get(0);
  }

  /**
   * Getter for native field <code>type</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getType() {
    return accessor.getIntAt(type_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Getter for native field <code>depth</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getDepth() {
    return accessor.getIntAt(depth_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Getter for native field <code>direct</code>, being a <i>struct</i> owned StructType.
   * <p>
   * Native Field Signature <code>(StructType) typedef 'XRenderDirectFormat', size[fixed false, lnx64 16], const[false], is[struct{null: 8}]</code>
   * </p>
   */
  public final XRenderDirectFormat getDirect() {
    return XRenderDirectFormat.create( accessor.slice( direct_offset[mdIdx], direct_size[mdIdx] ) );
  }


  /** SKIP setter for immutable native field <code>colormap</code>, referencing a <i>struct</i> owned array with fixed element count of <code>1</code> elements. Maximum element count is <code>1</code>. NativeSig <code>(PointerType) typedef 'Colormap' -> (struct null) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code>  */

  /**
   * Getter for native field <code>colormap</code>, referencing a <i>struct</i> owned array with fixed element count of <code>1</code> elements.
   * <p>
   * Maximum element count is <code>1</code>.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) typedef 'Colormap' -> (struct null) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(StructType) ANON, size[fixed false, lnx64 0], const[false], is[struct{null: 0}]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final long getColormap() {
    return PointerBuffer.wrap(getBuffer(), colormap_offset[mdIdx], 1).get(0);
  }

}
