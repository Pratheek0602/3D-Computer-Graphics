/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:08 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.jawt, cls JAWT_DrawingSurface], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/jawt/JAWT_DrawingSurface.java ----! */


package jogamp.nativewindow.jawt;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.security.*;
import jogamp.nativewindow.jawt.*;
import com.jogamp.common.os.Platform;
import com.jogamp.common.util.VersionNumber;
import com.jogamp.common.util.SecurityUtil;

public class JAWT_DrawingSurface {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] JAWT_DrawingSurface_size = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_ANDROID */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 48 /* LP64_UNIX */, 48 /* X86_64_WINDOWS */, 48 /* ARM64_IOS */  };
  private static final int[] env_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] env_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };// JType[JNIEnvstruct = JNIEnv, is[], descriptor 'LJNIEnv;']
  private static final int[] Lock_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */ };
//private static final int[] Lock_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] GetDrawingSurfaceInfo_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */, 24 /* ARM64_IOS */ };
//private static final int[] GetDrawingSurfaceInfo_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] FreeDrawingSurfaceInfo_offset = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */ };
//private static final int[] FreeDrawingSurfaceInfo_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] Unlock_offset = new int[] { 20 /* ARM_MIPS_32 */, 20 /* X86_32_UNIX */, 20 /* X86_32_ANDROID */, 20 /* X86_32_MACOS */, 20 /* PPC_32_UNIX */, 20 /* SPARC_32_SUNOS */, 20 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */, 40 /* ARM64_IOS */ };
//private static final int[] Unlock_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return true;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return JAWT_DrawingSurface_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static JAWT_DrawingSurface create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static JAWT_DrawingSurface create(java.nio.ByteBuffer buf) {
      return new JAWT_DrawingSurface(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static JAWT_DrawingSurface derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  JAWT_DrawingSurface(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  private int _envArrayLen = 0; // initial array length
  /**
   * Getter for native field <code>env</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'JNIEnv *' -> (JNIEnv) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'JNIEnv', size[fixed false, lnx64 8], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element count of the corresponding field-array
   */
  public final int getEnvElemCount()  { return _envArrayLen; }
  /**
   * Setter for native field <code>env</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'JNIEnv *' -> (JNIEnv) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'JNIEnv', size[fixed false, lnx64 8], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   */
  private final void setEnvElemCount(int src)  { _envArrayLen = src; }

  /**
   * Returns `true` if native pointer <code>env</code> is `null`, otherwise `false`.
   * <p>
   * Corresponds to native field <code>env</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'JNIEnv *' -> (JNIEnv) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'JNIEnv', size[fixed false, lnx64 8], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   */
  public final boolean isEnvNull() {
    return 0 == PointerBuffer.wrap(getBuffer(), env_offset[mdIdx], 1).get(0);
  }

  /**
   * Releases memory referenced by native field <code>env</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'JNIEnv *' -> (JNIEnv) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'JNIEnv', size[fixed false, lnx64 8], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   */
  public final JAWT_DrawingSurface releaseEnv() {
    accessor.setLongAt(env_offset[mdIdx], 0, md.pointerSizeInBytes()); // write nullptr
    _ebEnv = null;
    setEnvElemCount( 0 );
    return this;
  }
  @SuppressWarnings("unused")
  private ElementBuffer _ebEnv; // cache new memory buffer ensuring same lifecycle

  /**
   * Setter for native field <code>env</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'JNIEnv *' -> (JNIEnv) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'JNIEnv', size[fixed false, lnx64 8], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * <p>
   * Copies the given source elements into the respective field, either writing into the existing memory or creating a new memory and referencing it.
   * </p>
   * @param subset if `true` keeps the underlying memory and only allows to set up to `elemCount` elements. Otherwise may replace the underlying memory if `destPos + length != elemCount`.
   * @param src the source array of elements
   * @param srcPos starting element position within the source array with 'srcPos >= 0` &&  `srcPos + length <= src.length`, otherwise an {@link IndexOutOfBoundsException} is thrown
   * @param destPos starting element position within the destination with 'destPos >= 0`. If `subset == true`, `destPos + length <= elemCount` also must be be `true`. Otherwise an exception is thrown
   * @param length the element count to be copied with 'length >= 0` &&  `srcPos + length <= src.length`, otherwise an {@link IndexOutOfBoundsException} is thrown
   * @return this instance of chaining
   */
  public final JAWT_DrawingSurface setEnv(final boolean subset, long[] src, final int srcPos, final int destPos, final int length) {
    final int elemCount = getEnvElemCount();
    if( subset || destPos + length == elemCount ) {
      final ElementBuffer eb = ElementBuffer.derefPointer(md.longSizeInBytes(), getBuffer(), env_offset[mdIdx], elemCount);
      eb.put(src, srcPos, destPos, length);
    } else {
      final int newElemCount = destPos + length;
      final ElementBuffer eb = ElementBuffer.allocateDirect(md.longSizeInBytes(), newElemCount);
      if( 0 < destPos ) {
        final ElementBuffer pre_eb = ElementBuffer.derefPointer(md.longSizeInBytes(), getBuffer(), env_offset[mdIdx], elemCount);
        eb.put(pre_eb.getByteBuffer(), 0, 0, destPos);
      }
      eb.put(src, srcPos, destPos, length);
      eb.storeDirectAddress(getBuffer(), env_offset[mdIdx]);
      _ebEnv = eb;
      setEnvElemCount( newElemCount );
    }
    return this;
  }

  /**
   * Getter for native field <code>env</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'JNIEnv *' -> (JNIEnv) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'JNIEnv', size[fixed false, lnx64 8], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final LongBuffer getEnv() {
    return ElementBuffer.derefPointer(md.longSizeInBytes(), getBuffer(), env_offset[mdIdx], getEnvElemCount())
             .getByteBuffer().asLongBuffer();
  }

  /**
   * Getter for native field <code>env</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'JNIEnv *' -> (JNIEnv) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'JNIEnv', size[fixed false, lnx64 8], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final long[] getEnv(final int srcPos, long dest[], final int destPos, final int length) {
    final int elemCount = getEnvElemCount();
    ElementBuffer.derefPointer(md.longSizeInBytes(), getBuffer(), env_offset[mdIdx], elemCount).get(srcPos, dest, destPos, length);
    return dest;
  }

  /**
   * Setter for native field <code>Lock</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> jint (*)(JAWT_DrawingSurface *  ds), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final JAWT_DrawingSurface setLock(long src) {
    accessor.setLongAt(Lock_offset[mdIdx], src, md.pointerSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>Lock</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> jint (*)(JAWT_DrawingSurface *  ds), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final long getLock() {
    return accessor.getLongAt(Lock_offset[mdIdx], md.pointerSizeInBytes());
  }

  /** Interface to C language function: <br> <code>jint Lock(JAWT_DrawingSurface *  ds)</code><br>   */
  public final int Lock()  {

        return Lock0(getBuffer());
  }

  /** Entry point to C language function: <code>jint Lock(JAWT_DrawingSurface *  ds)</code><br>   */
  private native int Lock0(ByteBuffer jthis0);

  /**
   * Setter for native field <code>GetDrawingSurfaceInfo</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> JAWT_DrawingSurfaceInfo *  (*)(JAWT_DrawingSurface *  ds), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final JAWT_DrawingSurface setGetDrawingSurfaceInfo(long src) {
    accessor.setLongAt(GetDrawingSurfaceInfo_offset[mdIdx], src, md.pointerSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>GetDrawingSurfaceInfo</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> JAWT_DrawingSurfaceInfo *  (*)(JAWT_DrawingSurface *  ds), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final long getGetDrawingSurfaceInfo() {
    return accessor.getLongAt(GetDrawingSurfaceInfo_offset[mdIdx], md.pointerSizeInBytes());
  }

  /** Interface to C language function: <br> <code>JAWT_DrawingSurfaceInfo *  GetDrawingSurfaceInfo(JAWT_DrawingSurface *  ds)</code><br>   */
  public final JAWT_DrawingSurfaceInfo GetDrawingSurfaceInfo()  {

    final ByteBuffer _res;
    _res = GetDrawingSurfaceInfo0(getBuffer());
    if (_res == null) return null;
    return JAWT_DrawingSurfaceInfo.create(Buffers.nativeOrder(_res));
  }

  /** Entry point to C language function: <code>JAWT_DrawingSurfaceInfo *  GetDrawingSurfaceInfo(JAWT_DrawingSurface *  ds)</code><br>   */
  private native ByteBuffer GetDrawingSurfaceInfo0(ByteBuffer jthis0);

  /**
   * Setter for native field <code>FreeDrawingSurfaceInfo</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> void (*)(JAWT_DrawingSurfaceInfo *  dsi), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final JAWT_DrawingSurface setFreeDrawingSurfaceInfo(long src) {
    accessor.setLongAt(FreeDrawingSurfaceInfo_offset[mdIdx], src, md.pointerSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>FreeDrawingSurfaceInfo</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> void (*)(JAWT_DrawingSurfaceInfo *  dsi), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final long getFreeDrawingSurfaceInfo() {
    return accessor.getLongAt(FreeDrawingSurfaceInfo_offset[mdIdx], md.pointerSizeInBytes());
  }

  /** Interface to C language function: <br> <code>void FreeDrawingSurfaceInfo(JAWT_DrawingSurfaceInfo *  dsi)</code><br>   */
  public final void FreeDrawingSurfaceInfo(JAWT_DrawingSurfaceInfo dsi)  {

    FreeDrawingSurfaceInfo0(getBuffer(), ((dsi == null) ? null : dsi.getBuffer()));
  }

  /** Entry point to C language function: <code>void FreeDrawingSurfaceInfo(JAWT_DrawingSurfaceInfo *  dsi)</code><br>   */
  private native void FreeDrawingSurfaceInfo0(ByteBuffer jthis0, ByteBuffer dsi);

  /**
   * Setter for native field <code>Unlock</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> void (*)(JAWT_DrawingSurface *  ds), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final JAWT_DrawingSurface setUnlock(long src) {
    accessor.setLongAt(Unlock_offset[mdIdx], src, md.pointerSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>Unlock</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> void (*)(JAWT_DrawingSurface *  ds), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final long getUnlock() {
    return accessor.getLongAt(Unlock_offset[mdIdx], md.pointerSizeInBytes());
  }

  /** Interface to C language function: <br> <code>void Unlock(JAWT_DrawingSurface *  ds)</code><br>   */
  public final void Unlock()  {

    Unlock0(getBuffer());
  }

  /** Entry point to C language function: <code>void Unlock(JAWT_DrawingSurface *  ds)</code><br>   */
  private native void Unlock0(ByteBuffer jthis0);

}
