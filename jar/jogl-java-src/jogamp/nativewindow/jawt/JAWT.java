/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:08 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.jawt, cls JAWT], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/jawt/JAWT.java ----! */


package jogamp.nativewindow.jawt;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.security.*;
import jogamp.nativewindow.jawt.*;
import com.jogamp.common.os.Platform;
import com.jogamp.common.util.VersionNumber;
import com.jogamp.common.util.SecurityUtil;

public class JAWT {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] JAWT_size = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_ANDROID */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 48 /* LP64_UNIX */, 48 /* X86_64_WINDOWS */, 48 /* ARM64_IOS */  };
  private static final int[] version_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] version_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] GetDrawingSurface_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */ };
//private static final int[] GetDrawingSurface_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] FreeDrawingSurface_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */ };
//private static final int[] FreeDrawingSurface_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] Lock_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */, 24 /* ARM64_IOS */ };
//private static final int[] Lock_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };
  private static final int[] Unlock_offset = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */ };
//private static final int[] Unlock_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return true;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return JAWT_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static JAWT create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static JAWT create(java.nio.ByteBuffer buf) {
      return new JAWT(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static JAWT derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  JAWT(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  /**
   * Setter for native field <code>version</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'jint', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final JAWT setVersion(int src) {
    accessor.setIntAt(version_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>version</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'jint', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getVersion() {
    return accessor.getIntAt(version_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>GetDrawingSurface</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> JAWT_DrawingSurface *  (*)(JNIEnv *  env, jobject target), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final JAWT setGetDrawingSurface(long src) {
    accessor.setLongAt(GetDrawingSurface_offset[mdIdx], src, md.pointerSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>GetDrawingSurface</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> JAWT_DrawingSurface *  (*)(JNIEnv *  env, jobject target), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final long getGetDrawingSurface() {
    return accessor.getLongAt(GetDrawingSurface_offset[mdIdx], md.pointerSizeInBytes());
  }

  /** Interface to C language function: <br> <code>JAWT_DrawingSurface *  GetDrawingSurface(JNIEnv *  env, jobject target)</code><br>   */
  public final JAWT_DrawingSurface GetDrawingSurface(Object target)  {

    final ByteBuffer _res;
    _res = GetDrawingSurface0(getBuffer(), target);
    if (_res == null) return null;
    return JAWT_DrawingSurface.create(Buffers.nativeOrder(_res));
  }

  /** Entry point to C language function: <code>JAWT_DrawingSurface *  GetDrawingSurface(JNIEnv *  env, jobject target)</code><br>   */
  private native ByteBuffer GetDrawingSurface0(ByteBuffer jthis0, Object target);

  /**
   * Setter for native field <code>FreeDrawingSurface</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> void (*)(JAWT_DrawingSurface *  ds), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final JAWT setFreeDrawingSurface(long src) {
    accessor.setLongAt(FreeDrawingSurface_offset[mdIdx], src, md.pointerSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>FreeDrawingSurface</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> void (*)(JAWT_DrawingSurface *  ds), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final long getFreeDrawingSurface() {
    return accessor.getLongAt(FreeDrawingSurface_offset[mdIdx], md.pointerSizeInBytes());
  }

  /** Interface to C language function: <br> <code>void FreeDrawingSurface(JAWT_DrawingSurface *  ds)</code><br>   */
  public final void FreeDrawingSurface(JAWT_DrawingSurface ds)  {

    FreeDrawingSurface0(getBuffer(), ((ds == null) ? null : ds.getBuffer()));
  }

  /** Entry point to C language function: <code>void FreeDrawingSurface(JAWT_DrawingSurface *  ds)</code><br>   */
  private native void FreeDrawingSurface0(ByteBuffer jthis0, ByteBuffer ds);

  /**
   * Setter for native field <code>Lock</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> void (*)(JNIEnv *  env), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final JAWT setLock(long src) {
    accessor.setLongAt(Lock_offset[mdIdx], src, md.pointerSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>Lock</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> void (*)(JNIEnv *  env), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final long getLock() {
    return accessor.getLongAt(Lock_offset[mdIdx], md.pointerSizeInBytes());
  }

  /** Interface to C language function: <br> <code>void Lock(JNIEnv *  env)</code><br>   */
  public final void Lock()  {

    Lock0(getBuffer());
  }

  /** Entry point to C language function: <code>void Lock(JNIEnv *  env)</code><br>   */
  private native void Lock0(ByteBuffer jthis0);

  /**
   * Setter for native field <code>Unlock</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> void (*)(JNIEnv *  env), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final JAWT setUnlock(long src) {
    accessor.setLongAt(Unlock_offset[mdIdx], src, md.pointerSizeInBytes());
    return this;
  }

  /**
   * Getter for native field <code>Unlock</code>, being a <i>struct</i> owned function pointer.
   * <p>
   * Native Field Signature <code>(PointerType) 'null *' -> void (*)(JNIEnv *  env), size[fixed false, lnx64 8], const[false], is[pointer*1, funcPointer]</code>
   * </p>
   */
  public final long getUnlock() {
    return accessor.getLongAt(Unlock_offset[mdIdx], md.pointerSizeInBytes());
  }

  /** Interface to C language function: <br> <code>void Unlock(JNIEnv *  env)</code><br>   */
  public final void Unlock()  {

    Unlock0(getBuffer());
  }

  /** Entry point to C language function: <code>void Unlock(JNIEnv *  env)</code><br>   */
  private native void Unlock0(ByteBuffer jthis0);


  // --- Begin CustomJavaCode .cfg declarations
  private int jawt_version_cached = 0;
  
  public final int getCachedVersion() {
      return jawt_version_cached;
  }
  
  protected static boolean getJAWT(final JAWT jawt, final int jawt_version_flags) {
      JAWTUtil.initSingleton();
      // Workaround for 4845371.
      // Make sure the first reference to the JNI GetDirectBufferAddress is done
      // from a privileged context so the VM's internal class lookups will succeed.
      return SecurityUtil.doPrivileged(new PrivilegedAction<Boolean>() {
          public Boolean run() {
            jawt.setVersion(jawt_version_flags);
            if (JAWTFactory.JAWT_GetAWT(jawt)) {
              jawt.jawt_version_cached = jawt.getVersion();
              return new Boolean(true);
            }
            jawt.jawt_version_cached = 0;
            return new Boolean(false);
          }
        }).booleanValue();
  }
  // ---- End CustomJavaCode .cfg declarations
}
