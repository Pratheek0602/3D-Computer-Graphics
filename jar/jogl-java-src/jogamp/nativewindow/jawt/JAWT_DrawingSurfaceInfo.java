/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:08 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.jawt, cls JAWT_DrawingSurfaceInfo], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/jawt/JAWT_DrawingSurfaceInfo.java ----! */


package jogamp.nativewindow.jawt;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.security.*;
import jogamp.nativewindow.jawt.*;
import com.jogamp.common.os.Platform;
import com.jogamp.common.util.VersionNumber;
import com.jogamp.common.util.SecurityUtil;

public class JAWT_DrawingSurfaceInfo {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] JAWT_DrawingSurfaceInfo_size = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_ANDROID */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 48 /* LP64_UNIX */, 48 /* X86_64_WINDOWS */, 48 /* ARM64_IOS */  };
  private static final int[] bounds_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */ };
  private static final int[] bounds_size = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */  };
  private static final int[] clipSize_offset = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_ANDROID */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */ };
//private static final int[] clipSize_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return JAWT_DrawingSurfaceInfo_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static JAWT_DrawingSurfaceInfo create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static JAWT_DrawingSurfaceInfo create(java.nio.ByteBuffer buf) {
      return new JAWT_DrawingSurfaceInfo(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static JAWT_DrawingSurfaceInfo derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  JAWT_DrawingSurfaceInfo(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  /**
   * Getter for native field <code>bounds</code>, being a <i>struct</i> owned StructType.
   * <p>
   * Native Field Signature <code>(StructType) typedef 'JAWT_Rectangle', size[fixed false, lnx64 16], const[false], is[struct{jawt_Rectangle: 4}]</code>
   * </p>
   */
  public final JAWT_Rectangle getBounds() {
    return JAWT_Rectangle.create( accessor.slice( bounds_offset[mdIdx], bounds_size[mdIdx] ) );
  }

  /**
   * Getter for native field <code>clipSize</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'jint', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getClipSize() {
    return accessor.getIntAt(clipSize_offset[mdIdx]);
  }


  // --- Begin CustomJavaCode .cfg declarations
  public JAWT_PlatformInfo platformInfo(final JAWT jawt) {
    return newPlatformInfo(jawt, platformInfo0(getBuffer()));
  }
  
  private native ByteBuffer platformInfo0(Buffer jthis0);
  
  private static java.lang.reflect.Method platformInfoFactoryMethod;
  
  private static JAWT_PlatformInfo newPlatformInfo(JAWT jawt, ByteBuffer buf) {
    if (platformInfoFactoryMethod == null) {
      try {
          Class<?> factoryClass;
          if (Platform.OS_TYPE == Platform.OSType.WINDOWS) {
            factoryClass = Class.forName("jogamp.nativewindow.jawt.windows.JAWT_Win32DrawingSurfaceInfo");
          } else if (Platform.OS_TYPE == Platform.OSType.MACOS) {
            if( 0 != ( jawt.getCachedVersion() & JAWTUtil.JAWT_MACOSX_USE_CALAYER ) ) {
                factoryClass = Class.forName("jogamp.nativewindow.jawt.macosx.JAWT_SurfaceLayers");
            } else {
                factoryClass = Class.forName("jogamp.nativewindow.jawt.macosx.JAWT_MacOSXDrawingSurfaceInfo");
            }
          } else {
            // Assume Linux, Solaris, etc. Should probably test for these explicitly.
            factoryClass = Class.forName("jogamp.nativewindow.jawt.x11.JAWT_X11DrawingSurfaceInfo");
          }
          platformInfoFactoryMethod = factoryClass.getMethod("create",
                                                             new Class[] { ByteBuffer.class });
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }
    try {
      return (JAWT_PlatformInfo)
        platformInfoFactoryMethod.invoke(null, new Object[] { buf });
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
  // ---- End CustomJavaCode .cfg declarations
}
