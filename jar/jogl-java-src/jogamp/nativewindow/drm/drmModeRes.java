/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:02 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.drm, cls drmModeRes], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/drm/drmModeRes.java ----! */


package jogamp.nativewindow.drm;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.nio.*;
import java.util.*;

public class drmModeRes {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] drmModeRes_size = new int[] { 48 /* ARM_MIPS_32 */, 48 /* X86_32_UNIX */, 48 /* X86_32_ANDROID */, 48 /* X86_32_MACOS */, 48 /* PPC_32_UNIX */, 48 /* SPARC_32_SUNOS */, 48 /* X86_32_WINDOWS */, 80 /* LP64_UNIX */, 80 /* X86_64_WINDOWS */, 80 /* ARM64_IOS */  };
  private static final int[] count_fbs_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] count_fbs_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] fbs_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */ };
//private static final int[] fbs_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */ };
//private static final int[] fbs_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };// JType[nullprimitivePointerType = INT32, is[C-Primitive-Pointer], descriptor 'ANON_NIO']
  private static final int[] count_crtcs_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */ };
//private static final int[] count_crtcs_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] crtcs_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */, 24 /* ARM64_IOS */ };
//private static final int[] crtcs_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */, 24 /* ARM64_IOS */ };
//private static final int[] crtcs_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };// JType[nullprimitivePointerType = INT32, is[C-Primitive-Pointer], descriptor 'ANON_NIO']
  private static final int[] count_connectors_offset = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */ };
//private static final int[] count_connectors_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] connectors_offset = new int[] { 20 /* ARM_MIPS_32 */, 20 /* X86_32_UNIX */, 20 /* X86_32_ANDROID */, 20 /* X86_32_MACOS */, 20 /* PPC_32_UNIX */, 20 /* SPARC_32_SUNOS */, 20 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */, 40 /* ARM64_IOS */ };
//private static final int[] connectors_offset = new int[] { 20 /* ARM_MIPS_32 */, 20 /* X86_32_UNIX */, 20 /* X86_32_ANDROID */, 20 /* X86_32_MACOS */, 20 /* PPC_32_UNIX */, 20 /* SPARC_32_SUNOS */, 20 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */, 40 /* ARM64_IOS */ };
//private static final int[] connectors_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };// JType[nullprimitivePointerType = INT32, is[C-Primitive-Pointer], descriptor 'ANON_NIO']
  private static final int[] count_encoders_offset = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_ANDROID */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 48 /* LP64_UNIX */, 48 /* X86_64_WINDOWS */, 48 /* ARM64_IOS */ };
//private static final int[] count_encoders_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] encoders_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_ANDROID */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 56 /* LP64_UNIX */, 56 /* X86_64_WINDOWS */, 56 /* ARM64_IOS */ };
//private static final int[] encoders_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_ANDROID */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 56 /* LP64_UNIX */, 56 /* X86_64_WINDOWS */, 56 /* ARM64_IOS */ };
//private static final int[] encoders_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };// JType[nullprimitivePointerType = INT32, is[C-Primitive-Pointer], descriptor 'ANON_NIO']
  private static final int[] min_width_offset = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_ANDROID */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 64 /* LP64_UNIX */, 64 /* X86_64_WINDOWS */, 64 /* ARM64_IOS */ };
//private static final int[] min_width_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] max_width_offset = new int[] { 36 /* ARM_MIPS_32 */, 36 /* X86_32_UNIX */, 36 /* X86_32_ANDROID */, 36 /* X86_32_MACOS */, 36 /* PPC_32_UNIX */, 36 /* SPARC_32_SUNOS */, 36 /* X86_32_WINDOWS */, 68 /* LP64_UNIX */, 68 /* X86_64_WINDOWS */, 68 /* ARM64_IOS */ };
//private static final int[] max_width_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] min_height_offset = new int[] { 40 /* ARM_MIPS_32 */, 40 /* X86_32_UNIX */, 40 /* X86_32_ANDROID */, 40 /* X86_32_MACOS */, 40 /* PPC_32_UNIX */, 40 /* SPARC_32_SUNOS */, 40 /* X86_32_WINDOWS */, 72 /* LP64_UNIX */, 72 /* X86_64_WINDOWS */, 72 /* ARM64_IOS */ };
//private static final int[] min_height_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] max_height_offset = new int[] { 44 /* ARM_MIPS_32 */, 44 /* X86_32_UNIX */, 44 /* X86_32_ANDROID */, 44 /* X86_32_MACOS */, 44 /* PPC_32_UNIX */, 44 /* SPARC_32_SUNOS */, 44 /* X86_32_WINDOWS */, 76 /* LP64_UNIX */, 76 /* X86_64_WINDOWS */, 76 /* ARM64_IOS */ };
//private static final int[] max_height_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return drmModeRes_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static drmModeRes create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static drmModeRes create(java.nio.ByteBuffer buf) {
      return new drmModeRes(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static drmModeRes derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  drmModeRes(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  /**
   * Getter for native field <code>count_fbs</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getCount_fbs() {
    return accessor.getIntAt(count_fbs_offset[mdIdx], md.intSizeInBytes());
  }

  private int _fbsArrayLen = 0; // initial array length
  /**
   * Getter for native field <code>fbs</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element count of the corresponding field-array
   */
  public final int getFbsElemCount()  { return _fbsArrayLen; }

  /**
   * Returns `true` if native pointer <code>fbs</code> is `null`, otherwise `false`.
   * <p>
   * Corresponds to native field <code>fbs</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   */
  public final boolean isFbsNull() {
    return 0 == PointerBuffer.wrap(getBuffer(), fbs_offset[mdIdx], 1).get(0);
  }

  /** SKIP setter for immutable native field <code>fbs</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements. NativeSig <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code>  */

  /**
   * Getter for native field <code>fbs</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final IntBuffer getFbs() {
    return ElementBuffer.derefPointer(4, getBuffer(), fbs_offset[mdIdx], getFbsElemCount())
             .getByteBuffer().asIntBuffer();
  }

  /**
   * Getter for native field <code>fbs</code>, referencing a <i>Java</i> owned array with variable element count of <code>0</code> initial elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final int[] getFbs(final int srcPos, int dest[], final int destPos, final int length) {
    final int elemCount = getFbsElemCount();
    ElementBuffer.derefPointer(4, getBuffer(), fbs_offset[mdIdx], elemCount).get(srcPos, dest, destPos, length);
    return dest;
  }

  /**
   * Getter for native field <code>count_crtcs</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getCount_crtcs() {
    return accessor.getIntAt(count_crtcs_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Returns `true` if native pointer <code>crtcs</code> is `null`, otherwise `false`.
   * <p>
   * Corresponds to native field <code>crtcs</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_crtcs()} elements.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   */
  public final boolean isCrtcsNull() {
    return 0 == PointerBuffer.wrap(getBuffer(), crtcs_offset[mdIdx], 1).get(0);
  }

  /** SKIP setter for immutable native field <code>crtcs</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_crtcs()} elements. NativeSig <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code>  */

  /**
   * Getter for native field <code>crtcs</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_crtcs()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final IntBuffer getCrtcs() {
    return ElementBuffer.derefPointer(4, getBuffer(), crtcs_offset[mdIdx], getCount_crtcs())
             .getByteBuffer().asIntBuffer();
  }

  /**
   * Getter for native field <code>crtcs</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_crtcs()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final int[] getCrtcs(final int srcPos, int dest[], final int destPos, final int length) {
    final int elemCount = getCount_crtcs();
    ElementBuffer.derefPointer(4, getBuffer(), crtcs_offset[mdIdx], elemCount).get(srcPos, dest, destPos, length);
    return dest;
  }

  /**
   * Getter for native field <code>count_connectors</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getCount_connectors() {
    return accessor.getIntAt(count_connectors_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Returns `true` if native pointer <code>connectors</code> is `null`, otherwise `false`.
   * <p>
   * Corresponds to native field <code>connectors</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_connectors()} elements.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   */
  public final boolean isConnectorsNull() {
    return 0 == PointerBuffer.wrap(getBuffer(), connectors_offset[mdIdx], 1).get(0);
  }

  /** SKIP setter for immutable native field <code>connectors</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_connectors()} elements. NativeSig <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code>  */

  /**
   * Getter for native field <code>connectors</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_connectors()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final IntBuffer getConnectors() {
    return ElementBuffer.derefPointer(4, getBuffer(), connectors_offset[mdIdx], getCount_connectors())
             .getByteBuffer().asIntBuffer();
  }

  /**
   * Getter for native field <code>connectors</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_connectors()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final int[] getConnectors(final int srcPos, int dest[], final int destPos, final int length) {
    final int elemCount = getCount_connectors();
    ElementBuffer.derefPointer(4, getBuffer(), connectors_offset[mdIdx], elemCount).get(srcPos, dest, destPos, length);
    return dest;
  }

  /**
   * Getter for native field <code>count_encoders</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getCount_encoders() {
    return accessor.getIntAt(count_encoders_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Returns `true` if native pointer <code>encoders</code> is `null`, otherwise `false`.
   * <p>
   * Corresponds to native field <code>encoders</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_encoders()} elements.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   */
  public final boolean isEncodersNull() {
    return 0 == PointerBuffer.wrap(getBuffer(), encoders_offset[mdIdx], 1).get(0);
  }

  /** SKIP setter for immutable native field <code>encoders</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_encoders()} elements. NativeSig <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code>  */

  /**
   * Getter for native field <code>encoders</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_encoders()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final IntBuffer getEncoders() {
    return ElementBuffer.derefPointer(4, getBuffer(), encoders_offset[mdIdx], getCount_encoders())
             .getByteBuffer().asIntBuffer();
  }

  /**
   * Getter for native field <code>encoders</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_encoders()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final int[] getEncoders(final int srcPos, int dest[], final int destPos, final int length) {
    final int elemCount = getCount_encoders();
    ElementBuffer.derefPointer(4, getBuffer(), encoders_offset[mdIdx], elemCount).get(srcPos, dest, destPos, length);
    return dest;
  }

  /**
   * Getter for native field <code>min_width</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getMin_width() {
    return accessor.getIntAt(min_width_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>max_width</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getMax_width() {
    return accessor.getIntAt(max_width_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>min_height</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getMin_height() {
    return accessor.getIntAt(min_height_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>max_height</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getMax_height() {
    return accessor.getIntAt(max_height_offset[mdIdx]);
  }

}
