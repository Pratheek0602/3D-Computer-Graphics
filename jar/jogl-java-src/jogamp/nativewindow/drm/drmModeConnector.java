/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:02 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.drm, cls drmModeConnector], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/drm/drmModeConnector.java ----! */


package jogamp.nativewindow.drm;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.nio.*;
import java.util.*;

public class drmModeConnector {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] drmModeConnector_size = new int[] { 60 /* ARM_MIPS_32 */, 60 /* X86_32_UNIX */, 60 /* X86_32_ANDROID */, 60 /* X86_32_MACOS */, 60 /* PPC_32_UNIX */, 60 /* SPARC_32_SUNOS */, 60 /* X86_32_WINDOWS */, 88 /* LP64_UNIX */, 88 /* X86_64_WINDOWS */, 88 /* ARM64_IOS */  };
  private static final int[] connector_id_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] connector_id_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] encoder_id_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */ };
//private static final int[] encoder_id_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] connector_type_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */ };
//private static final int[] connector_type_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] connector_type_id_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */, 12 /* ARM64_IOS */ };
//private static final int[] connector_type_id_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] connection_offset = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */ };
//private static final int[] connection_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] mmWidth_offset = new int[] { 20 /* ARM_MIPS_32 */, 20 /* X86_32_UNIX */, 20 /* X86_32_ANDROID */, 20 /* X86_32_MACOS */, 20 /* PPC_32_UNIX */, 20 /* SPARC_32_SUNOS */, 20 /* X86_32_WINDOWS */, 20 /* LP64_UNIX */, 20 /* X86_64_WINDOWS */, 20 /* ARM64_IOS */ };
//private static final int[] mmWidth_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] mmHeight_offset = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_ANDROID */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */, 24 /* ARM64_IOS */ };
//private static final int[] mmHeight_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] subpixel_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_ANDROID */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 28 /* LP64_UNIX */, 28 /* X86_64_WINDOWS */, 28 /* ARM64_IOS */ };
//private static final int[] subpixel_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] count_modes_offset = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_ANDROID */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */ };
//private static final int[] count_modes_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] modes_offset = new int[] { 36 /* ARM_MIPS_32 */, 36 /* X86_32_UNIX */, 36 /* X86_32_ANDROID */, 36 /* X86_32_MACOS */, 36 /* PPC_32_UNIX */, 36 /* SPARC_32_SUNOS */, 36 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */, 40 /* ARM64_IOS */ };
//private static final int[] modes_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };// JType[drmModeModeInfostruct = drmModeModeInfo, is[compound], descriptor 'LdrmModeModeInfo;']
  private static final int[] count_props_offset = new int[] { 40 /* ARM_MIPS_32 */, 40 /* X86_32_UNIX */, 40 /* X86_32_ANDROID */, 40 /* X86_32_MACOS */, 40 /* PPC_32_UNIX */, 40 /* SPARC_32_SUNOS */, 40 /* X86_32_WINDOWS */, 48 /* LP64_UNIX */, 48 /* X86_64_WINDOWS */, 48 /* ARM64_IOS */ };
//private static final int[] count_props_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] props_offset = new int[] { 44 /* ARM_MIPS_32 */, 44 /* X86_32_UNIX */, 44 /* X86_32_ANDROID */, 44 /* X86_32_MACOS */, 44 /* PPC_32_UNIX */, 44 /* SPARC_32_SUNOS */, 44 /* X86_32_WINDOWS */, 56 /* LP64_UNIX */, 56 /* X86_64_WINDOWS */, 56 /* ARM64_IOS */ };
//private static final int[] props_offset = new int[] { 44 /* ARM_MIPS_32 */, 44 /* X86_32_UNIX */, 44 /* X86_32_ANDROID */, 44 /* X86_32_MACOS */, 44 /* PPC_32_UNIX */, 44 /* SPARC_32_SUNOS */, 44 /* X86_32_WINDOWS */, 56 /* LP64_UNIX */, 56 /* X86_64_WINDOWS */, 56 /* ARM64_IOS */ };
//private static final int[] props_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };// JType[nullprimitivePointerType = INT32, is[C-Primitive-Pointer], descriptor 'ANON_NIO']
  private static final int[] prop_values_offset = new int[] { 48 /* ARM_MIPS_32 */, 48 /* X86_32_UNIX */, 48 /* X86_32_ANDROID */, 48 /* X86_32_MACOS */, 48 /* PPC_32_UNIX */, 48 /* SPARC_32_SUNOS */, 48 /* X86_32_WINDOWS */, 64 /* LP64_UNIX */, 64 /* X86_64_WINDOWS */, 64 /* ARM64_IOS */ };
//private static final int[] prop_values_offset = new int[] { 48 /* ARM_MIPS_32 */, 48 /* X86_32_UNIX */, 48 /* X86_32_ANDROID */, 48 /* X86_32_MACOS */, 48 /* PPC_32_UNIX */, 48 /* SPARC_32_SUNOS */, 48 /* X86_32_WINDOWS */, 64 /* LP64_UNIX */, 64 /* X86_64_WINDOWS */, 64 /* ARM64_IOS */ };
//private static final int[] prop_values_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };// JType[nullprimitivePointerType = INT64, is[C-Primitive-Pointer], descriptor 'ANON_NIO']
  private static final int[] count_encoders_offset = new int[] { 52 /* ARM_MIPS_32 */, 52 /* X86_32_UNIX */, 52 /* X86_32_ANDROID */, 52 /* X86_32_MACOS */, 52 /* PPC_32_UNIX */, 52 /* SPARC_32_SUNOS */, 52 /* X86_32_WINDOWS */, 72 /* LP64_UNIX */, 72 /* X86_64_WINDOWS */, 72 /* ARM64_IOS */ };
//private static final int[] count_encoders_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] encoders_offset = new int[] { 56 /* ARM_MIPS_32 */, 56 /* X86_32_UNIX */, 56 /* X86_32_ANDROID */, 56 /* X86_32_MACOS */, 56 /* PPC_32_UNIX */, 56 /* SPARC_32_SUNOS */, 56 /* X86_32_WINDOWS */, 80 /* LP64_UNIX */, 80 /* X86_64_WINDOWS */, 80 /* ARM64_IOS */ };
//private static final int[] encoders_offset = new int[] { 56 /* ARM_MIPS_32 */, 56 /* X86_32_UNIX */, 56 /* X86_32_ANDROID */, 56 /* X86_32_MACOS */, 56 /* PPC_32_UNIX */, 56 /* SPARC_32_SUNOS */, 56 /* X86_32_WINDOWS */, 80 /* LP64_UNIX */, 80 /* X86_64_WINDOWS */, 80 /* ARM64_IOS */ };
//private static final int[] encoders_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */  };// JType[nullprimitivePointerType = INT32, is[C-Primitive-Pointer], descriptor 'ANON_NIO']

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return drmModeConnector_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static drmModeConnector create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static drmModeConnector create(java.nio.ByteBuffer buf) {
      return new drmModeConnector(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static drmModeConnector derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  drmModeConnector(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  /**
   * Getter for native field <code>connector_id</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getConnector_id() {
    return accessor.getIntAt(connector_id_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>encoder_id</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getEncoder_id() {
    return accessor.getIntAt(encoder_id_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>connector_type</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getConnector_type() {
    return accessor.getIntAt(connector_type_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>connector_type_id</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getConnector_type_id() {
    return accessor.getIntAt(connector_type_id_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>connection</code>, being a <i>struct</i> owned EnumType.
   * <p>
   * Native Field Signature <code>(EnumType) typedef 'drmModeConnection', size[fixed true, lnx64 4], const[typedef, false], is[primitive, enum  [const <anonymous>] {3: [DRM_MODE_CONNECTED = [1, [int: 1]], [DRM_MODE_DISCONNECTED = [2, [int: 2]], [DRM_MODE_UNKNOWNCONNECTION = [3, [int: 3]], }, int]</code>
   * </p>
   */
  public final int getConnection() {
    return accessor.getIntAt(connection_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>mmWidth</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getMmWidth() {
    return accessor.getIntAt(mmWidth_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>mmHeight</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getMmHeight() {
    return accessor.getIntAt(mmHeight_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>subpixel</code>, being a <i>struct</i> owned EnumType.
   * <p>
   * Native Field Signature <code>(EnumType) typedef 'drmModeSubPixel', size[fixed true, lnx64 4], const[typedef, false], is[primitive, enum  [const <anonymous>] {6: [DRM_MODE_SUBPIXEL_UNKNOWN = [1, [int: 1]], [DRM_MODE_SUBPIXEL_HORIZONTAL_RGB = [2, [int: 2]], [DRM_MODE_SUBPIXEL_HORIZONTAL_BGR = [3, [int: 3]], [DRM_MODE_SUBPIXEL_VERTICAL_RGB = [4, [int: 4]], [DRM_MODE_SUBPIXEL_VERTICAL_BGR = [5, [int: 5]], [DRM_MODE_SUBPIXEL_NONE = [6, [int: 6]], }, int]</code>
   * </p>
   */
  public final int getSubpixel() {
    return accessor.getIntAt(subpixel_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>count_modes</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getCount_modes() {
    return accessor.getIntAt(count_modes_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Returns `true` if native pointer <code>modes</code> is `null`, otherwise `false`.
   * <p>
   * Corresponds to native field <code>modes</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_modes()} elements.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) typedef 'drmModeModeInfoPtr' -> (drmModeModeInfo) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(StructType) typedef 'drmModeModeInfo', size[fixed false, lnx64 68], const[false], is[struct{_drmModeModeInfo: 15}]</code></li>
   * </ul>
   * </p>
   */
  public final boolean isModesNull() {
    return 0 == PointerBuffer.wrap(getBuffer(), modes_offset[mdIdx], 1).get(0);
  }

  /** SKIP setter for immutable native field <code>modes</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_modes()} elements. NativeSig <code>(PointerType) typedef 'drmModeModeInfoPtr' -> (drmModeModeInfo) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code>  */

  /**
   * Getter for native field <code>modes</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_modes()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) typedef 'drmModeModeInfoPtr' -> (drmModeModeInfo) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(StructType) typedef 'drmModeModeInfo', size[fixed false, lnx64 68], const[false], is[struct{_drmModeModeInfo: 15}]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final drmModeModeInfo[] getModes(final int srcPos, drmModeModeInfo dest[], final int destPos, final int length) {
    if( 0 > srcPos || 0 > destPos || 0 > length || destPos + length > dest.length ) { throw new IndexOutOfBoundsException("dest[pos "+destPos+", length "+dest.length+"], srcPos "+srcPos+", length "+length); }
    final int elemCount = getCount_modes();
    if( srcPos + length > elemCount ) { throw new IndexOutOfBoundsException("srcPos "+srcPos+" + length "+length+" > elemCount "+elemCount); };
    final ElementBuffer eb = ElementBuffer.derefPointer(drmModeModeInfo.size(), getBuffer(), modes_offset[mdIdx], elemCount);
    for(int i=0; i<length; ++i) {
      dest[destPos+i] = drmModeModeInfo.create( eb.slice(srcPos+i, 1) );
    }
    return dest;
  }

  /**
   * Getter for native field <code>count_props</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getCount_props() {
    return accessor.getIntAt(count_props_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Returns `true` if native pointer <code>props</code> is `null`, otherwise `false`.
   * <p>
   * Corresponds to native field <code>props</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_props()} elements.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   */
  public final boolean isPropsNull() {
    return 0 == PointerBuffer.wrap(getBuffer(), props_offset[mdIdx], 1).get(0);
  }

  /** SKIP setter for immutable native field <code>props</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_props()} elements. NativeSig <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code>  */

  /**
   * Getter for native field <code>props</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_props()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final IntBuffer getProps() {
    return ElementBuffer.derefPointer(4, getBuffer(), props_offset[mdIdx], getCount_props())
             .getByteBuffer().asIntBuffer();
  }

  /**
   * Getter for native field <code>props</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_props()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final int[] getProps(final int srcPos, int dest[], final int destPos, final int length) {
    final int elemCount = getCount_props();
    ElementBuffer.derefPointer(4, getBuffer(), props_offset[mdIdx], elemCount).get(srcPos, dest, destPos, length);
    return dest;
  }

  /**
   * Returns `true` if native pointer <code>prop_values</code> is `null`, otherwise `false`.
   * <p>
   * Corresponds to native field <code>prop_values</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_props()} elements.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint64_t *' -> (uint64_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint64_t', size[fixed true, lnx64 8], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   */
  public final boolean isProp_valuesNull() {
    return 0 == PointerBuffer.wrap(getBuffer(), prop_values_offset[mdIdx], 1).get(0);
  }

  /** SKIP setter for immutable native field <code>prop_values</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_props()} elements. NativeSig <code>(PointerType) 'uint64_t *' -> (uint64_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code>  */

  /**
   * Getter for native field <code>prop_values</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_props()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint64_t *' -> (uint64_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint64_t', size[fixed true, lnx64 8], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final LongBuffer getProp_values() {
    return ElementBuffer.derefPointer(8, getBuffer(), prop_values_offset[mdIdx], getCount_props())
             .getByteBuffer().asLongBuffer();
  }

  /**
   * Getter for native field <code>prop_values</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_props()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint64_t *' -> (uint64_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint64_t', size[fixed true, lnx64 8], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final long[] getProp_values(final int srcPos, long dest[], final int destPos, final int length) {
    final int elemCount = getCount_props();
    ElementBuffer.derefPointer(8, getBuffer(), prop_values_offset[mdIdx], elemCount).get(srcPos, dest, destPos, length);
    return dest;
  }

  /**
   * Getter for native field <code>count_encoders</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) 'int', size[fixed false, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getCount_encoders() {
    return accessor.getIntAt(count_encoders_offset[mdIdx], md.intSizeInBytes());
  }

  /**
   * Returns `true` if native pointer <code>encoders</code> is `null`, otherwise `false`.
   * <p>
   * Corresponds to native field <code>encoders</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_encoders()} elements.
   * </p>
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   */
  public final boolean isEncodersNull() {
    return 0 == PointerBuffer.wrap(getBuffer(), encoders_offset[mdIdx], 1).get(0);
  }

  /** SKIP setter for immutable native field <code>encoders</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_encoders()} elements. NativeSig <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code>  */

  /**
   * Getter for native field <code>encoders</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_encoders()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final IntBuffer getEncoders() {
    return ElementBuffer.derefPointer(4, getBuffer(), encoders_offset[mdIdx], getCount_encoders())
             .getByteBuffer().asIntBuffer();
  }

  /**
   * Getter for native field <code>encoders</code>, referencing a <i>mixed and ambigously</i> owned (<b>warning</b>) array with variable element count of {@link #getCount_encoders()} elements.
   * <p>
   * Native Signature:
   * <ul>
   *   <li>field-type <code>(PointerType) 'uint32_t *' -> (uint32_t) * , size[fixed false, lnx64 8], const[false], is[pointer*1]</code></li>
   *   <li>referenced <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code></li>
   * </ul>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final int[] getEncoders(final int srcPos, int dest[], final int destPos, final int length) {
    final int elemCount = getCount_encoders();
    ElementBuffer.derefPointer(4, getBuffer(), encoders_offset[mdIdx], elemCount).get(srcPos, dest, destPos, length);
    return dest;
  }

}
