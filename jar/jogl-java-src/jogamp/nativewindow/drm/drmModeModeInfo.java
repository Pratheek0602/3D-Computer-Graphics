/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 18 14:57:02 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.nativewindow.drm, cls drmModeModeInfo], ../build/nativewindow/gensrc/classes/jogamp/nativewindow/drm/drmModeModeInfo.java ----! */


package jogamp.nativewindow.drm;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.nio.*;
import java.util.*;

public class drmModeModeInfo {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] drmModeModeInfo_size = new int[] { 68 /* ARM_MIPS_32 */, 68 /* X86_32_UNIX */, 68 /* X86_32_ANDROID */, 68 /* X86_32_MACOS */, 68 /* PPC_32_UNIX */, 68 /* SPARC_32_SUNOS */, 68 /* X86_32_WINDOWS */, 68 /* LP64_UNIX */, 68 /* X86_64_WINDOWS */, 68 /* ARM64_IOS */  };
  private static final int[] clock_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] clock_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] hdisplay_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */ };
//private static final int[] hdisplay_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] hsync_start_offset = new int[] { 6 /* ARM_MIPS_32 */, 6 /* X86_32_UNIX */, 6 /* X86_32_ANDROID */, 6 /* X86_32_MACOS */, 6 /* PPC_32_UNIX */, 6 /* SPARC_32_SUNOS */, 6 /* X86_32_WINDOWS */, 6 /* LP64_UNIX */, 6 /* X86_64_WINDOWS */, 6 /* ARM64_IOS */ };
//private static final int[] hsync_start_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] hsync_end_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_ANDROID */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */, 8 /* ARM64_IOS */ };
//private static final int[] hsync_end_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] htotal_offset = new int[] { 10 /* ARM_MIPS_32 */, 10 /* X86_32_UNIX */, 10 /* X86_32_ANDROID */, 10 /* X86_32_MACOS */, 10 /* PPC_32_UNIX */, 10 /* SPARC_32_SUNOS */, 10 /* X86_32_WINDOWS */, 10 /* LP64_UNIX */, 10 /* X86_64_WINDOWS */, 10 /* ARM64_IOS */ };
//private static final int[] htotal_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] hskew_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_ANDROID */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */, 12 /* ARM64_IOS */ };
//private static final int[] hskew_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] vdisplay_offset = new int[] { 14 /* ARM_MIPS_32 */, 14 /* X86_32_UNIX */, 14 /* X86_32_ANDROID */, 14 /* X86_32_MACOS */, 14 /* PPC_32_UNIX */, 14 /* SPARC_32_SUNOS */, 14 /* X86_32_WINDOWS */, 14 /* LP64_UNIX */, 14 /* X86_64_WINDOWS */, 14 /* ARM64_IOS */ };
//private static final int[] vdisplay_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] vsync_start_offset = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */ };
//private static final int[] vsync_start_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] vsync_end_offset = new int[] { 18 /* ARM_MIPS_32 */, 18 /* X86_32_UNIX */, 18 /* X86_32_ANDROID */, 18 /* X86_32_MACOS */, 18 /* PPC_32_UNIX */, 18 /* SPARC_32_SUNOS */, 18 /* X86_32_WINDOWS */, 18 /* LP64_UNIX */, 18 /* X86_64_WINDOWS */, 18 /* ARM64_IOS */ };
//private static final int[] vsync_end_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] vtotal_offset = new int[] { 20 /* ARM_MIPS_32 */, 20 /* X86_32_UNIX */, 20 /* X86_32_ANDROID */, 20 /* X86_32_MACOS */, 20 /* PPC_32_UNIX */, 20 /* SPARC_32_SUNOS */, 20 /* X86_32_WINDOWS */, 20 /* LP64_UNIX */, 20 /* X86_64_WINDOWS */, 20 /* ARM64_IOS */ };
//private static final int[] vtotal_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] vscan_offset = new int[] { 22 /* ARM_MIPS_32 */, 22 /* X86_32_UNIX */, 22 /* X86_32_ANDROID */, 22 /* X86_32_MACOS */, 22 /* PPC_32_UNIX */, 22 /* SPARC_32_SUNOS */, 22 /* X86_32_WINDOWS */, 22 /* LP64_UNIX */, 22 /* X86_64_WINDOWS */, 22 /* ARM64_IOS */ };
//private static final int[] vscan_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_ANDROID */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */, 2 /* ARM64_IOS */  };
  private static final int[] vrefresh_offset = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_ANDROID */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */, 24 /* ARM64_IOS */ };
//private static final int[] vrefresh_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] flags_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_ANDROID */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 28 /* LP64_UNIX */, 28 /* X86_64_WINDOWS */, 28 /* ARM64_IOS */ };
//private static final int[] flags_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] type_offset = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_ANDROID */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */ };
//private static final int[] type_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] name_offset = new int[] { 36 /* ARM_MIPS_32 */, 36 /* X86_32_UNIX */, 36 /* X86_32_ANDROID */, 36 /* X86_32_MACOS */, 36 /* PPC_32_UNIX */, 36 /* SPARC_32_SUNOS */, 36 /* X86_32_WINDOWS */, 36 /* LP64_UNIX */, 36 /* X86_64_WINDOWS */, 36 /* ARM64_IOS */ };
//private static final int[] name_size = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_ANDROID */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return drmModeModeInfo_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static drmModeModeInfo create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static drmModeModeInfo create(java.nio.ByteBuffer buf) {
      return new drmModeModeInfo(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static drmModeModeInfo derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  drmModeModeInfo(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  /**
   * Getter for native field <code>clock</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getClock() {
    return accessor.getIntAt(clock_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>hdisplay</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint16_t', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getHdisplay() {
    return accessor.getShortAt(hdisplay_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>hsync_start</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint16_t', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getHsync_start() {
    return accessor.getShortAt(hsync_start_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>hsync_end</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint16_t', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getHsync_end() {
    return accessor.getShortAt(hsync_end_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>htotal</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint16_t', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getHtotal() {
    return accessor.getShortAt(htotal_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>hskew</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint16_t', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getHskew() {
    return accessor.getShortAt(hskew_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>vdisplay</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint16_t', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getVdisplay() {
    return accessor.getShortAt(vdisplay_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>vsync_start</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint16_t', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getVsync_start() {
    return accessor.getShortAt(vsync_start_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>vsync_end</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint16_t', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getVsync_end() {
    return accessor.getShortAt(vsync_end_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>vtotal</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint16_t', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getVtotal() {
    return accessor.getShortAt(vtotal_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>vscan</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint16_t', size[fixed true, lnx64 2], const[false], is[primitive, int]</code>
   * </p>
   */
  public final short getVscan() {
    return accessor.getShortAt(vscan_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>vrefresh</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getVrefresh() {
    return accessor.getIntAt(vrefresh_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>flags</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getFlags() {
    return accessor.getIntAt(flags_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>type</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'uint32_t', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getType() {
    return accessor.getIntAt(type_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>name</code>, being a <i>struct</i> owned array with fixed element count of <code>32</code> elements.
   * <p>
   * Native Field Signature <code>(ArrayType) 'char *' -> (char) * , size[fixed false, lnx64 32], const[false], is[array*1]</code>
   * </p>
   * @return element count of the corresponding field-array
   */
  public static int getNameElemCount() { return 32; }

  /** SKIP setter for immutable native field <code>name</code>, being a <i>struct</i> owned array with fixed element count of <code>32</code> elements. NativeSig <code>(ArrayType) 'char *' -> (char) * , size[fixed false, lnx64 32], const[false], is[array*1]</code>  */

  /**
   * Getter for native field <code>name</code>, being a <i>struct</i> owned array with fixed element count of <code>32</code> elements.
   * <p>
   * Native Field Signature <code>(ArrayType) 'char *' -> (char) * , size[fixed false, lnx64 32], const[false], is[array*1]</code>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final String getNameAsString() {
    final int elemCount = getNameElemCount();
    final ByteBuffer bb = ElementBuffer.wrap(1, getBuffer(), name_offset[mdIdx], elemCount).getByteBuffer();
    final byte[] ba = new byte[elemCount];
    int i = -1;
    while( ++i < elemCount ) {
      ba[i] = bb.get(i);
      if( (byte)0 == ba[i] ) break;
    }
    return new String(ba, 0, i, _charset);
  }

  /**
   * Getter for native field <code>name</code>, being a <i>struct</i> owned array with fixed element count of <code>32</code> elements.
   * <p>
   * Native Field Signature <code>(ArrayType) 'char *' -> (char) * , size[fixed false, lnx64 32], const[false], is[array*1]</code>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final ByteBuffer getName() {
    return ElementBuffer.wrap(1, getBuffer(), name_offset[mdIdx], getNameElemCount())
             .getByteBuffer();
  }

  private static Charset _charset = StandardCharsets.UTF_8;

  /** Returns the Charset for this class's String mapping, default is StandardCharsets.UTF_8. */
  public static Charset getCharset() { return _charset; };

  /** Sets the Charset for this class's String mapping, default is StandardCharsets.UTF_8. */
  public static void setCharset(Charset cs) { _charset = cs; }

}
