/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Fri Aug 18 14:58:57 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.opengl.windows.wgl, cls WGL], ../build/jogl/gensrc/classes/jogamp/opengl/windows/wgl/WGL.java ----! */

package jogamp.opengl.windows.wgl;

import java.util.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.fixedfunc.*;
import jogamp.opengl.*;
import jogamp.nativewindow.windows.PIXELFORMATDESCRIPTOR;
import com.jogamp.gluegen.runtime.opengl.GLProcAddressResolver;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;
import com.jogamp.common.util.*;
import java.util.Set;
import java.util.Map;
import java.util.HashMap;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

 /**
  * Provides access to the Windows-specific OpenGL vendor extensions.
  * See {@link GLBase} for more information.
  */
public class WGL {

  /** Part of CORE DEF<br>Define "WGL_SWAP_MAIN_PLANE" with expression '<code>1</code>', CType: int */
  public static final int WGL_SWAP_MAIN_PLANE = 0x1;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY15" with expression '<code>0x40000000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY15 = 0x40000000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY14" with expression '<code>0x20000000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY14 = 0x20000000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY13" with expression '<code>0x10000000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY13 = 0x10000000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY12" with expression '<code>0x8000000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY12 = 0x8000000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY11" with expression '<code>0x4000000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY11 = 0x4000000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY10" with expression '<code>0x2000000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY10 = 0x2000000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY14" with expression '<code>16384</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY14 = 0x4000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY15" with expression '<code>32768</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY15 = 0x8000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY12" with expression '<code>4096</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY12 = 0x1000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY13" with expression '<code>8192</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY13 = 0x2000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY10" with expression '<code>1024</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY10 = 0x400;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY11" with expression '<code>2048</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY11 = 0x800;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY9" with expression '<code>512</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY9 = 0x200;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY7" with expression '<code>128</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY7 = 0x80;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY8" with expression '<code>256</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY8 = 0x100;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY5" with expression '<code>32</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY5 = 0x20;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY6" with expression '<code>64</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY6 = 0x40;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY3" with expression '<code>8</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY3 = 0x8;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY4" with expression '<code>16</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY4 = 0x10;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY1" with expression '<code>2</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY1 = 0x2;
  /** Part of CORE DEF<br>Define "WGL_SWAP_OVERLAY2" with expression '<code>4</code>', CType: int */
  public static final int WGL_SWAP_OVERLAY2 = 0x4;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY4" with expression '<code>0x80000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY4 = 0x80000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY3" with expression '<code>0x40000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY3 = 0x40000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY2" with expression '<code>0x20000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY2 = 0x20000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY1" with expression '<code>65536</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY1 = 0x10000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY9" with expression '<code>0x1000000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY9 = 0x1000000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY8" with expression '<code>0x800000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY8 = 0x800000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY7" with expression '<code>0x400000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY7 = 0x400000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY6" with expression '<code>0x200000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY6 = 0x200000;
  /** Part of CORE DEF<br>Define "WGL_SWAP_UNDERLAY5" with expression '<code>0x100000</code>', CType: int */
  public static final int WGL_SWAP_UNDERLAY5 = 0x100000;

  /** Entry point to C language function: <code> BOOL wglCopyContext(HGLRC, HGLRC, UINT) </code> <br>Part of CORE FUNC<br>   */
  public static boolean wglCopyContext(long arg0, long arg1, int arg2)  {

    final long __addr_ = wglProcAddressTable._addressof_wglCopyContext;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglCopyContext"));
    }
        return dispatch_wglCopyContext0(arg0, arg1, arg2, __addr_);
  }

  /** Entry point to C language function: <code> BOOL wglCopyContext(HGLRC, HGLRC, UINT) </code> <br>Part of CORE FUNC<br>   */
  static private native boolean dispatch_wglCopyContext0(long arg0, long arg1, int arg2, long procAddress);

  /** Entry point to C language function: <code> HGLRC wglCreateContext(HDC) </code> <br>Part of CORE FUNC<br>   */
  public static long wglCreateContext(long arg0)  {

    final long __addr_ = wglProcAddressTable._addressof_wglCreateContext;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglCreateContext"));
    }
        return dispatch_wglCreateContext0(arg0, __addr_);
  }

  /** Entry point to C language function: <code> HGLRC wglCreateContext(HDC) </code> <br>Part of CORE FUNC<br>   */
  static private native long dispatch_wglCreateContext0(long arg0, long procAddress);

  /** Entry point to C language function: <code> BOOL wglDeleteContext(HGLRC) </code> <br>Part of CORE FUNC<br>   */
  public static boolean wglDeleteContext(long arg0)  {

    final long __addr_ = wglProcAddressTable._addressof_wglDeleteContext;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglDeleteContext"));
    }
        return dispatch_wglDeleteContext0(arg0, __addr_);
  }

  /** Entry point to C language function: <code> BOOL wglDeleteContext(HGLRC) </code> <br>Part of CORE FUNC<br>   */
  static private native boolean dispatch_wglDeleteContext0(long arg0, long procAddress);

  /** Entry point to C language function: <code> HGLRC wglGetCurrentContext() </code> <br>Part of CORE FUNC<br>   */
  public static long wglGetCurrentContext()  {

    final long __addr_ = wglProcAddressTable._addressof_wglGetCurrentContext;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglGetCurrentContext"));
    }
        return dispatch_wglGetCurrentContext0(__addr_);
  }

  /** Entry point to C language function: <code> HGLRC wglGetCurrentContext() </code> <br>Part of CORE FUNC<br>   */
  static private native long dispatch_wglGetCurrentContext0(long procAddress);

  /** Entry point to C language function: <code> HDC wglGetCurrentDC() </code> <br>Part of CORE FUNC<br>   */
  public static long wglGetCurrentDC()  {

    final long __addr_ = wglProcAddressTable._addressof_wglGetCurrentDC;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglGetCurrentDC"));
    }
        return dispatch_wglGetCurrentDC0(__addr_);
  }

  /** Entry point to C language function: <code> HDC wglGetCurrentDC() </code> <br>Part of CORE FUNC<br>   */
  static private native long dispatch_wglGetCurrentDC0(long procAddress);

  /** Entry point to C language function: <code> BOOL wglMakeCurrent(HDC, HGLRC) </code> <br>Part of CORE FUNC<br>   */
  public static boolean wglMakeCurrent(long arg0, long arg1)  {

    final long __addr_ = wglProcAddressTable._addressof_wglMakeCurrent;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglMakeCurrent"));
    }
        return dispatch_wglMakeCurrent0(arg0, arg1, __addr_);
  }

  /** Entry point to C language function: <code> BOOL wglMakeCurrent(HDC, HGLRC) </code> <br>Part of CORE FUNC<br>   */
  static private native boolean dispatch_wglMakeCurrent0(long arg0, long arg1, long procAddress);

  /** Entry point to C language function: <code> BOOL wglShareLists(HGLRC, HGLRC) </code> <br>Part of CORE FUNC<br>   */
  public static boolean wglShareLists(long arg0, long arg1)  {

    final long __addr_ = wglProcAddressTable._addressof_wglShareLists;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglShareLists"));
    }
        return dispatch_wglShareLists0(arg0, arg1, __addr_);
  }

  /** Entry point to C language function: <code> BOOL wglShareLists(HGLRC, HGLRC) </code> <br>Part of CORE FUNC<br>   */
  static private native boolean dispatch_wglShareLists0(long arg0, long arg1, long procAddress);

  /** Entry point to C language function: <code> PROC wglGetProcAddress(LPCSTR) </code> <br>Part of CORE FUNC<br>   */
  public static long wglGetProcAddress(String arg0)  {

    final long __addr_ = wglProcAddressTable._addressof_wglGetProcAddress;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglGetProcAddress"));
    }
        return dispatch_wglGetProcAddress0(arg0, __addr_);
  }

  /** Entry point to C language function: <code> PROC wglGetProcAddress(LPCSTR) </code> <br>Part of CORE FUNC<br>   */
  static private native long dispatch_wglGetProcAddress0(String arg0, long procAddress);

  /** Entry point to C language function: <code> BOOL wglSwapLayerBuffers(HDC, UINT) </code> <br>Part of CORE FUNC<br>   */
  public static boolean wglSwapLayerBuffers(long arg0, int arg1)  {

    final long __addr_ = wglProcAddressTable._addressof_wglSwapLayerBuffers;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglSwapLayerBuffers"));
    }
        return dispatch_wglSwapLayerBuffers0(arg0, arg1, __addr_);
  }

  /** Entry point to C language function: <code> BOOL wglSwapLayerBuffers(HDC, UINT) </code> <br>Part of CORE FUNC<br>   */
  static private native boolean dispatch_wglSwapLayerBuffers0(long arg0, int arg1, long procAddress);

  /** Entry point to C language function: <code> int wglChoosePixelFormat(HDC, const PIXELFORMATDESCRIPTOR * ) </code> <br>Part of <code>WGL_EXT_pixel_format</code>, <code>WGL_ARB_pixel_format</code><br>Alias for: <code>wglChoosePixelFormatEXT</code>, <code>wglChoosePixelFormatARB</code>   */
  public static int wglChoosePixelFormat(long arg0, PIXELFORMATDESCRIPTOR arg1)  {

    final long __addr_ = wglProcAddressTable._addressof_wglChoosePixelFormat;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglChoosePixelFormat"));
    }
        return dispatch_wglChoosePixelFormat0(arg0, ((arg1 == null) ? null : arg1.getBuffer()), __addr_);
  }

  /** Entry point to C language function: <code> int wglChoosePixelFormat(HDC, const PIXELFORMATDESCRIPTOR * ) </code> <br>Part of <code>WGL_EXT_pixel_format</code>, <code>WGL_ARB_pixel_format</code><br>Alias for: <code>wglChoosePixelFormatEXT</code>, <code>wglChoosePixelFormatARB</code>   */
  private static native int dispatch_wglChoosePixelFormat0(long arg0, ByteBuffer arg1, long procAddress);

  /** Entry point to C language function: <code> int wglDescribePixelFormat(HDC, int, UINT, LPPIXELFORMATDESCRIPTOR) </code> <br>Part of CORE FUNC<br>   */
  public static int wglDescribePixelFormat(long arg0, int arg1, int arg2, PIXELFORMATDESCRIPTOR arg3)  {

    final long __addr_ = wglProcAddressTable._addressof_wglDescribePixelFormat;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglDescribePixelFormat"));
    }
        return dispatch_wglDescribePixelFormat0(arg0, arg1, arg2, ((arg3 == null) ? null : arg3.getBuffer()), __addr_);
  }

  /** Entry point to C language function: <code> int wglDescribePixelFormat(HDC, int, UINT, LPPIXELFORMATDESCRIPTOR) </code> <br>Part of CORE FUNC<br>   */
  private static native int dispatch_wglDescribePixelFormat0(long arg0, int arg1, int arg2, ByteBuffer arg3, long procAddress);

  /** Entry point to C language function: <code> int wglGetPixelFormat(HDC) </code> <br>Part of CORE FUNC<br>   */
  public static int wglGetPixelFormat(long arg0)  {

    final long __addr_ = wglProcAddressTable._addressof_wglGetPixelFormat;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglGetPixelFormat"));
    }
        return dispatch_wglGetPixelFormat0(arg0, __addr_);
  }

  /** Entry point to C language function: <code> int wglGetPixelFormat(HDC) </code> <br>Part of CORE FUNC<br>   */
  static private native int dispatch_wglGetPixelFormat0(long arg0, long procAddress);

  /** Entry point to C language function: <code> BOOL wglSetPixelFormat(HDC, int, const PIXELFORMATDESCRIPTOR * ) </code> <br>Part of CORE FUNC<br>   */
  public static boolean wglSetPixelFormat(long arg0, int arg1, PIXELFORMATDESCRIPTOR arg2)  {

    final long __addr_ = wglProcAddressTable._addressof_wglSetPixelFormat;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglSetPixelFormat"));
    }
        return dispatch_wglSetPixelFormat0(arg0, arg1, ((arg2 == null) ? null : arg2.getBuffer()), __addr_);
  }

  /** Entry point to C language function: <code> BOOL wglSetPixelFormat(HDC, int, const PIXELFORMATDESCRIPTOR * ) </code> <br>Part of CORE FUNC<br>   */
  private static native boolean dispatch_wglSetPixelFormat0(long arg0, int arg1, ByteBuffer arg2, long procAddress);

  /** Entry point to C language function: <code> BOOL wglSwapBuffers(HDC) </code> <br>Part of CORE FUNC<br>   */
  public static boolean wglSwapBuffers(long arg0)  {

    final long __addr_ = wglProcAddressTable._addressof_wglSwapBuffers;
    if (__addr_ == 0) {
      throw new GLException(String.format("Method \"%s\" not available", "wglSwapBuffers"));
    }
        return dispatch_wglSwapBuffers0(arg0, __addr_);
  }

  /** Entry point to C language function: <code> BOOL wglSwapBuffers(HDC) </code> <br>Part of CORE FUNC<br>   */
  static private native boolean dispatch_wglSwapBuffers0(long arg0, long procAddress);


  // --- Begin CustomJavaCode .cfg declarations
 private static WGLProcAddressTable wglProcAddressTable = new WGLProcAddressTable(new GLProcAddressResolver());
 public  static WGLProcAddressTable getWGLProcAddressTable() { return wglProcAddressTable; }
  static long wglGetProcAddress(long wglGetProcAddressHandle, java.lang.String procname)
  {
    if (wglGetProcAddressHandle == 0) {
      throw new GLException("Passed null pointer for method \"wglGetProcAddress\"");
    }
    return dispatch_wglGetProcAddress0(procname, wglGetProcAddressHandle);
  }
  // ---- End CustomJavaCode .cfg declarations
} // end of class WGL
