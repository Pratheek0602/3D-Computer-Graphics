/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Fri Aug 18 14:58:58 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.opengl.windows.wgl, cls PGPU_DEVICE], ../build/jogl/gensrc/classes/jogamp/opengl/windows/wgl/PGPU_DEVICE.java ----! */


package jogamp.opengl.windows.wgl;

import java.nio.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.util.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.fixedfunc.*;
import jogamp.opengl.*;

public class PGPU_DEVICE {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] PGPU_DEVICE_size = new int[] { 184 /* ARM_MIPS_32 */, 184 /* X86_32_UNIX */, 184 /* X86_32_ANDROID */, 184 /* X86_32_MACOS */, 184 /* PPC_32_UNIX */, 184 /* SPARC_32_SUNOS */, 184 /* X86_32_WINDOWS */, 184 /* LP64_UNIX */, 184 /* X86_64_WINDOWS */, 184 /* ARM64_IOS */  };
  private static final int[] cb_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_ANDROID */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */, 0 /* ARM64_IOS */ };
//private static final int[] cb_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] DeviceName_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */ };
//private static final int[] DeviceName_size = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_ANDROID */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */, 32 /* ARM64_IOS */  };
  private static final int[] DeviceString_offset = new int[] { 36 /* ARM_MIPS_32 */, 36 /* X86_32_UNIX */, 36 /* X86_32_ANDROID */, 36 /* X86_32_MACOS */, 36 /* PPC_32_UNIX */, 36 /* SPARC_32_SUNOS */, 36 /* X86_32_WINDOWS */, 36 /* LP64_UNIX */, 36 /* X86_64_WINDOWS */, 36 /* ARM64_IOS */ };
//private static final int[] DeviceString_size = new int[] { 128 /* ARM_MIPS_32 */, 128 /* X86_32_UNIX */, 128 /* X86_32_ANDROID */, 128 /* X86_32_MACOS */, 128 /* PPC_32_UNIX */, 128 /* SPARC_32_SUNOS */, 128 /* X86_32_WINDOWS */, 128 /* LP64_UNIX */, 128 /* X86_64_WINDOWS */, 128 /* ARM64_IOS */  };
  private static final int[] Flags_offset = new int[] { 164 /* ARM_MIPS_32 */, 164 /* X86_32_UNIX */, 164 /* X86_32_ANDROID */, 164 /* X86_32_MACOS */, 164 /* PPC_32_UNIX */, 164 /* SPARC_32_SUNOS */, 164 /* X86_32_WINDOWS */, 164 /* LP64_UNIX */, 164 /* X86_64_WINDOWS */, 164 /* ARM64_IOS */ };
//private static final int[] Flags_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_ANDROID */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */, 4 /* ARM64_IOS */  };
  private static final int[] rcVirtualScreen_offset = new int[] { 168 /* ARM_MIPS_32 */, 168 /* X86_32_UNIX */, 168 /* X86_32_ANDROID */, 168 /* X86_32_MACOS */, 168 /* PPC_32_UNIX */, 168 /* SPARC_32_SUNOS */, 168 /* X86_32_WINDOWS */, 168 /* LP64_UNIX */, 168 /* X86_64_WINDOWS */, 168 /* ARM64_IOS */ };
  private static final int[] rcVirtualScreen_size = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_ANDROID */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */, 16 /* ARM64_IOS */  };

  /** Returns true if this generated implementation uses native code, otherwise false. */
  public static boolean usesNativeCode() {
    return false;
  }

  /** Returns the aligned total size of a native instance. */
  public static int size() {
    return PGPU_DEVICE_size[mdIdx];
  }

  /** Returns a new instance with all bytes set to zero. */
  public static PGPU_DEVICE create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  /** Returns a new instance using the given ByteBuffer having at least {#link size()} bytes capacity. The ByteBuffer will be {@link ByteBuffer#rewind()} and native-order set. */
  public static PGPU_DEVICE create(java.nio.ByteBuffer buf) {
      return new PGPU_DEVICE(buf);
  }

  /** Returns new instance dereferencing ByteBuffer at given native address `addr` with size {@link #size()}. */
  public static PGPU_DEVICE derefPointer(final long addr) {
      return create( ElementBuffer.derefPointer(size(), addr, 1).getByteBuffer() );
  }

  PGPU_DEVICE(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  /** Return the underlying native direct ByteBuffer */
  public final java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Returns the native address of the underlying native ByteBuffer {@link #getBuffer()} */
  public final long getDirectBufferAddress() {
    return accessor.getDirectBufferAddress();
  }

  /**
   * Setter for native field <code>cb</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PGPU_DEVICE setCb(int src) {
    accessor.setIntAt(cb_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>cb</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getCb() {
    return accessor.getIntAt(cb_offset[mdIdx]);
  }

  /**
   * Getter for native field <code>DeviceName</code>, being a <i>struct</i> owned array with fixed element count of <code>32</code> elements.
   * <p>
   * Native Field Signature <code>(ArrayType) 'CHAR *' -> (CHAR) * , size[fixed false, lnx64 32], const[false], is[array*1]</code>
   * </p>
   * @return element count of the corresponding field-array
   */
  public static int getDeviceNameElemCount() { return 32; }

  /**
   * Setter for native field <code>DeviceName</code>, being a <i>struct</i> owned array with fixed element count of <code>32</code> elements.
   * <p>
   * Native Field Signature <code>(ArrayType) 'CHAR *' -> (CHAR) * , size[fixed false, lnx64 32], const[false], is[array*1]</code>
   * </p>
   * <p>
   * Copies the given source elements into the respective field's existing memory.
   * </p>
   * @param src the source array of elements
   * @param srcPos starting element position within the source array with 'srcPos >= 0` &&  `srcPos + length <= src.length`, otherwise an {@link IndexOutOfBoundsException} is thrown
   * @param destPos starting element position within the destination with 'destPos >= 0` && `destPos + length <= elemCount`, otherwise an exception is thrown
   * @param length the element count to be copied with 'length >= 0` &&  `srcPos + length <= src.length` && `destPos + length <= elemCount`, otherwise an {@link IndexOutOfBoundsException} is thrown
   * @return this instance of chaining
   */
  public final PGPU_DEVICE setDeviceName(byte[] src, final int srcPos, final int destPos, final int length) {
    final int elemCount = getDeviceNameElemCount();
    final ElementBuffer eb = ElementBuffer.wrap(1, getBuffer(), DeviceName_offset[mdIdx], elemCount);
    eb.put(src, srcPos, destPos, length);
    return this;
  }

  /**
   * Getter for native field <code>DeviceName</code>, being a <i>struct</i> owned array with fixed element count of <code>32</code> elements.
   * <p>
   * Native Field Signature <code>(ArrayType) 'CHAR *' -> (CHAR) * , size[fixed false, lnx64 32], const[false], is[array*1]</code>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final ByteBuffer getDeviceName() {
    return ElementBuffer.wrap(1, getBuffer(), DeviceName_offset[mdIdx], getDeviceNameElemCount())
             .getByteBuffer();
  }

  /**
   * Getter for native field <code>DeviceName</code>, being a <i>struct</i> owned array with fixed element count of <code>32</code> elements.
   * <p>
   * Native Field Signature <code>(ArrayType) 'CHAR *' -> (CHAR) * , size[fixed false, lnx64 32], const[false], is[array*1]</code>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final byte[] getDeviceName(final int srcPos, byte dest[], final int destPos, final int length) {
    final int elemCount = getDeviceNameElemCount();
    ElementBuffer.wrap(1, getBuffer(), DeviceName_offset[mdIdx], elemCount).get(srcPos, dest, destPos, length);
    return dest;
  }

  /**
   * Getter for native field <code>DeviceString</code>, being a <i>struct</i> owned array with fixed element count of <code>128</code> elements.
   * <p>
   * Native Field Signature <code>(ArrayType) 'CHAR *' -> (CHAR) * , size[fixed false, lnx64 128], const[false], is[array*1]</code>
   * </p>
   * @return element count of the corresponding field-array
   */
  public static int getDeviceStringElemCount() { return 128; }

  /**
   * Setter for native field <code>DeviceString</code>, being a <i>struct</i> owned array with fixed element count of <code>128</code> elements.
   * <p>
   * Native Field Signature <code>(ArrayType) 'CHAR *' -> (CHAR) * , size[fixed false, lnx64 128], const[false], is[array*1]</code>
   * </p>
   * <p>
   * Copies the given source elements into the respective field's existing memory.
   * </p>
   * @param src the source array of elements
   * @param srcPos starting element position within the source array with 'srcPos >= 0` &&  `srcPos + length <= src.length`, otherwise an {@link IndexOutOfBoundsException} is thrown
   * @param destPos starting element position within the destination with 'destPos >= 0` && `destPos + length <= elemCount`, otherwise an exception is thrown
   * @param length the element count to be copied with 'length >= 0` &&  `srcPos + length <= src.length` && `destPos + length <= elemCount`, otherwise an {@link IndexOutOfBoundsException} is thrown
   * @return this instance of chaining
   */
  public final PGPU_DEVICE setDeviceString(byte[] src, final int srcPos, final int destPos, final int length) {
    final int elemCount = getDeviceStringElemCount();
    final ElementBuffer eb = ElementBuffer.wrap(1, getBuffer(), DeviceString_offset[mdIdx], elemCount);
    eb.put(src, srcPos, destPos, length);
    return this;
  }

  /**
   * Getter for native field <code>DeviceString</code>, being a <i>struct</i> owned array with fixed element count of <code>128</code> elements.
   * <p>
   * Native Field Signature <code>(ArrayType) 'CHAR *' -> (CHAR) * , size[fixed false, lnx64 128], const[false], is[array*1]</code>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final ByteBuffer getDeviceString() {
    return ElementBuffer.wrap(1, getBuffer(), DeviceString_offset[mdIdx], getDeviceStringElemCount())
             .getByteBuffer();
  }

  /**
   * Getter for native field <code>DeviceString</code>, being a <i>struct</i> owned array with fixed element count of <code>128</code> elements.
   * <p>
   * Native Field Signature <code>(ArrayType) 'CHAR *' -> (CHAR) * , size[fixed false, lnx64 128], const[false], is[array*1]</code>
   * </p>
   * @return element value of the corresponding field-array
   */
  public final byte[] getDeviceString(final int srcPos, byte dest[], final int destPos, final int length) {
    final int elemCount = getDeviceStringElemCount();
    ElementBuffer.wrap(1, getBuffer(), DeviceString_offset[mdIdx], elemCount).get(srcPos, dest, destPos, length);
    return dest;
  }

  /**
   * Setter for native field <code>Flags</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final PGPU_DEVICE setFlags(int src) {
    accessor.setIntAt(Flags_offset[mdIdx], src);
    return this;
  }

  /**
   * Getter for native field <code>Flags</code>, being a <i>struct</i> owned IntType.
   * <p>
   * Native Field Signature <code>(IntType) typedef 'DWORD', size[fixed true, lnx64 4], const[false], is[primitive, int]</code>
   * </p>
   */
  public final int getFlags() {
    return accessor.getIntAt(Flags_offset[mdIdx]);
  }

  /**
   * Setter for native field <code>rcVirtualScreen</code>, being a <i>struct</i> owned StructType.
   * <p>
   * Native Field Signature <code>(StructType) typedef 'RECT', size[fixed false, lnx64 16], const[false], is[struct{tagRECT: 4}]</code>
   * </p>
   */
  public final PGPU_DEVICE setRcVirtualScreen(RECT src) {
    final ByteBuffer bb = src.getBuffer();
    final int size = rcVirtualScreen_size[mdIdx];
    final byte[] content = new byte[size];
    bb.get(content, 0, size);
    accessor.setBytesAt(rcVirtualScreen_offset[mdIdx], content);
    return this;
  }

  /**
   * Getter for native field <code>rcVirtualScreen</code>, being a <i>struct</i> owned StructType.
   * <p>
   * Native Field Signature <code>(StructType) typedef 'RECT', size[fixed false, lnx64 16], const[false], is[struct{tagRECT: 4}]</code>
   * </p>
   */
  public final RECT getRcVirtualScreen() {
    return RECT.create( accessor.slice( rcVirtualScreen_offset[mdIdx], rcVirtualScreen_size[mdIdx] ) );
  }

}
