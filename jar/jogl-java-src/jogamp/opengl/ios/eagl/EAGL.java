/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Fri Aug 18 14:59:01 CEST 2023 ----! */
/* !---- Java-Unit: [pkg jogamp.opengl.ios.eagl, cls EAGL], ../build/jogl/gensrc/classes/jogamp/opengl/ios/eagl/EAGL.java ----! */

package jogamp.opengl.ios.eagl;

import java.util.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.fixedfunc.*;
import jogamp.opengl.*;
import com.jogamp.common.util.Function;
import jogamp.nativewindow.ios.IOSUtil;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;
import com.jogamp.common.util.*;
import java.util.Set;
import java.util.Map;
import java.util.HashMap;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

public class EAGL {

  /** Defined as part of enum type "EAGLRenderingAPI" with expression '<code>1</code>', CType: int */
  public static final int kEAGLRenderingAPIOpenGLES1 = 0x1;
  /** Defined as part of enum type "EAGLRenderingAPI" with expression '<code>2</code>', CType: int */
  public static final int kEAGLRenderingAPIOpenGLES2 = 0x2;
  /** Defined as part of enum type "EAGLRenderingAPI" with expression '<code>3</code>', CType: int */
  public static final int kEAGLRenderingAPIOpenGLES3 = 0x3;

  /** Interface to C language function: <br> <code>void EAGLGetVersion(unsigned int *  major, unsigned int *  minor)</code><br>
      @param major a direct only {@link java.nio.IntBuffer}
      @param minor a direct only {@link java.nio.IntBuffer}   */
  public static void EAGLGetVersion(IntBuffer major, IntBuffer minor)  {

    if (!Buffers.isDirect(major))
      throw new GLException("Argument \"major\" is not a direct buffer");
    if (!Buffers.isDirect(minor))
      throw new GLException("Argument \"minor\" is not a direct buffer");
    EAGLGetVersion0(major, Buffers.getDirectBufferByteOffset(major), minor, Buffers.getDirectBufferByteOffset(minor));
  }

  /** Entry point to C language function: <code>void EAGLGetVersion(unsigned int *  major, unsigned int *  minor)</code><br>
      @param major a direct only {@link java.nio.IntBuffer}
      @param minor a direct only {@link java.nio.IntBuffer}   */
  private static native void EAGLGetVersion0(Object major, int major_byte_offset, Object minor, int minor_byte_offset);

  /** Interface to C language function: <br> <code>EAGLContext *  eaglCreateContext(EAGLRenderingAPI api)</code><br>
      @param api valid values are: <code>kEAGLRenderingAPIOpenGLES1, kEAGLRenderingAPIOpenGLES2, kEAGLRenderingAPIOpenGLES3</code>
   */
  public static native long eaglCreateContext(int api);

  /** Interface to C language function: <br> <code>EAGLContext *  eaglCreateContextShared(EAGLRenderingAPI api, EAGLSharegroup *  sharegroup)</code><br>
      @param api valid values are: <code>kEAGLRenderingAPIOpenGLES1, kEAGLRenderingAPIOpenGLES2, kEAGLRenderingAPIOpenGLES3</code>
   */
  public static native long eaglCreateContextShared(int api, long sharegroup);

  /** Interface to C language function: <br> <code>Bool eaglDeleteContext(EAGLContext *  ctx, Bool releaseOnMainThread)</code><br>   */
  public static native boolean eaglDeleteContext(long ctx, boolean releaseOnMainThread);

  /** Interface to C language function: <br> <code>EAGLRenderingAPI eaglGetRenderingAPI(EAGLContext *  ctx)</code><br>   */
  public static native int eaglGetRenderingAPI(long ctx);

  /** Interface to C language function: <br> <code>EAGLSharegroup *  eaglGetSharegroup(EAGLContext *  ctx)</code><br>   */
  public static native long eaglGetSharegroup(long ctx);

  /** Interface to C language function: <br> <code>Bool eaglIsContextMultiThreaded(EAGLContext *  ctx)</code><br>   */
  public static native boolean eaglIsContextMultiThreaded(long ctx);

  /** Interface to C language function: <br> <code>void eaglSetContextMultiThreaded(EAGLContext *  ctx, Bool v)</code><br>   */
  public static native void eaglSetContextMultiThreaded(long ctx, boolean v);

  /** Interface to C language function: <br> <code>EAGLContext *  eaglGetCurrentContext()</code><br>   */
  public static native long eaglGetCurrentContext();

  /** Interface to C language function: <br> <code>Bool eaglMakeCurrentContext(EAGLContext *  ctx)</code><br>   */
  public static native boolean eaglMakeCurrentContext(long ctx);

  /** Interface to C language function: <br> <code>Bool eaglBindDrawableStorageToRenderbuffer(EAGLContext *  ctx, int renderbufferTarget, CAEAGLLayer *  drawable)</code><br>   */
  public static native boolean eaglBindDrawableStorageToRenderbuffer(long ctx, int renderbufferTarget, long drawable);

  /** Interface to C language function: <br> <code>Bool eaglPresentRenderbuffer(EAGLContext *  ctx, int renderbufferTarget)</code><br>   */
  public static native boolean eaglPresentRenderbuffer(long ctx, int renderbufferTarget);

  /** Interface to C language function: <br> <code>void *  getProcAddress(const char *  procName)</code><br>   */
  public static native long getProcAddress(String procName);

} // end of class EAGL
